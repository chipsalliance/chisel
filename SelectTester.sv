// Generated by CIRCT firtool-1.76.0-1-g086a19f12

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Include register initializers in init blocks unless synthesis is set
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Standard header to adapt well known macros for register randomization.

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_
module SelectTester(	// src/test/scala/chiselTests/aop/SelectSpec.scala:16:7
  input clock,	// src/test/scala/chiselTests/aop/SelectSpec.scala:16:7
        reset	// src/test/scala/chiselTests/aop/SelectSpec.scala:16:7
);

  reg  [2:0] counter;	// src/test/scala/chiselTests/aop/SelectSpec.scala:18:24
  wire       overflow = counter > 3'h2;	// src/test/scala/chiselTests/aop/SelectSpec.scala:18:24, :21:26
  `ifndef SYNTHESIS	// src/test/scala/chiselTests/aop/SelectSpec.scala:31:13
    always @(posedge clock) begin	// src/test/scala/chiselTests/aop/SelectSpec.scala:31:13
      automatic logic [3:0][1:0] _GEN = '{2'h0, 2'h2, 2'h1, 2'h0};
      automatic logic [1:0]      _GEN_0;	// src/test/scala/chiselTests/aop/SelectSpec.scala:31:22
      automatic logic            _GEN_1;	// src/test/scala/chiselTests/aop/SelectSpec.scala:30:18
      _GEN_0 = _GEN[counter[1:0]];	// <stdin>:24:24, src/test/scala/chiselTests/aop/SelectSpec.scala:18:24, :31:22
      _GEN_1 = counter < 3'h3 & ~reset;	// src/test/scala/chiselTests/aop/SelectSpec.scala:18:24, :21:26, :22:29, :26:18, :30:18
      if ((`STOP_COND_) & overflow & ~reset)	// src/test/scala/chiselTests/aop/SelectSpec.scala:21:26, :22:29, :28:9
        $finish;	// src/test/scala/chiselTests/aop/SelectSpec.scala:28:9
      if (_GEN_1 & counter != {1'h0, _GEN_0}) begin	// src/test/scala/chiselTests/aop/SelectSpec.scala:16:7, :18:24, :30:18, :31:{13,22}
        if (`ASSERT_VERBOSE_COND_)	// src/test/scala/chiselTests/aop/SelectSpec.scala:31:13
          $error("Assertion failed at SelectSpec.scala:31\n");	// src/test/scala/chiselTests/aop/SelectSpec.scala:31:13
        if (`STOP_COND_)	// src/test/scala/chiselTests/aop/SelectSpec.scala:28:9, :31:13
          $fatal;	// src/test/scala/chiselTests/aop/SelectSpec.scala:31:13
      end
      if ((`PRINTF_COND_) & _GEN_1)	// src/test/scala/chiselTests/aop/SelectSpec.scala:30:18, :32:17
        $fwrite(32'h80000002, "values(%d) = %d\n", counter, _GEN_0);	// src/test/scala/chiselTests/aop/SelectSpec.scala:18:24, :31:22, :32:17
    end // always @(posedge)
  `endif // not def SYNTHESIS
  always @(posedge clock) begin	// src/test/scala/chiselTests/aop/SelectSpec.scala:16:7
    if (reset)	// src/test/scala/chiselTests/aop/SelectSpec.scala:16:7
      counter <= 3'h0;	// src/test/scala/chiselTests/aop/SelectSpec.scala:18:24
    else	// src/test/scala/chiselTests/aop/SelectSpec.scala:16:7
      counter <= overflow ? 3'h0 : counter + 3'h1;	// src/test/scala/chiselTests/aop/SelectSpec.scala:18:24, :19:23, :20:11, :21:26, :26:18, :27:13
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_	// src/test/scala/chiselTests/aop/SelectSpec.scala:16:7
    `ifdef FIRRTL_BEFORE_INITIAL	// src/test/scala/chiselTests/aop/SelectSpec.scala:16:7
      `FIRRTL_BEFORE_INITIAL	// src/test/scala/chiselTests/aop/SelectSpec.scala:16:7
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// src/test/scala/chiselTests/aop/SelectSpec.scala:16:7
      automatic logic [31:0] _RANDOM[0:0];	// src/test/scala/chiselTests/aop/SelectSpec.scala:16:7
      `ifdef INIT_RANDOM_PROLOG_	// src/test/scala/chiselTests/aop/SelectSpec.scala:16:7
        `INIT_RANDOM_PROLOG_	// src/test/scala/chiselTests/aop/SelectSpec.scala:16:7
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// src/test/scala/chiselTests/aop/SelectSpec.scala:16:7
        _RANDOM[/*Zero width*/ 1'b0] = `RANDOM;	// src/test/scala/chiselTests/aop/SelectSpec.scala:16:7
        counter = _RANDOM[/*Zero width*/ 1'b0][2:0];	// src/test/scala/chiselTests/aop/SelectSpec.scala:16:7, :18:24
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// src/test/scala/chiselTests/aop/SelectSpec.scala:16:7
      `FIRRTL_AFTER_INITIAL	// src/test/scala/chiselTests/aop/SelectSpec.scala:16:7
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
endmodule

