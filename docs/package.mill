// See LICENSE for license details.

package build.docs

import mill._
import mill.scalalib._
import mill.scalalib.scalafmt._
import mill.api.Result
import mill.util.Jvm

import build._
import Version.GitHubRepository

/** MDoc project */
object `package` extends RootModule with SbtModule with HasScala2Plugin with HasCommonOptions {

  override def scalaVersion = v.scalaVersion

  // This not really a CrossModule but HasScala2Plugin and HasCommonOptions require it
  override def crossValue = v.scalaVersion

  def pluginModule = plugin.cross()

  // Our scala sources to be used by mdoc live here
  override def millSourcePath = super.millSourcePath / os.up / "docs-target"

  override def ivyDeps = T { Agg(v.mdoc, v.scalatest) }

  override def moduleDeps = Seq(chisel(v.scalaVersion))

  // Suppress missing interpolator warnings because mdoc appears to introduce them.
  override def extraWarnConf = Seq("msg=possible missing interpolator:s")

  override def scalacOptions = Task {
    super.scalacOptions() ++ Seq(
      // We do not want to force type annotations onto the
      // demonstration user code, especially this comes up in setting the elements of a Record
      "-Xsource-features:infer-override"
    )
  }

  def websiteGenerated = Task {
    val dir = millSourcePath / os.up / "website" / "src" / "pages" / "generated"
    os.makeDir.all(dir)
    PathRef(dir)
  }

  def mdocSourceDir = T { millSourcePath / os.up / "docs" / "src" }

  def mdocOutDir = T { millSourcePath / os.up / "docs" / "generated" }

  def mdocSources = T.sources { mdocSourceDir() }

  def mdocExtraArguments = T {
    // None of our links are hygienic because they're primarily used on the website with .html
    Seq("--cwd", "docs", "--no-link-hygiene")
  }

  def latestStableVersion = Task {
    Releases.getLatest(Releases.releases(T.log)).serialize
  }

  def firtoolVersionsTable = Task {
    val outputFile = Task.dest / "FirtoolVersionsTable.scala"
    val releaseTable = FirtoolVersionsTable.generateTable(true, T.log).replaceAll("\n", "\\\\n")
    val prereleaseTable = FirtoolVersionsTable.generateTable(false, T.log).replaceAll("\n", "\\\\n")
    val contents =
      s"""|object FirtoolVersionsTable {
          |  def releaseTable = "$releaseTable"
          |  def prereleaseTable = "$prereleaseTable"
          |}""".stripMargin
    os.write(outputFile, contents, createFolders = true)
    PathRef(Task.dest)
  }

  override def generatedSources = Task {
    super.generatedSources() :+ firtoolVersionsTable()
  }

  def mdoc = T {
    val classpath = runClasspath().map(_.path)
    val outDir = mdocOutDir()

    val inOutArgs =
      mdocSources().flatMap(inDir => Seq[String]("--in", inDir.path.toString, "--out", outDir.toString))
    val mdocArgs =
      Seq("--classpath", classpath.mkString(":")) ++
        Seq("--scalac-options", scalacOptions().map("\"" + _ + "\"").mkString(" ")) ++
        inOutArgs ++ mdocExtraArguments()

    T.log.debug("Running mdoc with args: " + mdocArgs.mkString(" "))

    Jvm.runLocal("mdoc.Main", classpath, mdocArgs)

    PathRef(outDir)
  }

  def contributors = Task {
    // Even though we no longer host all these projects,
    // we still honor their contributions
    Seq(
      GitHubRepository("chipsalliance", "chisel"),
      GitHubRepository("chipsalliance", "chisel-template"),
      GitHubRepository("chipsalliance", "firrtl"),
      GitHubRepository("chipsalliance", "treadle"),
      GitHubRepository("ucb-bar", "chiseltest"),
      GitHubRepository("ucb-bar", "chisel2-deprecated"),
      GitHubRepository("freechipsproject", "chisel-bootcamp"),
      GitHubRepository("freechipsproject", "chisel-testers"),
      GitHubRepository("freechipsproject", "diagrammer"),
      GitHubRepository("freechipsproject", "firrtl-interpreter"),
      GitHubRepository("freechipsproject", "www.chisel-lang.org")
    )
      .flatMap(Contributors.contributors)
      .map(b => (b.login, b.html_url))
      .distinct
  }

  def contributorsMarkdown = Task {
    val output = websiteGenerated().path / "contributors.md"
    os.write.over(output, "<!-- Automatically generated by Mill 'docs.contributorsMarkdown' task -->\n")
    os.write.append(output, Contributors.contributorsMarkdown(contributors()))
    PathRef(output)
  }

  def scaladocLinks = Task {
    val output = websiteGenerated().path / "scaladoc_links.md"
    val snapshot = unipublish.publishVersion()
    val markdown = Releases.generateMarkdown(T.log)(snapshot)
    os.write.over(output, "<!-- Automatically generated by Mill 'docs.scaladocLinks' task -->\n")
    os.write.append(output, markdown)
    PathRef(output)
  }
}
