"use strict";(self.webpackChunkchisel_lang=self.webpackChunkchisel_lang||[]).push([[6991],{8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>s});var o=t(6540);const a={},c=o.createContext(a);function i(e){const n=o.useContext(c);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),o.createElement(c.Provider,{value:n},e.children)}},8648:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>i,default:()=>u,frontMatter:()=>c,metadata:()=>s,toc:()=>l});var o=t(4848),a=t(8453);const c={layout:"docs",title:"Functional Abstraction",section:"chisel3"},i="Functional Abstraction",s={id:"explanations/functional-abstraction",title:"Functional Abstraction",description:"We can define functions to factor out a repeated piece of logic that",source:"@site/docs/explanations/functional-abstraction.md",sourceDirName:"explanations",slug:"/explanations/functional-abstraction",permalink:"/docs/explanations/functional-abstraction",draft:!1,unlisted:!1,editUrl:"https://github.com/chipsalliance/chisel/tree/main/docs/src/explanations/functional-abstraction.md",tags:[],version:"current",frontMatter:{layout:"docs",title:"Functional Abstraction",section:"chisel3"},sidebar:"chiselSidebar",previous:{title:"Decoders",permalink:"/docs/explanations/decoder"},next:{title:"Functional Module Creation",permalink:"/docs/explanations/functional-module-creation"}},r={},l=[];function d(e){const n={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"functional-abstraction",children:"Functional Abstraction"})}),"\n",(0,o.jsx)(n.p,{children:"We can define functions to factor out a repeated piece of logic that\nwe later reuse multiple times in a design.  For example, we can wrap\nup our earlier example of a simple combinational logic block as\nfollows:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-scala",children:"def clb(a: UInt, b: UInt, c: UInt, d: UInt): UInt =\n  (a & b) | (~c & d)\n"})}),"\n",(0,o.jsxs)(n.p,{children:["where ",(0,o.jsx)(n.code,{children:"clb"})," is the function which takes ",(0,o.jsx)(n.code,{children:"a"}),", ",(0,o.jsx)(n.code,{children:"b"}),",\n",(0,o.jsx)(n.code,{children:"c"}),", ",(0,o.jsx)(n.code,{children:"d"})," as arguments and returns a wire to the output of a\nboolean circuit.  The ",(0,o.jsx)(n.code,{children:"def"})," keyword is part of Scala and\nintroduces a function definition, with each argument followed by a colon then\nits type, and the function return type given after the colon following the\nargument list.  The equals (",(0,o.jsx)(n.code,{children:"="}),") sign separates the function argument list\nfrom the function definition."]}),"\n",(0,o.jsx)(n.p,{children:"We can then use the block in another circuit as follows:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-scala",metastring:"mdoc:silent",children:"val out = clb(a,b,c,d)\n"})})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}}}]);