"use strict";(self.webpackChunkchisel_lang=self.webpackChunkchisel_lang||[]).push([[5583],{1989:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>r,default:()=>o,frontMatter:()=>s,metadata:()=>c,toc:()=>d});var i=t(4848),l=t(8453);const s={layout:"docs",title:"Printing",section:"chisel3"},r="Printing in Chisel",c={id:"explanations/printing",title:"Printing",description:"Chisel provides the printf function for debugging purposes. It comes in two flavors:",source:"@site/docs/explanations/printing.md",sourceDirName:"explanations",slug:"/explanations/printing",permalink:"/docs/explanations/printing",draft:!1,unlisted:!1,editUrl:"https://github.com/chipsalliance/chisel/tree/main/docs/src/explanations/printing.md",tags:[],version:"current",frontMatter:{layout:"docs",title:"Printing",section:"chisel3"},sidebar:"chiselSidebar",previous:{title:"Ports",permalink:"/docs/explanations/ports"},next:{title:"Properties",permalink:"/docs/explanations/properties"}},a={},d=[{value:"Scala-style",id:"scala-style",level:3},{value:"Simple formatting",id:"simple-formatting",level:4},{value:"Special values",id:"special-values",level:4},{value:"Aggregate data-types",id:"aggregate-data-types",level:4},{value:"Custom Printing",id:"custom-printing",level:4},{value:"C-Style",id:"c-style",level:3}];function h(e){const n={a:"a",code:"code",em:"em",h1:"h1",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,l.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"printing-in-chisel",children:"Printing in Chisel"})}),"\n",(0,i.jsxs)(n.p,{children:["Chisel provides the ",(0,i.jsx)(n.code,{children:"printf"})," function for debugging purposes. It comes in two flavors:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#scala-style",children:"Scala-style"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#c-style",children:"C-style"})}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"scala-style",children:"Scala-style"}),"\n",(0,i.jsxs)(n.p,{children:["Chisel also supports printf in a style similar to ",(0,i.jsx)(n.a,{href:"http://docs.scala-lang.org/overviews/core/string-interpolation.html",children:"Scala's String Interpolation"}),". Chisel provides a custom string interpolator ",(0,i.jsx)(n.code,{children:"cf"})," which follows C-style format specifiers (see section ",(0,i.jsx)(n.a,{href:"#c-style",children:"C-style"})," below)."]}),"\n",(0,i.jsx)(n.p,{children:"Note that the Scala s-interpolator is not supported in Chisel constructs and will throw an error:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:'class MyModule extends Module {\n  val in = IO(Input(UInt(8.W)))\n  printf(s"in = $in\\n")\n}\n// error: The s-interpolator prints the Scala .toString of Data objects rather than the value of the hardware wire during simulation. Use the cf-interpolator instead. If you want an elaboration time print, use println.\n//   printf(s"in = $in\\n")\n//   ^^^^^^^^^^^^^^^^^^^^^\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Instead, use Chisel's ",(0,i.jsx)(n.code,{children:"cf"})," interpolator as in the following examples:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:'val myUInt = 33.U\nprintf(cf"myUInt = $myUInt") // myUInt = 33\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Note that when concatenating ",(0,i.jsx)(n.code,{children:'cf"..."'})," strings, you need to start with a ",(0,i.jsx)(n.code,{children:'cf"..."'})," string:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:'// Does not interpolate the second string\nval myUInt = 33.U\nprintf("my normal string" + cf"myUInt = $myUInt")\n'})}),"\n",(0,i.jsx)(n.h4,{id:"simple-formatting",children:"Simple formatting"}),"\n",(0,i.jsx)(n.p,{children:"Other formats are available as follows:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:'val myUInt = 33.U\n// Hexadecimal\nprintf(cf"myUInt = 0x$myUInt%x") // myUInt = 0x21\n// Binary\nprintf(cf"myUInt = $myUInt%b") // myUInt = 100001\n// Character\nprintf(cf"myUInt = $myUInt%c") // myUInt = !\n'})}),"\n",(0,i.jsx)(n.h4,{id:"special-values",children:"Special values"}),"\n",(0,i.jsxs)(n.p,{children:["There are special values you can include in your ",(0,i.jsx)(n.code,{children:"cf"})," interpolated string:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"HierarchicalName"})," (",(0,i.jsx)(n.code,{children:"%m"}),"): The hierarchical name of the signal"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Percent"})," (",(0,i.jsx)(n.code,{children:"%%"}),"): A literal ",(0,i.jsx)(n.code,{children:"%"})]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:'printf(cf"hierarchical path = $HierarchicalName\\n") // hierarchical path = <verilog.module.path>\nprintf(cf"hierarchical path = %m\\n") // equivalent to the above\n\nprintf(cf"100$Percent\\n") // 100%\nprintf(cf"100%%\\n") // equivalent to the above\n'})}),"\n",(0,i.jsx)(n.h4,{id:"aggregate-data-types",children:"Aggregate data-types"}),"\n",(0,i.jsx)(n.p,{children:'Chisel provides default custom "pretty-printing" for Vecs and Bundles. The default printing of a Vec is similar to printing a Seq or List in Scala while printing a Bundle is similar to printing a Scala Map.'}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:'val myVec = VecInit(5.U, 10.U, 13.U)\nprintf(cf"myVec = $myVec") // myVec = Vec(5, 10, 13)\n\nval myBundle = Wire(new Bundle {\n  val foo = UInt()\n  val bar = UInt()\n})\nmyBundle.foo := 3.U\nmyBundle.bar := 11.U\nprintf(cf"myBundle = $myBundle") // myBundle = Bundle(a -> 3, b -> 11)\n'})}),"\n",(0,i.jsx)(n.h4,{id:"custom-printing",children:"Custom Printing"}),"\n",(0,i.jsxs)(n.p,{children:["Chisel also provides the ability to specify ",(0,i.jsx)(n.em,{children:"custom"})," printing for user-defined Bundles."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:'class Message extends Bundle {\n  val valid = Bool()\n  val addr = UInt(32.W)\n  val length = UInt(4.W)\n  val data = UInt(64.W)\n  override def toPrintable: Printable = {\n    val char = Mux(valid, \'v\'.U, \'-\'.U)\n    cf"Message:\\n" +\n    cf"  valid  : $char%c\\n" +\n    cf"  addr   : $addr%x\\n" +\n    cf"  length : $length\\n" +\n    cf"  data   : $data%x\\n"\n  }\n}\n\nval myMessage = Wire(new Message)\nmyMessage.valid := true.B\nmyMessage.addr := "h1234".U\nmyMessage.length := 10.U\nmyMessage.data := "hdeadbeef".U\n\nprintf(cf"$myMessage")\n'})}),"\n",(0,i.jsx)(n.p,{children:"Which prints the following:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Message:\n  valid  : v\n  addr   : 0x00001234\n  length : 10\n  data   : 0x00000000deadbeef\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Notice the use of ",(0,i.jsx)(n.code,{children:"+"})," between ",(0,i.jsx)(n.code,{children:"cf"}),' interpolated "strings". The results of ',(0,i.jsx)(n.code,{children:"cf"})," interpolation can be concatenated by using the ",(0,i.jsx)(n.code,{children:"+"})," operator."]}),"\n",(0,i.jsx)(n.h3,{id:"c-style",children:"C-Style"}),"\n",(0,i.jsxs)(n.p,{children:["Chisel provides ",(0,i.jsx)(n.code,{children:"printf"})," in a similar style to its C namesake. It accepts a double-quoted format string and a variable number of arguments which will then be printed on rising clock edges. Chisel supports the following format specifiers:"]}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{style:{textAlign:"center"},children:"Format Specifier"}),(0,i.jsx)(n.th,{style:{textAlign:"center"},children:"Meaning"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"center"},children:(0,i.jsx)(n.code,{children:"%d"})}),(0,i.jsx)(n.td,{style:{textAlign:"center"},children:"decimal number"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"center"},children:(0,i.jsx)(n.code,{children:"%x"})}),(0,i.jsx)(n.td,{style:{textAlign:"center"},children:"hexadecimal number"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"center"},children:(0,i.jsx)(n.code,{children:"%b"})}),(0,i.jsx)(n.td,{style:{textAlign:"center"},children:"binary number"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"center"},children:(0,i.jsx)(n.code,{children:"%c"})}),(0,i.jsx)(n.td,{style:{textAlign:"center"},children:"8-bit ASCII character"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"center"},children:(0,i.jsx)(n.code,{children:"%%"})}),(0,i.jsx)(n.td,{style:{textAlign:"center"},children:"literal percent"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"center"},children:(0,i.jsx)(n.code,{children:"%m"})}),(0,i.jsx)(n.td,{style:{textAlign:"center"},children:"hierarchical name"})]})]})]}),"\n",(0,i.jsx)(n.p,{children:"It also supports a small set of escape characters:"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{style:{textAlign:"center"},children:"Escape Character"}),(0,i.jsx)(n.th,{style:{textAlign:"center"},children:"Meaning"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"center"},children:(0,i.jsx)(n.code,{children:"\\n"})}),(0,i.jsx)(n.td,{style:{textAlign:"center"},children:"newline"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"center"},children:(0,i.jsx)(n.code,{children:"\\t"})}),(0,i.jsx)(n.td,{style:{textAlign:"center"},children:"tab"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"center"},children:(0,i.jsx)(n.code,{children:'\\"'})}),(0,i.jsx)(n.td,{style:{textAlign:"center"},children:"literal double quote"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"center"},children:(0,i.jsx)(n.code,{children:"\\'"})}),(0,i.jsx)(n.td,{style:{textAlign:"center"},children:"literal single quote"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"center"},children:(0,i.jsx)(n.code,{children:"\\\\"})}),(0,i.jsx)(n.td,{style:{textAlign:"center"},children:"literal backslash"})]})]})]}),"\n",(0,i.jsx)(n.p,{children:"Note that single quotes do not require escaping, but are legal to escape."}),"\n",(0,i.jsx)(n.p,{children:"Thus printf can be used in a way very similar to how it is used in C:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:'val myUInt = 32.U\nprintf("myUInt = %d", myUInt) // myUInt = 32\n'})})]})}function o(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>c});var i=t(6540);const l={},s=i.createContext(l);function r(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:r(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);