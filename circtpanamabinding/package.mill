package build.circtpanamabinding

import mill._
import mill.api.BuildCtx.withFilesystemCheckerDisabled
import mill.scalalib._
import mill.scalalib.scalafmt._

import build._

object `package` extends Module with CIRCTPanamaBinding

// Java Codegen for all declared functions.
// All of these functions are not private API which is subject to change.
trait CIRCTPanamaBinding extends HasJextractGeneratedSources with ChiselPublishModule {
  override def javadocOptions = Task(super.javadocOptions() ++ Seq("--enable-preview", "--release", "21"))

  object utils extends Module {
    val architecture = System.getProperty("os.arch")
    val operationSystem = System.getProperty("os.name")

    val mac = operationSystem.toLowerCase.startsWith("mac")
    val linux = operationSystem.toLowerCase.startsWith("linux")
    val windows = operationSystem.toLowerCase.startsWith("win")
    val amd64 = architecture.matches("^(x8664|amd64|ia32e|em64t|x64|x86_64)$")
    val aarch64 = architecture.equals("aarch64") | architecture.startsWith("armv8")

    def circt(version: String, os: String, platform: String) =
      s"https://github.com/llvm/circt/releases/download/firtool-${version}/circt-full-shared-${os}-${platform}.tar.gz"

    // 21, 1-2, {linux-x64, macos-x64, windows-x64}
    // 22, 1-2, {linux-x64, macos-aarch64, macos-x64, windows-x64}
    def jextract(jdkVersion: Int, jextractVersion: String, os: String, platform: String) =
      s"https://download.java.net/java/early_access/jextract/21/1/openjdk-${jdkVersion}-jextract+${jextractVersion}_${os}-${platform}_bin.tar.gz"

    // Copy-pasted from Mill 0.12.14 and updated to Mill 1.0.0 (MIT License)
    def download(url: String, dest: os.RelPath)(implicit ctx: mill.api.TaskCtx.Dest): PathRef = {
      val out = ctx.dest / dest
      val website = new java.net.URI(url).toURL
      val websiteInputStream = website.openStream
      try {
        java.nio.file.Files.copy(websiteInputStream, out.toNIO)
        PathRef(out)
      } finally {
        websiteInputStream.close()
      }
    }

    // use Task(persistent = true) to avoid download repeatedly
    def circtInstallDir: T[os.Path] = Task(persistent = true) {
      Task.ctx().env.get("CIRCT_INSTALL_PATH") match {
        case Some(dir) => os.Path(dir)
        case None =>
          Task.ctx().log.info("Use CIRCT_INSTALL_PATH to vendor circt")
          val tarPath = Task.dest / "circt.tar.gz"
          if (!os.exists(tarPath)) {
            val url = circt(
              v.firtoolVersion,
              if (linux) "linux" else if (mac) "macos" else throw new Exception("unsupported os"),
              // circt does not yet publish for macos-aarch64, use x64 for now
              if (amd64 || mac) "x64" else throw new Exception("unsupported arch")
            )
            Task.ctx().log.info(s"Downloading circt from ${url}")
            download(url, os.rel / "circt.tar.gz")
            Task.ctx().log.info(s"Download Successfully")
          }
          os.proc("tar", "xvf", tarPath, "--strip-components=1").call(Task.dest)
          Task.dest
      }
    }

    // use Task(persistent = true) to avoid download repeatedly
    def jextractInstallDir: T[os.Path] = Task(persistent = true) {
      Task.ctx().env.get("JEXTRACT_INSTALL_PATH") match {
        case Some(dir) => os.Path(dir)
        case None =>
          Task.ctx().log.info("Use JEXTRACT_INSTALL_PATH to vendor jextract")
          val tarPath = Task.dest / "jextract.tar.gz"
          if (!os.exists(tarPath)) {
            val url = jextract(
              21,
              "1-2",
              if (linux) "linux" else if (mac) "macos" else throw new Exception("unsupported os"),
              // There is no macos-aarch64 for jextract 21, use x64 for now
              if (amd64 || mac) "x64" else if (aarch64) "aarch64" else throw new Exception("unsupported arch")
            )
            Task.ctx().log.info(s"Downloading jextract from ${url}")
            download(url, os.rel / "jextract.tar.gz")
            Task.ctx().log.info(s"Download Successfully")
          }
          os.proc("tar", "xvf", tarPath, "--strip-components=1").call(Task.dest)
          Task.dest
      }
    }
  }

  def includeConstants =
    Task.Input(os.read.lines(moduleDir / "includeConstants.txt").filter(s => s.nonEmpty && !s.startsWith("#")))
  def includeFunctions =
    Task.Input(os.read.lines(moduleDir / "includeFunctions.txt").filter(s => s.nonEmpty && !s.startsWith("#")))
  def includeStructs =
    Task.Input(os.read.lines(moduleDir / "includeStructs.txt").filter(s => s.nonEmpty && !s.startsWith("#")))
  def includeTypedefs =
    Task.Input(os.read.lines(moduleDir / "includeTypedefs.txt").filter(s => s.nonEmpty && !s.startsWith("#")))
  def includeUnions =
    Task.Input(os.read.lines(moduleDir / "includeUnions.txt").filter(s => s.nonEmpty && !s.startsWith("#")))
  def includeVars =
    Task.Input(os.read.lines(moduleDir / "includeVars.txt").filter(s => s.nonEmpty && !s.startsWith("#")))
  def linkLibraries =
    Task.Input(os.read.lines(moduleDir / "linkLibraries.txt").filter(s => s.nonEmpty && !s.startsWith("#")))

  def target = Task("org.llvm.circt")
  def headerClassName = Task("CAPI")
  def header = Task.Source(moduleDir / "jextract-headers.h")
  def circtInstallPath = Task(utils.circtInstallDir())
  def jextractBinary = Task(utils.jextractInstallDir() / "bin" / "jextract")
  def includePaths = Task(withFilesystemCheckerDisabled(Seq(PathRef(circtInstallPath() / "include"))))
  def libraryPaths = Task(Seq(PathRef(circtInstallPath() / "lib")))
}
