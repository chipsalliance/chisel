// SPDX-License-Identifier: Apache-2.0

//////////////////////////////////////////////////////////////////
// THIS FILE WAS GENERATED BY RUNNING `sbt generateBoilerplate` //
//                                                              //
// Please edit project/Boilerplate.scala and rerun the sbt task //
// to make changes to this file.                                //
//////////////////////////////////////////////////////////////////

package chisel3.properties

import chisel3.internal.{firrtl => ir}
import chisel3.experimental.SourceInfo
import firrtl.{ir => fir}

private[chisel3] class Tuple1PropertyType[_1, PT1 <: PropertyType[_1]](
  val tpe1: PT1)
    extends PropertyType[Tuple1[_1]] {
  type Tuple = Tuple1[_1]
  type Type = Tuple1[tpe1.Type]
  type Underlying = Tuple1[tpe1.Underlying]

  override def getPropertyType(value: Option[Tuple]): fir.PropertyType =
    fir.TuplePropertyType(
      Seq(
        tpe1.getPropertyType(None)
      )
    )

  override def convert(value: Underlying, ctx: ir.Component, info: SourceInfo): fir.Expression =
    fir.TuplePropertyValue(
      Seq(
        tpe1.getPropertyType(None) -> tpe1.convert(value._1, ctx, info)
      )
    )

  override def convertUnderlying(value: Tuple): Underlying =
    Tuple1(
      tpe1.convertUnderlying(value._1)
    )
}

private[chisel3] class Tuple2PropertyType[_1, PT1 <: PropertyType[_1], _2, PT2 <: PropertyType[_2]](
  val tpe1: PT1,
  val tpe2: PT2)
    extends PropertyType[Tuple2[_1, _2]] {
  type Tuple = Tuple2[_1, _2]
  type Type = Tuple2[tpe1.Type, tpe2.Type]
  type Underlying = Tuple2[tpe1.Underlying, tpe2.Underlying]

  override def getPropertyType(value: Option[Tuple]): fir.PropertyType =
    fir.TuplePropertyType(
      Seq(
        tpe1.getPropertyType(None),
        tpe2.getPropertyType(None)
      )
    )

  override def convert(value: Underlying, ctx: ir.Component, info: SourceInfo): fir.Expression =
    fir.TuplePropertyValue(
      Seq(
        tpe1.getPropertyType(None) -> tpe1.convert(value._1, ctx, info),
        tpe2.getPropertyType(None) -> tpe2.convert(value._2, ctx, info)
      )
    )

  override def convertUnderlying(value: Tuple): Underlying =
    Tuple2(
      tpe1.convertUnderlying(value._1),
      tpe2.convertUnderlying(value._2)
    )
}

private[chisel3] class Tuple3PropertyType[
  _1,
  PT1 <: PropertyType[_1],
  _2,
  PT2 <: PropertyType[_2],
  _3,
  PT3 <: PropertyType[_3]
](val tpe1: PT1,
  val tpe2: PT2,
  val tpe3: PT3)
    extends PropertyType[Tuple3[_1, _2, _3]] {
  type Tuple = Tuple3[_1, _2, _3]
  type Type = Tuple3[tpe1.Type, tpe2.Type, tpe3.Type]
  type Underlying = Tuple3[tpe1.Underlying, tpe2.Underlying, tpe3.Underlying]

  override def getPropertyType(value: Option[Tuple]): fir.PropertyType =
    fir.TuplePropertyType(
      Seq(
        tpe1.getPropertyType(None),
        tpe2.getPropertyType(None),
        tpe3.getPropertyType(None)
      )
    )

  override def convert(value: Underlying, ctx: ir.Component, info: SourceInfo): fir.Expression =
    fir.TuplePropertyValue(
      Seq(
        tpe1.getPropertyType(None) -> tpe1.convert(value._1, ctx, info),
        tpe2.getPropertyType(None) -> tpe2.convert(value._2, ctx, info),
        tpe3.getPropertyType(None) -> tpe3.convert(value._3, ctx, info)
      )
    )

  override def convertUnderlying(value: Tuple): Underlying =
    Tuple3(
      tpe1.convertUnderlying(value._1),
      tpe2.convertUnderlying(value._2),
      tpe3.convertUnderlying(value._3)
    )
}

private[chisel3] class Tuple4PropertyType[
  _1,
  PT1 <: PropertyType[_1],
  _2,
  PT2 <: PropertyType[_2],
  _3,
  PT3 <: PropertyType[_3],
  _4,
  PT4 <: PropertyType[_4]
](val tpe1: PT1,
  val tpe2: PT2,
  val tpe3: PT3,
  val tpe4: PT4)
    extends PropertyType[Tuple4[_1, _2, _3, _4]] {
  type Tuple = Tuple4[_1, _2, _3, _4]
  type Type = Tuple4[tpe1.Type, tpe2.Type, tpe3.Type, tpe4.Type]
  type Underlying = Tuple4[tpe1.Underlying, tpe2.Underlying, tpe3.Underlying, tpe4.Underlying]

  override def getPropertyType(value: Option[Tuple]): fir.PropertyType =
    fir.TuplePropertyType(
      Seq(
        tpe1.getPropertyType(None),
        tpe2.getPropertyType(None),
        tpe3.getPropertyType(None),
        tpe4.getPropertyType(None)
      )
    )

  override def convert(value: Underlying, ctx: ir.Component, info: SourceInfo): fir.Expression =
    fir.TuplePropertyValue(
      Seq(
        tpe1.getPropertyType(None) -> tpe1.convert(value._1, ctx, info),
        tpe2.getPropertyType(None) -> tpe2.convert(value._2, ctx, info),
        tpe3.getPropertyType(None) -> tpe3.convert(value._3, ctx, info),
        tpe4.getPropertyType(None) -> tpe4.convert(value._4, ctx, info)
      )
    )

  override def convertUnderlying(value: Tuple): Underlying =
    Tuple4(
      tpe1.convertUnderlying(value._1),
      tpe2.convertUnderlying(value._2),
      tpe3.convertUnderlying(value._3),
      tpe4.convertUnderlying(value._4)
    )
}

private[chisel3] class Tuple5PropertyType[
  _1,
  PT1 <: PropertyType[_1],
  _2,
  PT2 <: PropertyType[_2],
  _3,
  PT3 <: PropertyType[_3],
  _4,
  PT4 <: PropertyType[_4],
  _5,
  PT5 <: PropertyType[_5]
](val tpe1: PT1,
  val tpe2: PT2,
  val tpe3: PT3,
  val tpe4: PT4,
  val tpe5: PT5)
    extends PropertyType[Tuple5[_1, _2, _3, _4, _5]] {
  type Tuple = Tuple5[_1, _2, _3, _4, _5]
  type Type = Tuple5[tpe1.Type, tpe2.Type, tpe3.Type, tpe4.Type, tpe5.Type]
  type Underlying = Tuple5[tpe1.Underlying, tpe2.Underlying, tpe3.Underlying, tpe4.Underlying, tpe5.Underlying]

  override def getPropertyType(value: Option[Tuple]): fir.PropertyType =
    fir.TuplePropertyType(
      Seq(
        tpe1.getPropertyType(None),
        tpe2.getPropertyType(None),
        tpe3.getPropertyType(None),
        tpe4.getPropertyType(None),
        tpe5.getPropertyType(None)
      )
    )

  override def convert(value: Underlying, ctx: ir.Component, info: SourceInfo): fir.Expression =
    fir.TuplePropertyValue(
      Seq(
        tpe1.getPropertyType(None) -> tpe1.convert(value._1, ctx, info),
        tpe2.getPropertyType(None) -> tpe2.convert(value._2, ctx, info),
        tpe3.getPropertyType(None) -> tpe3.convert(value._3, ctx, info),
        tpe4.getPropertyType(None) -> tpe4.convert(value._4, ctx, info),
        tpe5.getPropertyType(None) -> tpe5.convert(value._5, ctx, info)
      )
    )

  override def convertUnderlying(value: Tuple): Underlying =
    Tuple5(
      tpe1.convertUnderlying(value._1),
      tpe2.convertUnderlying(value._2),
      tpe3.convertUnderlying(value._3),
      tpe4.convertUnderlying(value._4),
      tpe5.convertUnderlying(value._5)
    )
}

private[chisel3] class Tuple6PropertyType[
  _1,
  PT1 <: PropertyType[_1],
  _2,
  PT2 <: PropertyType[_2],
  _3,
  PT3 <: PropertyType[_3],
  _4,
  PT4 <: PropertyType[_4],
  _5,
  PT5 <: PropertyType[_5],
  _6,
  PT6 <: PropertyType[_6]
](val tpe1: PT1,
  val tpe2: PT2,
  val tpe3: PT3,
  val tpe4: PT4,
  val tpe5: PT5,
  val tpe6: PT6)
    extends PropertyType[Tuple6[_1, _2, _3, _4, _5, _6]] {
  type Tuple = Tuple6[_1, _2, _3, _4, _5, _6]
  type Type = Tuple6[tpe1.Type, tpe2.Type, tpe3.Type, tpe4.Type, tpe5.Type, tpe6.Type]
  type Underlying =
    Tuple6[tpe1.Underlying, tpe2.Underlying, tpe3.Underlying, tpe4.Underlying, tpe5.Underlying, tpe6.Underlying]

  override def getPropertyType(value: Option[Tuple]): fir.PropertyType =
    fir.TuplePropertyType(
      Seq(
        tpe1.getPropertyType(None),
        tpe2.getPropertyType(None),
        tpe3.getPropertyType(None),
        tpe4.getPropertyType(None),
        tpe5.getPropertyType(None),
        tpe6.getPropertyType(None)
      )
    )

  override def convert(value: Underlying, ctx: ir.Component, info: SourceInfo): fir.Expression =
    fir.TuplePropertyValue(
      Seq(
        tpe1.getPropertyType(None) -> tpe1.convert(value._1, ctx, info),
        tpe2.getPropertyType(None) -> tpe2.convert(value._2, ctx, info),
        tpe3.getPropertyType(None) -> tpe3.convert(value._3, ctx, info),
        tpe4.getPropertyType(None) -> tpe4.convert(value._4, ctx, info),
        tpe5.getPropertyType(None) -> tpe5.convert(value._5, ctx, info),
        tpe6.getPropertyType(None) -> tpe6.convert(value._6, ctx, info)
      )
    )

  override def convertUnderlying(value: Tuple): Underlying =
    Tuple6(
      tpe1.convertUnderlying(value._1),
      tpe2.convertUnderlying(value._2),
      tpe3.convertUnderlying(value._3),
      tpe4.convertUnderlying(value._4),
      tpe5.convertUnderlying(value._5),
      tpe6.convertUnderlying(value._6)
    )
}

private[chisel3] class Tuple7PropertyType[
  _1,
  PT1 <: PropertyType[_1],
  _2,
  PT2 <: PropertyType[_2],
  _3,
  PT3 <: PropertyType[_3],
  _4,
  PT4 <: PropertyType[_4],
  _5,
  PT5 <: PropertyType[_5],
  _6,
  PT6 <: PropertyType[_6],
  _7,
  PT7 <: PropertyType[_7]
](val tpe1: PT1,
  val tpe2: PT2,
  val tpe3: PT3,
  val tpe4: PT4,
  val tpe5: PT5,
  val tpe6: PT6,
  val tpe7: PT7)
    extends PropertyType[Tuple7[_1, _2, _3, _4, _5, _6, _7]] {
  type Tuple = Tuple7[_1, _2, _3, _4, _5, _6, _7]
  type Type = Tuple7[tpe1.Type, tpe2.Type, tpe3.Type, tpe4.Type, tpe5.Type, tpe6.Type, tpe7.Type]
  type Underlying = Tuple7[
    tpe1.Underlying,
    tpe2.Underlying,
    tpe3.Underlying,
    tpe4.Underlying,
    tpe5.Underlying,
    tpe6.Underlying,
    tpe7.Underlying
  ]

  override def getPropertyType(value: Option[Tuple]): fir.PropertyType =
    fir.TuplePropertyType(
      Seq(
        tpe1.getPropertyType(None),
        tpe2.getPropertyType(None),
        tpe3.getPropertyType(None),
        tpe4.getPropertyType(None),
        tpe5.getPropertyType(None),
        tpe6.getPropertyType(None),
        tpe7.getPropertyType(None)
      )
    )

  override def convert(value: Underlying, ctx: ir.Component, info: SourceInfo): fir.Expression =
    fir.TuplePropertyValue(
      Seq(
        tpe1.getPropertyType(None) -> tpe1.convert(value._1, ctx, info),
        tpe2.getPropertyType(None) -> tpe2.convert(value._2, ctx, info),
        tpe3.getPropertyType(None) -> tpe3.convert(value._3, ctx, info),
        tpe4.getPropertyType(None) -> tpe4.convert(value._4, ctx, info),
        tpe5.getPropertyType(None) -> tpe5.convert(value._5, ctx, info),
        tpe6.getPropertyType(None) -> tpe6.convert(value._6, ctx, info),
        tpe7.getPropertyType(None) -> tpe7.convert(value._7, ctx, info)
      )
    )

  override def convertUnderlying(value: Tuple): Underlying =
    Tuple7(
      tpe1.convertUnderlying(value._1),
      tpe2.convertUnderlying(value._2),
      tpe3.convertUnderlying(value._3),
      tpe4.convertUnderlying(value._4),
      tpe5.convertUnderlying(value._5),
      tpe6.convertUnderlying(value._6),
      tpe7.convertUnderlying(value._7)
    )
}

private[chisel3] class Tuple8PropertyType[
  _1,
  PT1 <: PropertyType[_1],
  _2,
  PT2 <: PropertyType[_2],
  _3,
  PT3 <: PropertyType[_3],
  _4,
  PT4 <: PropertyType[_4],
  _5,
  PT5 <: PropertyType[_5],
  _6,
  PT6 <: PropertyType[_6],
  _7,
  PT7 <: PropertyType[_7],
  _8,
  PT8 <: PropertyType[_8]
](val tpe1: PT1,
  val tpe2: PT2,
  val tpe3: PT3,
  val tpe4: PT4,
  val tpe5: PT5,
  val tpe6: PT6,
  val tpe7: PT7,
  val tpe8: PT8)
    extends PropertyType[Tuple8[_1, _2, _3, _4, _5, _6, _7, _8]] {
  type Tuple = Tuple8[_1, _2, _3, _4, _5, _6, _7, _8]
  type Type = Tuple8[tpe1.Type, tpe2.Type, tpe3.Type, tpe4.Type, tpe5.Type, tpe6.Type, tpe7.Type, tpe8.Type]
  type Underlying = Tuple8[
    tpe1.Underlying,
    tpe2.Underlying,
    tpe3.Underlying,
    tpe4.Underlying,
    tpe5.Underlying,
    tpe6.Underlying,
    tpe7.Underlying,
    tpe8.Underlying
  ]

  override def getPropertyType(value: Option[Tuple]): fir.PropertyType =
    fir.TuplePropertyType(
      Seq(
        tpe1.getPropertyType(None),
        tpe2.getPropertyType(None),
        tpe3.getPropertyType(None),
        tpe4.getPropertyType(None),
        tpe5.getPropertyType(None),
        tpe6.getPropertyType(None),
        tpe7.getPropertyType(None),
        tpe8.getPropertyType(None)
      )
    )

  override def convert(value: Underlying, ctx: ir.Component, info: SourceInfo): fir.Expression =
    fir.TuplePropertyValue(
      Seq(
        tpe1.getPropertyType(None) -> tpe1.convert(value._1, ctx, info),
        tpe2.getPropertyType(None) -> tpe2.convert(value._2, ctx, info),
        tpe3.getPropertyType(None) -> tpe3.convert(value._3, ctx, info),
        tpe4.getPropertyType(None) -> tpe4.convert(value._4, ctx, info),
        tpe5.getPropertyType(None) -> tpe5.convert(value._5, ctx, info),
        tpe6.getPropertyType(None) -> tpe6.convert(value._6, ctx, info),
        tpe7.getPropertyType(None) -> tpe7.convert(value._7, ctx, info),
        tpe8.getPropertyType(None) -> tpe8.convert(value._8, ctx, info)
      )
    )

  override def convertUnderlying(value: Tuple): Underlying =
    Tuple8(
      tpe1.convertUnderlying(value._1),
      tpe2.convertUnderlying(value._2),
      tpe3.convertUnderlying(value._3),
      tpe4.convertUnderlying(value._4),
      tpe5.convertUnderlying(value._5),
      tpe6.convertUnderlying(value._6),
      tpe7.convertUnderlying(value._7),
      tpe8.convertUnderlying(value._8)
    )
}

private[chisel3] class Tuple9PropertyType[
  _1,
  PT1 <: PropertyType[_1],
  _2,
  PT2 <: PropertyType[_2],
  _3,
  PT3 <: PropertyType[_3],
  _4,
  PT4 <: PropertyType[_4],
  _5,
  PT5 <: PropertyType[_5],
  _6,
  PT6 <: PropertyType[_6],
  _7,
  PT7 <: PropertyType[_7],
  _8,
  PT8 <: PropertyType[_8],
  _9,
  PT9 <: PropertyType[_9]
](val tpe1: PT1,
  val tpe2: PT2,
  val tpe3: PT3,
  val tpe4: PT4,
  val tpe5: PT5,
  val tpe6: PT6,
  val tpe7: PT7,
  val tpe8: PT8,
  val tpe9: PT9)
    extends PropertyType[Tuple9[_1, _2, _3, _4, _5, _6, _7, _8, _9]] {
  type Tuple = Tuple9[_1, _2, _3, _4, _5, _6, _7, _8, _9]
  type Type = Tuple9[tpe1.Type, tpe2.Type, tpe3.Type, tpe4.Type, tpe5.Type, tpe6.Type, tpe7.Type, tpe8.Type, tpe9.Type]
  type Underlying = Tuple9[
    tpe1.Underlying,
    tpe2.Underlying,
    tpe3.Underlying,
    tpe4.Underlying,
    tpe5.Underlying,
    tpe6.Underlying,
    tpe7.Underlying,
    tpe8.Underlying,
    tpe9.Underlying
  ]

  override def getPropertyType(value: Option[Tuple]): fir.PropertyType =
    fir.TuplePropertyType(
      Seq(
        tpe1.getPropertyType(None),
        tpe2.getPropertyType(None),
        tpe3.getPropertyType(None),
        tpe4.getPropertyType(None),
        tpe5.getPropertyType(None),
        tpe6.getPropertyType(None),
        tpe7.getPropertyType(None),
        tpe8.getPropertyType(None),
        tpe9.getPropertyType(None)
      )
    )

  override def convert(value: Underlying, ctx: ir.Component, info: SourceInfo): fir.Expression =
    fir.TuplePropertyValue(
      Seq(
        tpe1.getPropertyType(None) -> tpe1.convert(value._1, ctx, info),
        tpe2.getPropertyType(None) -> tpe2.convert(value._2, ctx, info),
        tpe3.getPropertyType(None) -> tpe3.convert(value._3, ctx, info),
        tpe4.getPropertyType(None) -> tpe4.convert(value._4, ctx, info),
        tpe5.getPropertyType(None) -> tpe5.convert(value._5, ctx, info),
        tpe6.getPropertyType(None) -> tpe6.convert(value._6, ctx, info),
        tpe7.getPropertyType(None) -> tpe7.convert(value._7, ctx, info),
        tpe8.getPropertyType(None) -> tpe8.convert(value._8, ctx, info),
        tpe9.getPropertyType(None) -> tpe9.convert(value._9, ctx, info)
      )
    )

  override def convertUnderlying(value: Tuple): Underlying =
    Tuple9(
      tpe1.convertUnderlying(value._1),
      tpe2.convertUnderlying(value._2),
      tpe3.convertUnderlying(value._3),
      tpe4.convertUnderlying(value._4),
      tpe5.convertUnderlying(value._5),
      tpe6.convertUnderlying(value._6),
      tpe7.convertUnderlying(value._7),
      tpe8.convertUnderlying(value._8),
      tpe9.convertUnderlying(value._9)
    )
}

private[chisel3] class Tuple10PropertyType[
  _1,
  PT1 <: PropertyType[_1],
  _2,
  PT2 <: PropertyType[_2],
  _3,
  PT3 <: PropertyType[_3],
  _4,
  PT4 <: PropertyType[_4],
  _5,
  PT5 <: PropertyType[_5],
  _6,
  PT6 <: PropertyType[_6],
  _7,
  PT7 <: PropertyType[_7],
  _8,
  PT8 <: PropertyType[_8],
  _9,
  PT9 <: PropertyType[_9],
  _10,
  PT10 <: PropertyType[_10]
](val tpe1:  PT1,
  val tpe2:  PT2,
  val tpe3:  PT3,
  val tpe4:  PT4,
  val tpe5:  PT5,
  val tpe6:  PT6,
  val tpe7:  PT7,
  val tpe8:  PT8,
  val tpe9:  PT9,
  val tpe10: PT10)
    extends PropertyType[Tuple10[_1, _2, _3, _4, _5, _6, _7, _8, _9, _10]] {
  type Tuple = Tuple10[_1, _2, _3, _4, _5, _6, _7, _8, _9, _10]
  type Type = Tuple10[
    tpe1.Type,
    tpe2.Type,
    tpe3.Type,
    tpe4.Type,
    tpe5.Type,
    tpe6.Type,
    tpe7.Type,
    tpe8.Type,
    tpe9.Type,
    tpe10.Type
  ]
  type Underlying = Tuple10[
    tpe1.Underlying,
    tpe2.Underlying,
    tpe3.Underlying,
    tpe4.Underlying,
    tpe5.Underlying,
    tpe6.Underlying,
    tpe7.Underlying,
    tpe8.Underlying,
    tpe9.Underlying,
    tpe10.Underlying
  ]

  override def getPropertyType(value: Option[Tuple]): fir.PropertyType =
    fir.TuplePropertyType(
      Seq(
        tpe1.getPropertyType(None),
        tpe2.getPropertyType(None),
        tpe3.getPropertyType(None),
        tpe4.getPropertyType(None),
        tpe5.getPropertyType(None),
        tpe6.getPropertyType(None),
        tpe7.getPropertyType(None),
        tpe8.getPropertyType(None),
        tpe9.getPropertyType(None),
        tpe10.getPropertyType(None)
      )
    )

  override def convert(value: Underlying, ctx: ir.Component, info: SourceInfo): fir.Expression =
    fir.TuplePropertyValue(
      Seq(
        tpe1.getPropertyType(None) -> tpe1.convert(value._1, ctx, info),
        tpe2.getPropertyType(None) -> tpe2.convert(value._2, ctx, info),
        tpe3.getPropertyType(None) -> tpe3.convert(value._3, ctx, info),
        tpe4.getPropertyType(None) -> tpe4.convert(value._4, ctx, info),
        tpe5.getPropertyType(None) -> tpe5.convert(value._5, ctx, info),
        tpe6.getPropertyType(None) -> tpe6.convert(value._6, ctx, info),
        tpe7.getPropertyType(None) -> tpe7.convert(value._7, ctx, info),
        tpe8.getPropertyType(None) -> tpe8.convert(value._8, ctx, info),
        tpe9.getPropertyType(None) -> tpe9.convert(value._9, ctx, info),
        tpe10.getPropertyType(None) -> tpe10.convert(value._10, ctx, info)
      )
    )

  override def convertUnderlying(value: Tuple): Underlying =
    Tuple10(
      tpe1.convertUnderlying(value._1),
      tpe2.convertUnderlying(value._2),
      tpe3.convertUnderlying(value._3),
      tpe4.convertUnderlying(value._4),
      tpe5.convertUnderlying(value._5),
      tpe6.convertUnderlying(value._6),
      tpe7.convertUnderlying(value._7),
      tpe8.convertUnderlying(value._8),
      tpe9.convertUnderlying(value._9),
      tpe10.convertUnderlying(value._10)
    )
}

private[chisel3] class Tuple11PropertyType[
  _1,
  PT1 <: PropertyType[_1],
  _2,
  PT2 <: PropertyType[_2],
  _3,
  PT3 <: PropertyType[_3],
  _4,
  PT4 <: PropertyType[_4],
  _5,
  PT5 <: PropertyType[_5],
  _6,
  PT6 <: PropertyType[_6],
  _7,
  PT7 <: PropertyType[_7],
  _8,
  PT8 <: PropertyType[_8],
  _9,
  PT9 <: PropertyType[_9],
  _10,
  PT10 <: PropertyType[_10],
  _11,
  PT11 <: PropertyType[_11]
](val tpe1:  PT1,
  val tpe2:  PT2,
  val tpe3:  PT3,
  val tpe4:  PT4,
  val tpe5:  PT5,
  val tpe6:  PT6,
  val tpe7:  PT7,
  val tpe8:  PT8,
  val tpe9:  PT9,
  val tpe10: PT10,
  val tpe11: PT11)
    extends PropertyType[Tuple11[_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11]] {
  type Tuple = Tuple11[_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11]
  type Type = Tuple11[
    tpe1.Type,
    tpe2.Type,
    tpe3.Type,
    tpe4.Type,
    tpe5.Type,
    tpe6.Type,
    tpe7.Type,
    tpe8.Type,
    tpe9.Type,
    tpe10.Type,
    tpe11.Type
  ]
  type Underlying = Tuple11[
    tpe1.Underlying,
    tpe2.Underlying,
    tpe3.Underlying,
    tpe4.Underlying,
    tpe5.Underlying,
    tpe6.Underlying,
    tpe7.Underlying,
    tpe8.Underlying,
    tpe9.Underlying,
    tpe10.Underlying,
    tpe11.Underlying
  ]

  override def getPropertyType(value: Option[Tuple]): fir.PropertyType =
    fir.TuplePropertyType(
      Seq(
        tpe1.getPropertyType(None),
        tpe2.getPropertyType(None),
        tpe3.getPropertyType(None),
        tpe4.getPropertyType(None),
        tpe5.getPropertyType(None),
        tpe6.getPropertyType(None),
        tpe7.getPropertyType(None),
        tpe8.getPropertyType(None),
        tpe9.getPropertyType(None),
        tpe10.getPropertyType(None),
        tpe11.getPropertyType(None)
      )
    )

  override def convert(value: Underlying, ctx: ir.Component, info: SourceInfo): fir.Expression =
    fir.TuplePropertyValue(
      Seq(
        tpe1.getPropertyType(None) -> tpe1.convert(value._1, ctx, info),
        tpe2.getPropertyType(None) -> tpe2.convert(value._2, ctx, info),
        tpe3.getPropertyType(None) -> tpe3.convert(value._3, ctx, info),
        tpe4.getPropertyType(None) -> tpe4.convert(value._4, ctx, info),
        tpe5.getPropertyType(None) -> tpe5.convert(value._5, ctx, info),
        tpe6.getPropertyType(None) -> tpe6.convert(value._6, ctx, info),
        tpe7.getPropertyType(None) -> tpe7.convert(value._7, ctx, info),
        tpe8.getPropertyType(None) -> tpe8.convert(value._8, ctx, info),
        tpe9.getPropertyType(None) -> tpe9.convert(value._9, ctx, info),
        tpe10.getPropertyType(None) -> tpe10.convert(value._10, ctx, info),
        tpe11.getPropertyType(None) -> tpe11.convert(value._11, ctx, info)
      )
    )

  override def convertUnderlying(value: Tuple): Underlying =
    Tuple11(
      tpe1.convertUnderlying(value._1),
      tpe2.convertUnderlying(value._2),
      tpe3.convertUnderlying(value._3),
      tpe4.convertUnderlying(value._4),
      tpe5.convertUnderlying(value._5),
      tpe6.convertUnderlying(value._6),
      tpe7.convertUnderlying(value._7),
      tpe8.convertUnderlying(value._8),
      tpe9.convertUnderlying(value._9),
      tpe10.convertUnderlying(value._10),
      tpe11.convertUnderlying(value._11)
    )
}

private[chisel3] class Tuple12PropertyType[
  _1,
  PT1 <: PropertyType[_1],
  _2,
  PT2 <: PropertyType[_2],
  _3,
  PT3 <: PropertyType[_3],
  _4,
  PT4 <: PropertyType[_4],
  _5,
  PT5 <: PropertyType[_5],
  _6,
  PT6 <: PropertyType[_6],
  _7,
  PT7 <: PropertyType[_7],
  _8,
  PT8 <: PropertyType[_8],
  _9,
  PT9 <: PropertyType[_9],
  _10,
  PT10 <: PropertyType[_10],
  _11,
  PT11 <: PropertyType[_11],
  _12,
  PT12 <: PropertyType[_12]
](val tpe1:  PT1,
  val tpe2:  PT2,
  val tpe3:  PT3,
  val tpe4:  PT4,
  val tpe5:  PT5,
  val tpe6:  PT6,
  val tpe7:  PT7,
  val tpe8:  PT8,
  val tpe9:  PT9,
  val tpe10: PT10,
  val tpe11: PT11,
  val tpe12: PT12)
    extends PropertyType[Tuple12[_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12]] {
  type Tuple = Tuple12[_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12]
  type Type = Tuple12[
    tpe1.Type,
    tpe2.Type,
    tpe3.Type,
    tpe4.Type,
    tpe5.Type,
    tpe6.Type,
    tpe7.Type,
    tpe8.Type,
    tpe9.Type,
    tpe10.Type,
    tpe11.Type,
    tpe12.Type
  ]
  type Underlying = Tuple12[
    tpe1.Underlying,
    tpe2.Underlying,
    tpe3.Underlying,
    tpe4.Underlying,
    tpe5.Underlying,
    tpe6.Underlying,
    tpe7.Underlying,
    tpe8.Underlying,
    tpe9.Underlying,
    tpe10.Underlying,
    tpe11.Underlying,
    tpe12.Underlying
  ]

  override def getPropertyType(value: Option[Tuple]): fir.PropertyType =
    fir.TuplePropertyType(
      Seq(
        tpe1.getPropertyType(None),
        tpe2.getPropertyType(None),
        tpe3.getPropertyType(None),
        tpe4.getPropertyType(None),
        tpe5.getPropertyType(None),
        tpe6.getPropertyType(None),
        tpe7.getPropertyType(None),
        tpe8.getPropertyType(None),
        tpe9.getPropertyType(None),
        tpe10.getPropertyType(None),
        tpe11.getPropertyType(None),
        tpe12.getPropertyType(None)
      )
    )

  override def convert(value: Underlying, ctx: ir.Component, info: SourceInfo): fir.Expression =
    fir.TuplePropertyValue(
      Seq(
        tpe1.getPropertyType(None) -> tpe1.convert(value._1, ctx, info),
        tpe2.getPropertyType(None) -> tpe2.convert(value._2, ctx, info),
        tpe3.getPropertyType(None) -> tpe3.convert(value._3, ctx, info),
        tpe4.getPropertyType(None) -> tpe4.convert(value._4, ctx, info),
        tpe5.getPropertyType(None) -> tpe5.convert(value._5, ctx, info),
        tpe6.getPropertyType(None) -> tpe6.convert(value._6, ctx, info),
        tpe7.getPropertyType(None) -> tpe7.convert(value._7, ctx, info),
        tpe8.getPropertyType(None) -> tpe8.convert(value._8, ctx, info),
        tpe9.getPropertyType(None) -> tpe9.convert(value._9, ctx, info),
        tpe10.getPropertyType(None) -> tpe10.convert(value._10, ctx, info),
        tpe11.getPropertyType(None) -> tpe11.convert(value._11, ctx, info),
        tpe12.getPropertyType(None) -> tpe12.convert(value._12, ctx, info)
      )
    )

  override def convertUnderlying(value: Tuple): Underlying =
    Tuple12(
      tpe1.convertUnderlying(value._1),
      tpe2.convertUnderlying(value._2),
      tpe3.convertUnderlying(value._3),
      tpe4.convertUnderlying(value._4),
      tpe5.convertUnderlying(value._5),
      tpe6.convertUnderlying(value._6),
      tpe7.convertUnderlying(value._7),
      tpe8.convertUnderlying(value._8),
      tpe9.convertUnderlying(value._9),
      tpe10.convertUnderlying(value._10),
      tpe11.convertUnderlying(value._11),
      tpe12.convertUnderlying(value._12)
    )
}

private[chisel3] class Tuple13PropertyType[
  _1,
  PT1 <: PropertyType[_1],
  _2,
  PT2 <: PropertyType[_2],
  _3,
  PT3 <: PropertyType[_3],
  _4,
  PT4 <: PropertyType[_4],
  _5,
  PT5 <: PropertyType[_5],
  _6,
  PT6 <: PropertyType[_6],
  _7,
  PT7 <: PropertyType[_7],
  _8,
  PT8 <: PropertyType[_8],
  _9,
  PT9 <: PropertyType[_9],
  _10,
  PT10 <: PropertyType[_10],
  _11,
  PT11 <: PropertyType[_11],
  _12,
  PT12 <: PropertyType[_12],
  _13,
  PT13 <: PropertyType[_13]
](val tpe1:  PT1,
  val tpe2:  PT2,
  val tpe3:  PT3,
  val tpe4:  PT4,
  val tpe5:  PT5,
  val tpe6:  PT6,
  val tpe7:  PT7,
  val tpe8:  PT8,
  val tpe9:  PT9,
  val tpe10: PT10,
  val tpe11: PT11,
  val tpe12: PT12,
  val tpe13: PT13)
    extends PropertyType[Tuple13[_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13]] {
  type Tuple = Tuple13[_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13]
  type Type = Tuple13[
    tpe1.Type,
    tpe2.Type,
    tpe3.Type,
    tpe4.Type,
    tpe5.Type,
    tpe6.Type,
    tpe7.Type,
    tpe8.Type,
    tpe9.Type,
    tpe10.Type,
    tpe11.Type,
    tpe12.Type,
    tpe13.Type
  ]
  type Underlying = Tuple13[
    tpe1.Underlying,
    tpe2.Underlying,
    tpe3.Underlying,
    tpe4.Underlying,
    tpe5.Underlying,
    tpe6.Underlying,
    tpe7.Underlying,
    tpe8.Underlying,
    tpe9.Underlying,
    tpe10.Underlying,
    tpe11.Underlying,
    tpe12.Underlying,
    tpe13.Underlying
  ]

  override def getPropertyType(value: Option[Tuple]): fir.PropertyType =
    fir.TuplePropertyType(
      Seq(
        tpe1.getPropertyType(None),
        tpe2.getPropertyType(None),
        tpe3.getPropertyType(None),
        tpe4.getPropertyType(None),
        tpe5.getPropertyType(None),
        tpe6.getPropertyType(None),
        tpe7.getPropertyType(None),
        tpe8.getPropertyType(None),
        tpe9.getPropertyType(None),
        tpe10.getPropertyType(None),
        tpe11.getPropertyType(None),
        tpe12.getPropertyType(None),
        tpe13.getPropertyType(None)
      )
    )

  override def convert(value: Underlying, ctx: ir.Component, info: SourceInfo): fir.Expression =
    fir.TuplePropertyValue(
      Seq(
        tpe1.getPropertyType(None) -> tpe1.convert(value._1, ctx, info),
        tpe2.getPropertyType(None) -> tpe2.convert(value._2, ctx, info),
        tpe3.getPropertyType(None) -> tpe3.convert(value._3, ctx, info),
        tpe4.getPropertyType(None) -> tpe4.convert(value._4, ctx, info),
        tpe5.getPropertyType(None) -> tpe5.convert(value._5, ctx, info),
        tpe6.getPropertyType(None) -> tpe6.convert(value._6, ctx, info),
        tpe7.getPropertyType(None) -> tpe7.convert(value._7, ctx, info),
        tpe8.getPropertyType(None) -> tpe8.convert(value._8, ctx, info),
        tpe9.getPropertyType(None) -> tpe9.convert(value._9, ctx, info),
        tpe10.getPropertyType(None) -> tpe10.convert(value._10, ctx, info),
        tpe11.getPropertyType(None) -> tpe11.convert(value._11, ctx, info),
        tpe12.getPropertyType(None) -> tpe12.convert(value._12, ctx, info),
        tpe13.getPropertyType(None) -> tpe13.convert(value._13, ctx, info)
      )
    )

  override def convertUnderlying(value: Tuple): Underlying =
    Tuple13(
      tpe1.convertUnderlying(value._1),
      tpe2.convertUnderlying(value._2),
      tpe3.convertUnderlying(value._3),
      tpe4.convertUnderlying(value._4),
      tpe5.convertUnderlying(value._5),
      tpe6.convertUnderlying(value._6),
      tpe7.convertUnderlying(value._7),
      tpe8.convertUnderlying(value._8),
      tpe9.convertUnderlying(value._9),
      tpe10.convertUnderlying(value._10),
      tpe11.convertUnderlying(value._11),
      tpe12.convertUnderlying(value._12),
      tpe13.convertUnderlying(value._13)
    )
}

private[chisel3] class Tuple14PropertyType[
  _1,
  PT1 <: PropertyType[_1],
  _2,
  PT2 <: PropertyType[_2],
  _3,
  PT3 <: PropertyType[_3],
  _4,
  PT4 <: PropertyType[_4],
  _5,
  PT5 <: PropertyType[_5],
  _6,
  PT6 <: PropertyType[_6],
  _7,
  PT7 <: PropertyType[_7],
  _8,
  PT8 <: PropertyType[_8],
  _9,
  PT9 <: PropertyType[_9],
  _10,
  PT10 <: PropertyType[_10],
  _11,
  PT11 <: PropertyType[_11],
  _12,
  PT12 <: PropertyType[_12],
  _13,
  PT13 <: PropertyType[_13],
  _14,
  PT14 <: PropertyType[_14]
](val tpe1:  PT1,
  val tpe2:  PT2,
  val tpe3:  PT3,
  val tpe4:  PT4,
  val tpe5:  PT5,
  val tpe6:  PT6,
  val tpe7:  PT7,
  val tpe8:  PT8,
  val tpe9:  PT9,
  val tpe10: PT10,
  val tpe11: PT11,
  val tpe12: PT12,
  val tpe13: PT13,
  val tpe14: PT14)
    extends PropertyType[Tuple14[_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14]] {
  type Tuple = Tuple14[_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14]
  type Type = Tuple14[
    tpe1.Type,
    tpe2.Type,
    tpe3.Type,
    tpe4.Type,
    tpe5.Type,
    tpe6.Type,
    tpe7.Type,
    tpe8.Type,
    tpe9.Type,
    tpe10.Type,
    tpe11.Type,
    tpe12.Type,
    tpe13.Type,
    tpe14.Type
  ]
  type Underlying = Tuple14[
    tpe1.Underlying,
    tpe2.Underlying,
    tpe3.Underlying,
    tpe4.Underlying,
    tpe5.Underlying,
    tpe6.Underlying,
    tpe7.Underlying,
    tpe8.Underlying,
    tpe9.Underlying,
    tpe10.Underlying,
    tpe11.Underlying,
    tpe12.Underlying,
    tpe13.Underlying,
    tpe14.Underlying
  ]

  override def getPropertyType(value: Option[Tuple]): fir.PropertyType =
    fir.TuplePropertyType(
      Seq(
        tpe1.getPropertyType(None),
        tpe2.getPropertyType(None),
        tpe3.getPropertyType(None),
        tpe4.getPropertyType(None),
        tpe5.getPropertyType(None),
        tpe6.getPropertyType(None),
        tpe7.getPropertyType(None),
        tpe8.getPropertyType(None),
        tpe9.getPropertyType(None),
        tpe10.getPropertyType(None),
        tpe11.getPropertyType(None),
        tpe12.getPropertyType(None),
        tpe13.getPropertyType(None),
        tpe14.getPropertyType(None)
      )
    )

  override def convert(value: Underlying, ctx: ir.Component, info: SourceInfo): fir.Expression =
    fir.TuplePropertyValue(
      Seq(
        tpe1.getPropertyType(None) -> tpe1.convert(value._1, ctx, info),
        tpe2.getPropertyType(None) -> tpe2.convert(value._2, ctx, info),
        tpe3.getPropertyType(None) -> tpe3.convert(value._3, ctx, info),
        tpe4.getPropertyType(None) -> tpe4.convert(value._4, ctx, info),
        tpe5.getPropertyType(None) -> tpe5.convert(value._5, ctx, info),
        tpe6.getPropertyType(None) -> tpe6.convert(value._6, ctx, info),
        tpe7.getPropertyType(None) -> tpe7.convert(value._7, ctx, info),
        tpe8.getPropertyType(None) -> tpe8.convert(value._8, ctx, info),
        tpe9.getPropertyType(None) -> tpe9.convert(value._9, ctx, info),
        tpe10.getPropertyType(None) -> tpe10.convert(value._10, ctx, info),
        tpe11.getPropertyType(None) -> tpe11.convert(value._11, ctx, info),
        tpe12.getPropertyType(None) -> tpe12.convert(value._12, ctx, info),
        tpe13.getPropertyType(None) -> tpe13.convert(value._13, ctx, info),
        tpe14.getPropertyType(None) -> tpe14.convert(value._14, ctx, info)
      )
    )

  override def convertUnderlying(value: Tuple): Underlying =
    Tuple14(
      tpe1.convertUnderlying(value._1),
      tpe2.convertUnderlying(value._2),
      tpe3.convertUnderlying(value._3),
      tpe4.convertUnderlying(value._4),
      tpe5.convertUnderlying(value._5),
      tpe6.convertUnderlying(value._6),
      tpe7.convertUnderlying(value._7),
      tpe8.convertUnderlying(value._8),
      tpe9.convertUnderlying(value._9),
      tpe10.convertUnderlying(value._10),
      tpe11.convertUnderlying(value._11),
      tpe12.convertUnderlying(value._12),
      tpe13.convertUnderlying(value._13),
      tpe14.convertUnderlying(value._14)
    )
}

private[chisel3] class Tuple15PropertyType[
  _1,
  PT1 <: PropertyType[_1],
  _2,
  PT2 <: PropertyType[_2],
  _3,
  PT3 <: PropertyType[_3],
  _4,
  PT4 <: PropertyType[_4],
  _5,
  PT5 <: PropertyType[_5],
  _6,
  PT6 <: PropertyType[_6],
  _7,
  PT7 <: PropertyType[_7],
  _8,
  PT8 <: PropertyType[_8],
  _9,
  PT9 <: PropertyType[_9],
  _10,
  PT10 <: PropertyType[_10],
  _11,
  PT11 <: PropertyType[_11],
  _12,
  PT12 <: PropertyType[_12],
  _13,
  PT13 <: PropertyType[_13],
  _14,
  PT14 <: PropertyType[_14],
  _15,
  PT15 <: PropertyType[_15]
](val tpe1:  PT1,
  val tpe2:  PT2,
  val tpe3:  PT3,
  val tpe4:  PT4,
  val tpe5:  PT5,
  val tpe6:  PT6,
  val tpe7:  PT7,
  val tpe8:  PT8,
  val tpe9:  PT9,
  val tpe10: PT10,
  val tpe11: PT11,
  val tpe12: PT12,
  val tpe13: PT13,
  val tpe14: PT14,
  val tpe15: PT15)
    extends PropertyType[Tuple15[_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15]] {
  type Tuple = Tuple15[_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15]
  type Type = Tuple15[
    tpe1.Type,
    tpe2.Type,
    tpe3.Type,
    tpe4.Type,
    tpe5.Type,
    tpe6.Type,
    tpe7.Type,
    tpe8.Type,
    tpe9.Type,
    tpe10.Type,
    tpe11.Type,
    tpe12.Type,
    tpe13.Type,
    tpe14.Type,
    tpe15.Type
  ]
  type Underlying = Tuple15[
    tpe1.Underlying,
    tpe2.Underlying,
    tpe3.Underlying,
    tpe4.Underlying,
    tpe5.Underlying,
    tpe6.Underlying,
    tpe7.Underlying,
    tpe8.Underlying,
    tpe9.Underlying,
    tpe10.Underlying,
    tpe11.Underlying,
    tpe12.Underlying,
    tpe13.Underlying,
    tpe14.Underlying,
    tpe15.Underlying
  ]

  override def getPropertyType(value: Option[Tuple]): fir.PropertyType =
    fir.TuplePropertyType(
      Seq(
        tpe1.getPropertyType(None),
        tpe2.getPropertyType(None),
        tpe3.getPropertyType(None),
        tpe4.getPropertyType(None),
        tpe5.getPropertyType(None),
        tpe6.getPropertyType(None),
        tpe7.getPropertyType(None),
        tpe8.getPropertyType(None),
        tpe9.getPropertyType(None),
        tpe10.getPropertyType(None),
        tpe11.getPropertyType(None),
        tpe12.getPropertyType(None),
        tpe13.getPropertyType(None),
        tpe14.getPropertyType(None),
        tpe15.getPropertyType(None)
      )
    )

  override def convert(value: Underlying, ctx: ir.Component, info: SourceInfo): fir.Expression =
    fir.TuplePropertyValue(
      Seq(
        tpe1.getPropertyType(None) -> tpe1.convert(value._1, ctx, info),
        tpe2.getPropertyType(None) -> tpe2.convert(value._2, ctx, info),
        tpe3.getPropertyType(None) -> tpe3.convert(value._3, ctx, info),
        tpe4.getPropertyType(None) -> tpe4.convert(value._4, ctx, info),
        tpe5.getPropertyType(None) -> tpe5.convert(value._5, ctx, info),
        tpe6.getPropertyType(None) -> tpe6.convert(value._6, ctx, info),
        tpe7.getPropertyType(None) -> tpe7.convert(value._7, ctx, info),
        tpe8.getPropertyType(None) -> tpe8.convert(value._8, ctx, info),
        tpe9.getPropertyType(None) -> tpe9.convert(value._9, ctx, info),
        tpe10.getPropertyType(None) -> tpe10.convert(value._10, ctx, info),
        tpe11.getPropertyType(None) -> tpe11.convert(value._11, ctx, info),
        tpe12.getPropertyType(None) -> tpe12.convert(value._12, ctx, info),
        tpe13.getPropertyType(None) -> tpe13.convert(value._13, ctx, info),
        tpe14.getPropertyType(None) -> tpe14.convert(value._14, ctx, info),
        tpe15.getPropertyType(None) -> tpe15.convert(value._15, ctx, info)
      )
    )

  override def convertUnderlying(value: Tuple): Underlying =
    Tuple15(
      tpe1.convertUnderlying(value._1),
      tpe2.convertUnderlying(value._2),
      tpe3.convertUnderlying(value._3),
      tpe4.convertUnderlying(value._4),
      tpe5.convertUnderlying(value._5),
      tpe6.convertUnderlying(value._6),
      tpe7.convertUnderlying(value._7),
      tpe8.convertUnderlying(value._8),
      tpe9.convertUnderlying(value._9),
      tpe10.convertUnderlying(value._10),
      tpe11.convertUnderlying(value._11),
      tpe12.convertUnderlying(value._12),
      tpe13.convertUnderlying(value._13),
      tpe14.convertUnderlying(value._14),
      tpe15.convertUnderlying(value._15)
    )
}

private[chisel3] class Tuple16PropertyType[
  _1,
  PT1 <: PropertyType[_1],
  _2,
  PT2 <: PropertyType[_2],
  _3,
  PT3 <: PropertyType[_3],
  _4,
  PT4 <: PropertyType[_4],
  _5,
  PT5 <: PropertyType[_5],
  _6,
  PT6 <: PropertyType[_6],
  _7,
  PT7 <: PropertyType[_7],
  _8,
  PT8 <: PropertyType[_8],
  _9,
  PT9 <: PropertyType[_9],
  _10,
  PT10 <: PropertyType[_10],
  _11,
  PT11 <: PropertyType[_11],
  _12,
  PT12 <: PropertyType[_12],
  _13,
  PT13 <: PropertyType[_13],
  _14,
  PT14 <: PropertyType[_14],
  _15,
  PT15 <: PropertyType[_15],
  _16,
  PT16 <: PropertyType[_16]
](val tpe1:  PT1,
  val tpe2:  PT2,
  val tpe3:  PT3,
  val tpe4:  PT4,
  val tpe5:  PT5,
  val tpe6:  PT6,
  val tpe7:  PT7,
  val tpe8:  PT8,
  val tpe9:  PT9,
  val tpe10: PT10,
  val tpe11: PT11,
  val tpe12: PT12,
  val tpe13: PT13,
  val tpe14: PT14,
  val tpe15: PT15,
  val tpe16: PT16)
    extends PropertyType[Tuple16[_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16]] {
  type Tuple = Tuple16[_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16]
  type Type = Tuple16[
    tpe1.Type,
    tpe2.Type,
    tpe3.Type,
    tpe4.Type,
    tpe5.Type,
    tpe6.Type,
    tpe7.Type,
    tpe8.Type,
    tpe9.Type,
    tpe10.Type,
    tpe11.Type,
    tpe12.Type,
    tpe13.Type,
    tpe14.Type,
    tpe15.Type,
    tpe16.Type
  ]
  type Underlying = Tuple16[
    tpe1.Underlying,
    tpe2.Underlying,
    tpe3.Underlying,
    tpe4.Underlying,
    tpe5.Underlying,
    tpe6.Underlying,
    tpe7.Underlying,
    tpe8.Underlying,
    tpe9.Underlying,
    tpe10.Underlying,
    tpe11.Underlying,
    tpe12.Underlying,
    tpe13.Underlying,
    tpe14.Underlying,
    tpe15.Underlying,
    tpe16.Underlying
  ]

  override def getPropertyType(value: Option[Tuple]): fir.PropertyType =
    fir.TuplePropertyType(
      Seq(
        tpe1.getPropertyType(None),
        tpe2.getPropertyType(None),
        tpe3.getPropertyType(None),
        tpe4.getPropertyType(None),
        tpe5.getPropertyType(None),
        tpe6.getPropertyType(None),
        tpe7.getPropertyType(None),
        tpe8.getPropertyType(None),
        tpe9.getPropertyType(None),
        tpe10.getPropertyType(None),
        tpe11.getPropertyType(None),
        tpe12.getPropertyType(None),
        tpe13.getPropertyType(None),
        tpe14.getPropertyType(None),
        tpe15.getPropertyType(None),
        tpe16.getPropertyType(None)
      )
    )

  override def convert(value: Underlying, ctx: ir.Component, info: SourceInfo): fir.Expression =
    fir.TuplePropertyValue(
      Seq(
        tpe1.getPropertyType(None) -> tpe1.convert(value._1, ctx, info),
        tpe2.getPropertyType(None) -> tpe2.convert(value._2, ctx, info),
        tpe3.getPropertyType(None) -> tpe3.convert(value._3, ctx, info),
        tpe4.getPropertyType(None) -> tpe4.convert(value._4, ctx, info),
        tpe5.getPropertyType(None) -> tpe5.convert(value._5, ctx, info),
        tpe6.getPropertyType(None) -> tpe6.convert(value._6, ctx, info),
        tpe7.getPropertyType(None) -> tpe7.convert(value._7, ctx, info),
        tpe8.getPropertyType(None) -> tpe8.convert(value._8, ctx, info),
        tpe9.getPropertyType(None) -> tpe9.convert(value._9, ctx, info),
        tpe10.getPropertyType(None) -> tpe10.convert(value._10, ctx, info),
        tpe11.getPropertyType(None) -> tpe11.convert(value._11, ctx, info),
        tpe12.getPropertyType(None) -> tpe12.convert(value._12, ctx, info),
        tpe13.getPropertyType(None) -> tpe13.convert(value._13, ctx, info),
        tpe14.getPropertyType(None) -> tpe14.convert(value._14, ctx, info),
        tpe15.getPropertyType(None) -> tpe15.convert(value._15, ctx, info),
        tpe16.getPropertyType(None) -> tpe16.convert(value._16, ctx, info)
      )
    )

  override def convertUnderlying(value: Tuple): Underlying =
    Tuple16(
      tpe1.convertUnderlying(value._1),
      tpe2.convertUnderlying(value._2),
      tpe3.convertUnderlying(value._3),
      tpe4.convertUnderlying(value._4),
      tpe5.convertUnderlying(value._5),
      tpe6.convertUnderlying(value._6),
      tpe7.convertUnderlying(value._7),
      tpe8.convertUnderlying(value._8),
      tpe9.convertUnderlying(value._9),
      tpe10.convertUnderlying(value._10),
      tpe11.convertUnderlying(value._11),
      tpe12.convertUnderlying(value._12),
      tpe13.convertUnderlying(value._13),
      tpe14.convertUnderlying(value._14),
      tpe15.convertUnderlying(value._15),
      tpe16.convertUnderlying(value._16)
    )
}

private[chisel3] class Tuple17PropertyType[
  _1,
  PT1 <: PropertyType[_1],
  _2,
  PT2 <: PropertyType[_2],
  _3,
  PT3 <: PropertyType[_3],
  _4,
  PT4 <: PropertyType[_4],
  _5,
  PT5 <: PropertyType[_5],
  _6,
  PT6 <: PropertyType[_6],
  _7,
  PT7 <: PropertyType[_7],
  _8,
  PT8 <: PropertyType[_8],
  _9,
  PT9 <: PropertyType[_9],
  _10,
  PT10 <: PropertyType[_10],
  _11,
  PT11 <: PropertyType[_11],
  _12,
  PT12 <: PropertyType[_12],
  _13,
  PT13 <: PropertyType[_13],
  _14,
  PT14 <: PropertyType[_14],
  _15,
  PT15 <: PropertyType[_15],
  _16,
  PT16 <: PropertyType[_16],
  _17,
  PT17 <: PropertyType[_17]
](val tpe1:  PT1,
  val tpe2:  PT2,
  val tpe3:  PT3,
  val tpe4:  PT4,
  val tpe5:  PT5,
  val tpe6:  PT6,
  val tpe7:  PT7,
  val tpe8:  PT8,
  val tpe9:  PT9,
  val tpe10: PT10,
  val tpe11: PT11,
  val tpe12: PT12,
  val tpe13: PT13,
  val tpe14: PT14,
  val tpe15: PT15,
  val tpe16: PT16,
  val tpe17: PT17)
    extends PropertyType[Tuple17[_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17]] {
  type Tuple = Tuple17[_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17]
  type Type = Tuple17[
    tpe1.Type,
    tpe2.Type,
    tpe3.Type,
    tpe4.Type,
    tpe5.Type,
    tpe6.Type,
    tpe7.Type,
    tpe8.Type,
    tpe9.Type,
    tpe10.Type,
    tpe11.Type,
    tpe12.Type,
    tpe13.Type,
    tpe14.Type,
    tpe15.Type,
    tpe16.Type,
    tpe17.Type
  ]
  type Underlying = Tuple17[
    tpe1.Underlying,
    tpe2.Underlying,
    tpe3.Underlying,
    tpe4.Underlying,
    tpe5.Underlying,
    tpe6.Underlying,
    tpe7.Underlying,
    tpe8.Underlying,
    tpe9.Underlying,
    tpe10.Underlying,
    tpe11.Underlying,
    tpe12.Underlying,
    tpe13.Underlying,
    tpe14.Underlying,
    tpe15.Underlying,
    tpe16.Underlying,
    tpe17.Underlying
  ]

  override def getPropertyType(value: Option[Tuple]): fir.PropertyType =
    fir.TuplePropertyType(
      Seq(
        tpe1.getPropertyType(None),
        tpe2.getPropertyType(None),
        tpe3.getPropertyType(None),
        tpe4.getPropertyType(None),
        tpe5.getPropertyType(None),
        tpe6.getPropertyType(None),
        tpe7.getPropertyType(None),
        tpe8.getPropertyType(None),
        tpe9.getPropertyType(None),
        tpe10.getPropertyType(None),
        tpe11.getPropertyType(None),
        tpe12.getPropertyType(None),
        tpe13.getPropertyType(None),
        tpe14.getPropertyType(None),
        tpe15.getPropertyType(None),
        tpe16.getPropertyType(None),
        tpe17.getPropertyType(None)
      )
    )

  override def convert(value: Underlying, ctx: ir.Component, info: SourceInfo): fir.Expression =
    fir.TuplePropertyValue(
      Seq(
        tpe1.getPropertyType(None) -> tpe1.convert(value._1, ctx, info),
        tpe2.getPropertyType(None) -> tpe2.convert(value._2, ctx, info),
        tpe3.getPropertyType(None) -> tpe3.convert(value._3, ctx, info),
        tpe4.getPropertyType(None) -> tpe4.convert(value._4, ctx, info),
        tpe5.getPropertyType(None) -> tpe5.convert(value._5, ctx, info),
        tpe6.getPropertyType(None) -> tpe6.convert(value._6, ctx, info),
        tpe7.getPropertyType(None) -> tpe7.convert(value._7, ctx, info),
        tpe8.getPropertyType(None) -> tpe8.convert(value._8, ctx, info),
        tpe9.getPropertyType(None) -> tpe9.convert(value._9, ctx, info),
        tpe10.getPropertyType(None) -> tpe10.convert(value._10, ctx, info),
        tpe11.getPropertyType(None) -> tpe11.convert(value._11, ctx, info),
        tpe12.getPropertyType(None) -> tpe12.convert(value._12, ctx, info),
        tpe13.getPropertyType(None) -> tpe13.convert(value._13, ctx, info),
        tpe14.getPropertyType(None) -> tpe14.convert(value._14, ctx, info),
        tpe15.getPropertyType(None) -> tpe15.convert(value._15, ctx, info),
        tpe16.getPropertyType(None) -> tpe16.convert(value._16, ctx, info),
        tpe17.getPropertyType(None) -> tpe17.convert(value._17, ctx, info)
      )
    )

  override def convertUnderlying(value: Tuple): Underlying =
    Tuple17(
      tpe1.convertUnderlying(value._1),
      tpe2.convertUnderlying(value._2),
      tpe3.convertUnderlying(value._3),
      tpe4.convertUnderlying(value._4),
      tpe5.convertUnderlying(value._5),
      tpe6.convertUnderlying(value._6),
      tpe7.convertUnderlying(value._7),
      tpe8.convertUnderlying(value._8),
      tpe9.convertUnderlying(value._9),
      tpe10.convertUnderlying(value._10),
      tpe11.convertUnderlying(value._11),
      tpe12.convertUnderlying(value._12),
      tpe13.convertUnderlying(value._13),
      tpe14.convertUnderlying(value._14),
      tpe15.convertUnderlying(value._15),
      tpe16.convertUnderlying(value._16),
      tpe17.convertUnderlying(value._17)
    )
}

private[chisel3] class Tuple18PropertyType[
  _1,
  PT1 <: PropertyType[_1],
  _2,
  PT2 <: PropertyType[_2],
  _3,
  PT3 <: PropertyType[_3],
  _4,
  PT4 <: PropertyType[_4],
  _5,
  PT5 <: PropertyType[_5],
  _6,
  PT6 <: PropertyType[_6],
  _7,
  PT7 <: PropertyType[_7],
  _8,
  PT8 <: PropertyType[_8],
  _9,
  PT9 <: PropertyType[_9],
  _10,
  PT10 <: PropertyType[_10],
  _11,
  PT11 <: PropertyType[_11],
  _12,
  PT12 <: PropertyType[_12],
  _13,
  PT13 <: PropertyType[_13],
  _14,
  PT14 <: PropertyType[_14],
  _15,
  PT15 <: PropertyType[_15],
  _16,
  PT16 <: PropertyType[_16],
  _17,
  PT17 <: PropertyType[_17],
  _18,
  PT18 <: PropertyType[_18]
](val tpe1:  PT1,
  val tpe2:  PT2,
  val tpe3:  PT3,
  val tpe4:  PT4,
  val tpe5:  PT5,
  val tpe6:  PT6,
  val tpe7:  PT7,
  val tpe8:  PT8,
  val tpe9:  PT9,
  val tpe10: PT10,
  val tpe11: PT11,
  val tpe12: PT12,
  val tpe13: PT13,
  val tpe14: PT14,
  val tpe15: PT15,
  val tpe16: PT16,
  val tpe17: PT17,
  val tpe18: PT18)
    extends PropertyType[Tuple18[_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18]] {
  type Tuple = Tuple18[_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18]
  type Type = Tuple18[
    tpe1.Type,
    tpe2.Type,
    tpe3.Type,
    tpe4.Type,
    tpe5.Type,
    tpe6.Type,
    tpe7.Type,
    tpe8.Type,
    tpe9.Type,
    tpe10.Type,
    tpe11.Type,
    tpe12.Type,
    tpe13.Type,
    tpe14.Type,
    tpe15.Type,
    tpe16.Type,
    tpe17.Type,
    tpe18.Type
  ]
  type Underlying = Tuple18[
    tpe1.Underlying,
    tpe2.Underlying,
    tpe3.Underlying,
    tpe4.Underlying,
    tpe5.Underlying,
    tpe6.Underlying,
    tpe7.Underlying,
    tpe8.Underlying,
    tpe9.Underlying,
    tpe10.Underlying,
    tpe11.Underlying,
    tpe12.Underlying,
    tpe13.Underlying,
    tpe14.Underlying,
    tpe15.Underlying,
    tpe16.Underlying,
    tpe17.Underlying,
    tpe18.Underlying
  ]

  override def getPropertyType(value: Option[Tuple]): fir.PropertyType =
    fir.TuplePropertyType(
      Seq(
        tpe1.getPropertyType(None),
        tpe2.getPropertyType(None),
        tpe3.getPropertyType(None),
        tpe4.getPropertyType(None),
        tpe5.getPropertyType(None),
        tpe6.getPropertyType(None),
        tpe7.getPropertyType(None),
        tpe8.getPropertyType(None),
        tpe9.getPropertyType(None),
        tpe10.getPropertyType(None),
        tpe11.getPropertyType(None),
        tpe12.getPropertyType(None),
        tpe13.getPropertyType(None),
        tpe14.getPropertyType(None),
        tpe15.getPropertyType(None),
        tpe16.getPropertyType(None),
        tpe17.getPropertyType(None),
        tpe18.getPropertyType(None)
      )
    )

  override def convert(value: Underlying, ctx: ir.Component, info: SourceInfo): fir.Expression =
    fir.TuplePropertyValue(
      Seq(
        tpe1.getPropertyType(None) -> tpe1.convert(value._1, ctx, info),
        tpe2.getPropertyType(None) -> tpe2.convert(value._2, ctx, info),
        tpe3.getPropertyType(None) -> tpe3.convert(value._3, ctx, info),
        tpe4.getPropertyType(None) -> tpe4.convert(value._4, ctx, info),
        tpe5.getPropertyType(None) -> tpe5.convert(value._5, ctx, info),
        tpe6.getPropertyType(None) -> tpe6.convert(value._6, ctx, info),
        tpe7.getPropertyType(None) -> tpe7.convert(value._7, ctx, info),
        tpe8.getPropertyType(None) -> tpe8.convert(value._8, ctx, info),
        tpe9.getPropertyType(None) -> tpe9.convert(value._9, ctx, info),
        tpe10.getPropertyType(None) -> tpe10.convert(value._10, ctx, info),
        tpe11.getPropertyType(None) -> tpe11.convert(value._11, ctx, info),
        tpe12.getPropertyType(None) -> tpe12.convert(value._12, ctx, info),
        tpe13.getPropertyType(None) -> tpe13.convert(value._13, ctx, info),
        tpe14.getPropertyType(None) -> tpe14.convert(value._14, ctx, info),
        tpe15.getPropertyType(None) -> tpe15.convert(value._15, ctx, info),
        tpe16.getPropertyType(None) -> tpe16.convert(value._16, ctx, info),
        tpe17.getPropertyType(None) -> tpe17.convert(value._17, ctx, info),
        tpe18.getPropertyType(None) -> tpe18.convert(value._18, ctx, info)
      )
    )

  override def convertUnderlying(value: Tuple): Underlying =
    Tuple18(
      tpe1.convertUnderlying(value._1),
      tpe2.convertUnderlying(value._2),
      tpe3.convertUnderlying(value._3),
      tpe4.convertUnderlying(value._4),
      tpe5.convertUnderlying(value._5),
      tpe6.convertUnderlying(value._6),
      tpe7.convertUnderlying(value._7),
      tpe8.convertUnderlying(value._8),
      tpe9.convertUnderlying(value._9),
      tpe10.convertUnderlying(value._10),
      tpe11.convertUnderlying(value._11),
      tpe12.convertUnderlying(value._12),
      tpe13.convertUnderlying(value._13),
      tpe14.convertUnderlying(value._14),
      tpe15.convertUnderlying(value._15),
      tpe16.convertUnderlying(value._16),
      tpe17.convertUnderlying(value._17),
      tpe18.convertUnderlying(value._18)
    )
}

private[chisel3] class Tuple19PropertyType[
  _1,
  PT1 <: PropertyType[_1],
  _2,
  PT2 <: PropertyType[_2],
  _3,
  PT3 <: PropertyType[_3],
  _4,
  PT4 <: PropertyType[_4],
  _5,
  PT5 <: PropertyType[_5],
  _6,
  PT6 <: PropertyType[_6],
  _7,
  PT7 <: PropertyType[_7],
  _8,
  PT8 <: PropertyType[_8],
  _9,
  PT9 <: PropertyType[_9],
  _10,
  PT10 <: PropertyType[_10],
  _11,
  PT11 <: PropertyType[_11],
  _12,
  PT12 <: PropertyType[_12],
  _13,
  PT13 <: PropertyType[_13],
  _14,
  PT14 <: PropertyType[_14],
  _15,
  PT15 <: PropertyType[_15],
  _16,
  PT16 <: PropertyType[_16],
  _17,
  PT17 <: PropertyType[_17],
  _18,
  PT18 <: PropertyType[_18],
  _19,
  PT19 <: PropertyType[_19]
](val tpe1:  PT1,
  val tpe2:  PT2,
  val tpe3:  PT3,
  val tpe4:  PT4,
  val tpe5:  PT5,
  val tpe6:  PT6,
  val tpe7:  PT7,
  val tpe8:  PT8,
  val tpe9:  PT9,
  val tpe10: PT10,
  val tpe11: PT11,
  val tpe12: PT12,
  val tpe13: PT13,
  val tpe14: PT14,
  val tpe15: PT15,
  val tpe16: PT16,
  val tpe17: PT17,
  val tpe18: PT18,
  val tpe19: PT19)
    extends PropertyType[
      Tuple19[_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19]
    ] {
  type Tuple = Tuple19[_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19]
  type Type = Tuple19[
    tpe1.Type,
    tpe2.Type,
    tpe3.Type,
    tpe4.Type,
    tpe5.Type,
    tpe6.Type,
    tpe7.Type,
    tpe8.Type,
    tpe9.Type,
    tpe10.Type,
    tpe11.Type,
    tpe12.Type,
    tpe13.Type,
    tpe14.Type,
    tpe15.Type,
    tpe16.Type,
    tpe17.Type,
    tpe18.Type,
    tpe19.Type
  ]
  type Underlying = Tuple19[
    tpe1.Underlying,
    tpe2.Underlying,
    tpe3.Underlying,
    tpe4.Underlying,
    tpe5.Underlying,
    tpe6.Underlying,
    tpe7.Underlying,
    tpe8.Underlying,
    tpe9.Underlying,
    tpe10.Underlying,
    tpe11.Underlying,
    tpe12.Underlying,
    tpe13.Underlying,
    tpe14.Underlying,
    tpe15.Underlying,
    tpe16.Underlying,
    tpe17.Underlying,
    tpe18.Underlying,
    tpe19.Underlying
  ]

  override def getPropertyType(value: Option[Tuple]): fir.PropertyType =
    fir.TuplePropertyType(
      Seq(
        tpe1.getPropertyType(None),
        tpe2.getPropertyType(None),
        tpe3.getPropertyType(None),
        tpe4.getPropertyType(None),
        tpe5.getPropertyType(None),
        tpe6.getPropertyType(None),
        tpe7.getPropertyType(None),
        tpe8.getPropertyType(None),
        tpe9.getPropertyType(None),
        tpe10.getPropertyType(None),
        tpe11.getPropertyType(None),
        tpe12.getPropertyType(None),
        tpe13.getPropertyType(None),
        tpe14.getPropertyType(None),
        tpe15.getPropertyType(None),
        tpe16.getPropertyType(None),
        tpe17.getPropertyType(None),
        tpe18.getPropertyType(None),
        tpe19.getPropertyType(None)
      )
    )

  override def convert(value: Underlying, ctx: ir.Component, info: SourceInfo): fir.Expression =
    fir.TuplePropertyValue(
      Seq(
        tpe1.getPropertyType(None) -> tpe1.convert(value._1, ctx, info),
        tpe2.getPropertyType(None) -> tpe2.convert(value._2, ctx, info),
        tpe3.getPropertyType(None) -> tpe3.convert(value._3, ctx, info),
        tpe4.getPropertyType(None) -> tpe4.convert(value._4, ctx, info),
        tpe5.getPropertyType(None) -> tpe5.convert(value._5, ctx, info),
        tpe6.getPropertyType(None) -> tpe6.convert(value._6, ctx, info),
        tpe7.getPropertyType(None) -> tpe7.convert(value._7, ctx, info),
        tpe8.getPropertyType(None) -> tpe8.convert(value._8, ctx, info),
        tpe9.getPropertyType(None) -> tpe9.convert(value._9, ctx, info),
        tpe10.getPropertyType(None) -> tpe10.convert(value._10, ctx, info),
        tpe11.getPropertyType(None) -> tpe11.convert(value._11, ctx, info),
        tpe12.getPropertyType(None) -> tpe12.convert(value._12, ctx, info),
        tpe13.getPropertyType(None) -> tpe13.convert(value._13, ctx, info),
        tpe14.getPropertyType(None) -> tpe14.convert(value._14, ctx, info),
        tpe15.getPropertyType(None) -> tpe15.convert(value._15, ctx, info),
        tpe16.getPropertyType(None) -> tpe16.convert(value._16, ctx, info),
        tpe17.getPropertyType(None) -> tpe17.convert(value._17, ctx, info),
        tpe18.getPropertyType(None) -> tpe18.convert(value._18, ctx, info),
        tpe19.getPropertyType(None) -> tpe19.convert(value._19, ctx, info)
      )
    )

  override def convertUnderlying(value: Tuple): Underlying =
    Tuple19(
      tpe1.convertUnderlying(value._1),
      tpe2.convertUnderlying(value._2),
      tpe3.convertUnderlying(value._3),
      tpe4.convertUnderlying(value._4),
      tpe5.convertUnderlying(value._5),
      tpe6.convertUnderlying(value._6),
      tpe7.convertUnderlying(value._7),
      tpe8.convertUnderlying(value._8),
      tpe9.convertUnderlying(value._9),
      tpe10.convertUnderlying(value._10),
      tpe11.convertUnderlying(value._11),
      tpe12.convertUnderlying(value._12),
      tpe13.convertUnderlying(value._13),
      tpe14.convertUnderlying(value._14),
      tpe15.convertUnderlying(value._15),
      tpe16.convertUnderlying(value._16),
      tpe17.convertUnderlying(value._17),
      tpe18.convertUnderlying(value._18),
      tpe19.convertUnderlying(value._19)
    )
}

private[chisel3] class Tuple20PropertyType[
  _1,
  PT1 <: PropertyType[_1],
  _2,
  PT2 <: PropertyType[_2],
  _3,
  PT3 <: PropertyType[_3],
  _4,
  PT4 <: PropertyType[_4],
  _5,
  PT5 <: PropertyType[_5],
  _6,
  PT6 <: PropertyType[_6],
  _7,
  PT7 <: PropertyType[_7],
  _8,
  PT8 <: PropertyType[_8],
  _9,
  PT9 <: PropertyType[_9],
  _10,
  PT10 <: PropertyType[_10],
  _11,
  PT11 <: PropertyType[_11],
  _12,
  PT12 <: PropertyType[_12],
  _13,
  PT13 <: PropertyType[_13],
  _14,
  PT14 <: PropertyType[_14],
  _15,
  PT15 <: PropertyType[_15],
  _16,
  PT16 <: PropertyType[_16],
  _17,
  PT17 <: PropertyType[_17],
  _18,
  PT18 <: PropertyType[_18],
  _19,
  PT19 <: PropertyType[_19],
  _20,
  PT20 <: PropertyType[_20]
](val tpe1:  PT1,
  val tpe2:  PT2,
  val tpe3:  PT3,
  val tpe4:  PT4,
  val tpe5:  PT5,
  val tpe6:  PT6,
  val tpe7:  PT7,
  val tpe8:  PT8,
  val tpe9:  PT9,
  val tpe10: PT10,
  val tpe11: PT11,
  val tpe12: PT12,
  val tpe13: PT13,
  val tpe14: PT14,
  val tpe15: PT15,
  val tpe16: PT16,
  val tpe17: PT17,
  val tpe18: PT18,
  val tpe19: PT19,
  val tpe20: PT20)
    extends PropertyType[
      Tuple20[_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20]
    ] {
  type Tuple = Tuple20[_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20]
  type Type = Tuple20[
    tpe1.Type,
    tpe2.Type,
    tpe3.Type,
    tpe4.Type,
    tpe5.Type,
    tpe6.Type,
    tpe7.Type,
    tpe8.Type,
    tpe9.Type,
    tpe10.Type,
    tpe11.Type,
    tpe12.Type,
    tpe13.Type,
    tpe14.Type,
    tpe15.Type,
    tpe16.Type,
    tpe17.Type,
    tpe18.Type,
    tpe19.Type,
    tpe20.Type
  ]
  type Underlying = Tuple20[
    tpe1.Underlying,
    tpe2.Underlying,
    tpe3.Underlying,
    tpe4.Underlying,
    tpe5.Underlying,
    tpe6.Underlying,
    tpe7.Underlying,
    tpe8.Underlying,
    tpe9.Underlying,
    tpe10.Underlying,
    tpe11.Underlying,
    tpe12.Underlying,
    tpe13.Underlying,
    tpe14.Underlying,
    tpe15.Underlying,
    tpe16.Underlying,
    tpe17.Underlying,
    tpe18.Underlying,
    tpe19.Underlying,
    tpe20.Underlying
  ]

  override def getPropertyType(value: Option[Tuple]): fir.PropertyType =
    fir.TuplePropertyType(
      Seq(
        tpe1.getPropertyType(None),
        tpe2.getPropertyType(None),
        tpe3.getPropertyType(None),
        tpe4.getPropertyType(None),
        tpe5.getPropertyType(None),
        tpe6.getPropertyType(None),
        tpe7.getPropertyType(None),
        tpe8.getPropertyType(None),
        tpe9.getPropertyType(None),
        tpe10.getPropertyType(None),
        tpe11.getPropertyType(None),
        tpe12.getPropertyType(None),
        tpe13.getPropertyType(None),
        tpe14.getPropertyType(None),
        tpe15.getPropertyType(None),
        tpe16.getPropertyType(None),
        tpe17.getPropertyType(None),
        tpe18.getPropertyType(None),
        tpe19.getPropertyType(None),
        tpe20.getPropertyType(None)
      )
    )

  override def convert(value: Underlying, ctx: ir.Component, info: SourceInfo): fir.Expression =
    fir.TuplePropertyValue(
      Seq(
        tpe1.getPropertyType(None) -> tpe1.convert(value._1, ctx, info),
        tpe2.getPropertyType(None) -> tpe2.convert(value._2, ctx, info),
        tpe3.getPropertyType(None) -> tpe3.convert(value._3, ctx, info),
        tpe4.getPropertyType(None) -> tpe4.convert(value._4, ctx, info),
        tpe5.getPropertyType(None) -> tpe5.convert(value._5, ctx, info),
        tpe6.getPropertyType(None) -> tpe6.convert(value._6, ctx, info),
        tpe7.getPropertyType(None) -> tpe7.convert(value._7, ctx, info),
        tpe8.getPropertyType(None) -> tpe8.convert(value._8, ctx, info),
        tpe9.getPropertyType(None) -> tpe9.convert(value._9, ctx, info),
        tpe10.getPropertyType(None) -> tpe10.convert(value._10, ctx, info),
        tpe11.getPropertyType(None) -> tpe11.convert(value._11, ctx, info),
        tpe12.getPropertyType(None) -> tpe12.convert(value._12, ctx, info),
        tpe13.getPropertyType(None) -> tpe13.convert(value._13, ctx, info),
        tpe14.getPropertyType(None) -> tpe14.convert(value._14, ctx, info),
        tpe15.getPropertyType(None) -> tpe15.convert(value._15, ctx, info),
        tpe16.getPropertyType(None) -> tpe16.convert(value._16, ctx, info),
        tpe17.getPropertyType(None) -> tpe17.convert(value._17, ctx, info),
        tpe18.getPropertyType(None) -> tpe18.convert(value._18, ctx, info),
        tpe19.getPropertyType(None) -> tpe19.convert(value._19, ctx, info),
        tpe20.getPropertyType(None) -> tpe20.convert(value._20, ctx, info)
      )
    )

  override def convertUnderlying(value: Tuple): Underlying =
    Tuple20(
      tpe1.convertUnderlying(value._1),
      tpe2.convertUnderlying(value._2),
      tpe3.convertUnderlying(value._3),
      tpe4.convertUnderlying(value._4),
      tpe5.convertUnderlying(value._5),
      tpe6.convertUnderlying(value._6),
      tpe7.convertUnderlying(value._7),
      tpe8.convertUnderlying(value._8),
      tpe9.convertUnderlying(value._9),
      tpe10.convertUnderlying(value._10),
      tpe11.convertUnderlying(value._11),
      tpe12.convertUnderlying(value._12),
      tpe13.convertUnderlying(value._13),
      tpe14.convertUnderlying(value._14),
      tpe15.convertUnderlying(value._15),
      tpe16.convertUnderlying(value._16),
      tpe17.convertUnderlying(value._17),
      tpe18.convertUnderlying(value._18),
      tpe19.convertUnderlying(value._19),
      tpe20.convertUnderlying(value._20)
    )
}

private[chisel3] class Tuple21PropertyType[
  _1,
  PT1 <: PropertyType[_1],
  _2,
  PT2 <: PropertyType[_2],
  _3,
  PT3 <: PropertyType[_3],
  _4,
  PT4 <: PropertyType[_4],
  _5,
  PT5 <: PropertyType[_5],
  _6,
  PT6 <: PropertyType[_6],
  _7,
  PT7 <: PropertyType[_7],
  _8,
  PT8 <: PropertyType[_8],
  _9,
  PT9 <: PropertyType[_9],
  _10,
  PT10 <: PropertyType[_10],
  _11,
  PT11 <: PropertyType[_11],
  _12,
  PT12 <: PropertyType[_12],
  _13,
  PT13 <: PropertyType[_13],
  _14,
  PT14 <: PropertyType[_14],
  _15,
  PT15 <: PropertyType[_15],
  _16,
  PT16 <: PropertyType[_16],
  _17,
  PT17 <: PropertyType[_17],
  _18,
  PT18 <: PropertyType[_18],
  _19,
  PT19 <: PropertyType[_19],
  _20,
  PT20 <: PropertyType[_20],
  _21,
  PT21 <: PropertyType[_21]
](val tpe1:  PT1,
  val tpe2:  PT2,
  val tpe3:  PT3,
  val tpe4:  PT4,
  val tpe5:  PT5,
  val tpe6:  PT6,
  val tpe7:  PT7,
  val tpe8:  PT8,
  val tpe9:  PT9,
  val tpe10: PT10,
  val tpe11: PT11,
  val tpe12: PT12,
  val tpe13: PT13,
  val tpe14: PT14,
  val tpe15: PT15,
  val tpe16: PT16,
  val tpe17: PT17,
  val tpe18: PT18,
  val tpe19: PT19,
  val tpe20: PT20,
  val tpe21: PT21)
    extends PropertyType[
      Tuple21[_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21]
    ] {
  type Tuple = Tuple21[_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21]
  type Type = Tuple21[
    tpe1.Type,
    tpe2.Type,
    tpe3.Type,
    tpe4.Type,
    tpe5.Type,
    tpe6.Type,
    tpe7.Type,
    tpe8.Type,
    tpe9.Type,
    tpe10.Type,
    tpe11.Type,
    tpe12.Type,
    tpe13.Type,
    tpe14.Type,
    tpe15.Type,
    tpe16.Type,
    tpe17.Type,
    tpe18.Type,
    tpe19.Type,
    tpe20.Type,
    tpe21.Type
  ]
  type Underlying = Tuple21[
    tpe1.Underlying,
    tpe2.Underlying,
    tpe3.Underlying,
    tpe4.Underlying,
    tpe5.Underlying,
    tpe6.Underlying,
    tpe7.Underlying,
    tpe8.Underlying,
    tpe9.Underlying,
    tpe10.Underlying,
    tpe11.Underlying,
    tpe12.Underlying,
    tpe13.Underlying,
    tpe14.Underlying,
    tpe15.Underlying,
    tpe16.Underlying,
    tpe17.Underlying,
    tpe18.Underlying,
    tpe19.Underlying,
    tpe20.Underlying,
    tpe21.Underlying
  ]

  override def getPropertyType(value: Option[Tuple]): fir.PropertyType =
    fir.TuplePropertyType(
      Seq(
        tpe1.getPropertyType(None),
        tpe2.getPropertyType(None),
        tpe3.getPropertyType(None),
        tpe4.getPropertyType(None),
        tpe5.getPropertyType(None),
        tpe6.getPropertyType(None),
        tpe7.getPropertyType(None),
        tpe8.getPropertyType(None),
        tpe9.getPropertyType(None),
        tpe10.getPropertyType(None),
        tpe11.getPropertyType(None),
        tpe12.getPropertyType(None),
        tpe13.getPropertyType(None),
        tpe14.getPropertyType(None),
        tpe15.getPropertyType(None),
        tpe16.getPropertyType(None),
        tpe17.getPropertyType(None),
        tpe18.getPropertyType(None),
        tpe19.getPropertyType(None),
        tpe20.getPropertyType(None),
        tpe21.getPropertyType(None)
      )
    )

  override def convert(value: Underlying, ctx: ir.Component, info: SourceInfo): fir.Expression =
    fir.TuplePropertyValue(
      Seq(
        tpe1.getPropertyType(None) -> tpe1.convert(value._1, ctx, info),
        tpe2.getPropertyType(None) -> tpe2.convert(value._2, ctx, info),
        tpe3.getPropertyType(None) -> tpe3.convert(value._3, ctx, info),
        tpe4.getPropertyType(None) -> tpe4.convert(value._4, ctx, info),
        tpe5.getPropertyType(None) -> tpe5.convert(value._5, ctx, info),
        tpe6.getPropertyType(None) -> tpe6.convert(value._6, ctx, info),
        tpe7.getPropertyType(None) -> tpe7.convert(value._7, ctx, info),
        tpe8.getPropertyType(None) -> tpe8.convert(value._8, ctx, info),
        tpe9.getPropertyType(None) -> tpe9.convert(value._9, ctx, info),
        tpe10.getPropertyType(None) -> tpe10.convert(value._10, ctx, info),
        tpe11.getPropertyType(None) -> tpe11.convert(value._11, ctx, info),
        tpe12.getPropertyType(None) -> tpe12.convert(value._12, ctx, info),
        tpe13.getPropertyType(None) -> tpe13.convert(value._13, ctx, info),
        tpe14.getPropertyType(None) -> tpe14.convert(value._14, ctx, info),
        tpe15.getPropertyType(None) -> tpe15.convert(value._15, ctx, info),
        tpe16.getPropertyType(None) -> tpe16.convert(value._16, ctx, info),
        tpe17.getPropertyType(None) -> tpe17.convert(value._17, ctx, info),
        tpe18.getPropertyType(None) -> tpe18.convert(value._18, ctx, info),
        tpe19.getPropertyType(None) -> tpe19.convert(value._19, ctx, info),
        tpe20.getPropertyType(None) -> tpe20.convert(value._20, ctx, info),
        tpe21.getPropertyType(None) -> tpe21.convert(value._21, ctx, info)
      )
    )

  override def convertUnderlying(value: Tuple): Underlying =
    Tuple21(
      tpe1.convertUnderlying(value._1),
      tpe2.convertUnderlying(value._2),
      tpe3.convertUnderlying(value._3),
      tpe4.convertUnderlying(value._4),
      tpe5.convertUnderlying(value._5),
      tpe6.convertUnderlying(value._6),
      tpe7.convertUnderlying(value._7),
      tpe8.convertUnderlying(value._8),
      tpe9.convertUnderlying(value._9),
      tpe10.convertUnderlying(value._10),
      tpe11.convertUnderlying(value._11),
      tpe12.convertUnderlying(value._12),
      tpe13.convertUnderlying(value._13),
      tpe14.convertUnderlying(value._14),
      tpe15.convertUnderlying(value._15),
      tpe16.convertUnderlying(value._16),
      tpe17.convertUnderlying(value._17),
      tpe18.convertUnderlying(value._18),
      tpe19.convertUnderlying(value._19),
      tpe20.convertUnderlying(value._20),
      tpe21.convertUnderlying(value._21)
    )
}

private[chisel3] class Tuple22PropertyType[
  _1,
  PT1 <: PropertyType[_1],
  _2,
  PT2 <: PropertyType[_2],
  _3,
  PT3 <: PropertyType[_3],
  _4,
  PT4 <: PropertyType[_4],
  _5,
  PT5 <: PropertyType[_5],
  _6,
  PT6 <: PropertyType[_6],
  _7,
  PT7 <: PropertyType[_7],
  _8,
  PT8 <: PropertyType[_8],
  _9,
  PT9 <: PropertyType[_9],
  _10,
  PT10 <: PropertyType[_10],
  _11,
  PT11 <: PropertyType[_11],
  _12,
  PT12 <: PropertyType[_12],
  _13,
  PT13 <: PropertyType[_13],
  _14,
  PT14 <: PropertyType[_14],
  _15,
  PT15 <: PropertyType[_15],
  _16,
  PT16 <: PropertyType[_16],
  _17,
  PT17 <: PropertyType[_17],
  _18,
  PT18 <: PropertyType[_18],
  _19,
  PT19 <: PropertyType[_19],
  _20,
  PT20 <: PropertyType[_20],
  _21,
  PT21 <: PropertyType[_21],
  _22,
  PT22 <: PropertyType[_22]
](val tpe1:  PT1,
  val tpe2:  PT2,
  val tpe3:  PT3,
  val tpe4:  PT4,
  val tpe5:  PT5,
  val tpe6:  PT6,
  val tpe7:  PT7,
  val tpe8:  PT8,
  val tpe9:  PT9,
  val tpe10: PT10,
  val tpe11: PT11,
  val tpe12: PT12,
  val tpe13: PT13,
  val tpe14: PT14,
  val tpe15: PT15,
  val tpe16: PT16,
  val tpe17: PT17,
  val tpe18: PT18,
  val tpe19: PT19,
  val tpe20: PT20,
  val tpe21: PT21,
  val tpe22: PT22)
    extends PropertyType[
      Tuple22[_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22]
    ] {
  type Tuple =
    Tuple22[_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22]
  type Type = Tuple22[
    tpe1.Type,
    tpe2.Type,
    tpe3.Type,
    tpe4.Type,
    tpe5.Type,
    tpe6.Type,
    tpe7.Type,
    tpe8.Type,
    tpe9.Type,
    tpe10.Type,
    tpe11.Type,
    tpe12.Type,
    tpe13.Type,
    tpe14.Type,
    tpe15.Type,
    tpe16.Type,
    tpe17.Type,
    tpe18.Type,
    tpe19.Type,
    tpe20.Type,
    tpe21.Type,
    tpe22.Type
  ]
  type Underlying = Tuple22[
    tpe1.Underlying,
    tpe2.Underlying,
    tpe3.Underlying,
    tpe4.Underlying,
    tpe5.Underlying,
    tpe6.Underlying,
    tpe7.Underlying,
    tpe8.Underlying,
    tpe9.Underlying,
    tpe10.Underlying,
    tpe11.Underlying,
    tpe12.Underlying,
    tpe13.Underlying,
    tpe14.Underlying,
    tpe15.Underlying,
    tpe16.Underlying,
    tpe17.Underlying,
    tpe18.Underlying,
    tpe19.Underlying,
    tpe20.Underlying,
    tpe21.Underlying,
    tpe22.Underlying
  ]

  override def getPropertyType(value: Option[Tuple]): fir.PropertyType =
    fir.TuplePropertyType(
      Seq(
        tpe1.getPropertyType(None),
        tpe2.getPropertyType(None),
        tpe3.getPropertyType(None),
        tpe4.getPropertyType(None),
        tpe5.getPropertyType(None),
        tpe6.getPropertyType(None),
        tpe7.getPropertyType(None),
        tpe8.getPropertyType(None),
        tpe9.getPropertyType(None),
        tpe10.getPropertyType(None),
        tpe11.getPropertyType(None),
        tpe12.getPropertyType(None),
        tpe13.getPropertyType(None),
        tpe14.getPropertyType(None),
        tpe15.getPropertyType(None),
        tpe16.getPropertyType(None),
        tpe17.getPropertyType(None),
        tpe18.getPropertyType(None),
        tpe19.getPropertyType(None),
        tpe20.getPropertyType(None),
        tpe21.getPropertyType(None),
        tpe22.getPropertyType(None)
      )
    )

  override def convert(value: Underlying, ctx: ir.Component, info: SourceInfo): fir.Expression =
    fir.TuplePropertyValue(
      Seq(
        tpe1.getPropertyType(None) -> tpe1.convert(value._1, ctx, info),
        tpe2.getPropertyType(None) -> tpe2.convert(value._2, ctx, info),
        tpe3.getPropertyType(None) -> tpe3.convert(value._3, ctx, info),
        tpe4.getPropertyType(None) -> tpe4.convert(value._4, ctx, info),
        tpe5.getPropertyType(None) -> tpe5.convert(value._5, ctx, info),
        tpe6.getPropertyType(None) -> tpe6.convert(value._6, ctx, info),
        tpe7.getPropertyType(None) -> tpe7.convert(value._7, ctx, info),
        tpe8.getPropertyType(None) -> tpe8.convert(value._8, ctx, info),
        tpe9.getPropertyType(None) -> tpe9.convert(value._9, ctx, info),
        tpe10.getPropertyType(None) -> tpe10.convert(value._10, ctx, info),
        tpe11.getPropertyType(None) -> tpe11.convert(value._11, ctx, info),
        tpe12.getPropertyType(None) -> tpe12.convert(value._12, ctx, info),
        tpe13.getPropertyType(None) -> tpe13.convert(value._13, ctx, info),
        tpe14.getPropertyType(None) -> tpe14.convert(value._14, ctx, info),
        tpe15.getPropertyType(None) -> tpe15.convert(value._15, ctx, info),
        tpe16.getPropertyType(None) -> tpe16.convert(value._16, ctx, info),
        tpe17.getPropertyType(None) -> tpe17.convert(value._17, ctx, info),
        tpe18.getPropertyType(None) -> tpe18.convert(value._18, ctx, info),
        tpe19.getPropertyType(None) -> tpe19.convert(value._19, ctx, info),
        tpe20.getPropertyType(None) -> tpe20.convert(value._20, ctx, info),
        tpe21.getPropertyType(None) -> tpe21.convert(value._21, ctx, info),
        tpe22.getPropertyType(None) -> tpe22.convert(value._22, ctx, info)
      )
    )

  override def convertUnderlying(value: Tuple): Underlying =
    Tuple22(
      tpe1.convertUnderlying(value._1),
      tpe2.convertUnderlying(value._2),
      tpe3.convertUnderlying(value._3),
      tpe4.convertUnderlying(value._4),
      tpe5.convertUnderlying(value._5),
      tpe6.convertUnderlying(value._6),
      tpe7.convertUnderlying(value._7),
      tpe8.convertUnderlying(value._8),
      tpe9.convertUnderlying(value._9),
      tpe10.convertUnderlying(value._10),
      tpe11.convertUnderlying(value._11),
      tpe12.convertUnderlying(value._12),
      tpe13.convertUnderlying(value._13),
      tpe14.convertUnderlying(value._14),
      tpe15.convertUnderlying(value._15),
      tpe16.convertUnderlying(value._16),
      tpe17.convertUnderlying(value._17),
      tpe18.convertUnderlying(value._18),
      tpe19.convertUnderlying(value._19),
      tpe20.convertUnderlying(value._20),
      tpe21.convertUnderlying(value._21),
      tpe22.convertUnderlying(value._22)
    )
}

private[chisel3] trait LowPriorityTuplePropertyTypeInstances {

  implicit def tuple1PropertyTypeInstance[_1](
    implicit tpe1: RecursivePropertyType[_1]
  ) = new Tuple1PropertyType[_1, tpe1.type](
    tpe1
  ) with RecursivePropertyType[Tuple1[_1]]

  implicit def tuple2PropertyTypeInstance[_1, _2](
    implicit tpe1: RecursivePropertyType[_1],
    tpe2:          RecursivePropertyType[_2]
  ) = new Tuple2PropertyType[_1, tpe1.type, _2, tpe2.type](
    tpe1,
    tpe2
  ) with RecursivePropertyType[Tuple2[_1, _2]]

  implicit def tuple3PropertyTypeInstance[_1, _2, _3](
    implicit tpe1: RecursivePropertyType[_1],
    tpe2:          RecursivePropertyType[_2],
    tpe3:          RecursivePropertyType[_3]
  ) = new Tuple3PropertyType[_1, tpe1.type, _2, tpe2.type, _3, tpe3.type](
    tpe1,
    tpe2,
    tpe3
  ) with RecursivePropertyType[Tuple3[_1, _2, _3]]

  implicit def tuple4PropertyTypeInstance[_1, _2, _3, _4](
    implicit tpe1: RecursivePropertyType[_1],
    tpe2:          RecursivePropertyType[_2],
    tpe3:          RecursivePropertyType[_3],
    tpe4:          RecursivePropertyType[_4]
  ) = new Tuple4PropertyType[_1, tpe1.type, _2, tpe2.type, _3, tpe3.type, _4, tpe4.type](
    tpe1,
    tpe2,
    tpe3,
    tpe4
  ) with RecursivePropertyType[Tuple4[_1, _2, _3, _4]]

  implicit def tuple5PropertyTypeInstance[_1, _2, _3, _4, _5](
    implicit tpe1: RecursivePropertyType[_1],
    tpe2:          RecursivePropertyType[_2],
    tpe3:          RecursivePropertyType[_3],
    tpe4:          RecursivePropertyType[_4],
    tpe5:          RecursivePropertyType[_5]
  ) = new Tuple5PropertyType[_1, tpe1.type, _2, tpe2.type, _3, tpe3.type, _4, tpe4.type, _5, tpe5.type](
    tpe1,
    tpe2,
    tpe3,
    tpe4,
    tpe5
  ) with RecursivePropertyType[Tuple5[_1, _2, _3, _4, _5]]

  implicit def tuple6PropertyTypeInstance[_1, _2, _3, _4, _5, _6](
    implicit tpe1: RecursivePropertyType[_1],
    tpe2:          RecursivePropertyType[_2],
    tpe3:          RecursivePropertyType[_3],
    tpe4:          RecursivePropertyType[_4],
    tpe5:          RecursivePropertyType[_5],
    tpe6:          RecursivePropertyType[_6]
  ) = new Tuple6PropertyType[_1, tpe1.type, _2, tpe2.type, _3, tpe3.type, _4, tpe4.type, _5, tpe5.type, _6, tpe6.type](
    tpe1,
    tpe2,
    tpe3,
    tpe4,
    tpe5,
    tpe6
  ) with RecursivePropertyType[Tuple6[_1, _2, _3, _4, _5, _6]]

  implicit def tuple7PropertyTypeInstance[_1, _2, _3, _4, _5, _6, _7](
    implicit tpe1: RecursivePropertyType[_1],
    tpe2:          RecursivePropertyType[_2],
    tpe3:          RecursivePropertyType[_3],
    tpe4:          RecursivePropertyType[_4],
    tpe5:          RecursivePropertyType[_5],
    tpe6:          RecursivePropertyType[_6],
    tpe7:          RecursivePropertyType[_7]
  ) = new Tuple7PropertyType[
    _1,
    tpe1.type,
    _2,
    tpe2.type,
    _3,
    tpe3.type,
    _4,
    tpe4.type,
    _5,
    tpe5.type,
    _6,
    tpe6.type,
    _7,
    tpe7.type
  ](
    tpe1,
    tpe2,
    tpe3,
    tpe4,
    tpe5,
    tpe6,
    tpe7
  ) with RecursivePropertyType[Tuple7[_1, _2, _3, _4, _5, _6, _7]]

  implicit def tuple8PropertyTypeInstance[_1, _2, _3, _4, _5, _6, _7, _8](
    implicit tpe1: RecursivePropertyType[_1],
    tpe2:          RecursivePropertyType[_2],
    tpe3:          RecursivePropertyType[_3],
    tpe4:          RecursivePropertyType[_4],
    tpe5:          RecursivePropertyType[_5],
    tpe6:          RecursivePropertyType[_6],
    tpe7:          RecursivePropertyType[_7],
    tpe8:          RecursivePropertyType[_8]
  ) = new Tuple8PropertyType[
    _1,
    tpe1.type,
    _2,
    tpe2.type,
    _3,
    tpe3.type,
    _4,
    tpe4.type,
    _5,
    tpe5.type,
    _6,
    tpe6.type,
    _7,
    tpe7.type,
    _8,
    tpe8.type
  ](
    tpe1,
    tpe2,
    tpe3,
    tpe4,
    tpe5,
    tpe6,
    tpe7,
    tpe8
  ) with RecursivePropertyType[Tuple8[_1, _2, _3, _4, _5, _6, _7, _8]]

  implicit def tuple9PropertyTypeInstance[_1, _2, _3, _4, _5, _6, _7, _8, _9](
    implicit tpe1: RecursivePropertyType[_1],
    tpe2:          RecursivePropertyType[_2],
    tpe3:          RecursivePropertyType[_3],
    tpe4:          RecursivePropertyType[_4],
    tpe5:          RecursivePropertyType[_5],
    tpe6:          RecursivePropertyType[_6],
    tpe7:          RecursivePropertyType[_7],
    tpe8:          RecursivePropertyType[_8],
    tpe9:          RecursivePropertyType[_9]
  ) = new Tuple9PropertyType[
    _1,
    tpe1.type,
    _2,
    tpe2.type,
    _3,
    tpe3.type,
    _4,
    tpe4.type,
    _5,
    tpe5.type,
    _6,
    tpe6.type,
    _7,
    tpe7.type,
    _8,
    tpe8.type,
    _9,
    tpe9.type
  ](
    tpe1,
    tpe2,
    tpe3,
    tpe4,
    tpe5,
    tpe6,
    tpe7,
    tpe8,
    tpe9
  ) with RecursivePropertyType[Tuple9[_1, _2, _3, _4, _5, _6, _7, _8, _9]]

  implicit def tuple10PropertyTypeInstance[_1, _2, _3, _4, _5, _6, _7, _8, _9, _10](
    implicit tpe1: RecursivePropertyType[_1],
    tpe2:          RecursivePropertyType[_2],
    tpe3:          RecursivePropertyType[_3],
    tpe4:          RecursivePropertyType[_4],
    tpe5:          RecursivePropertyType[_5],
    tpe6:          RecursivePropertyType[_6],
    tpe7:          RecursivePropertyType[_7],
    tpe8:          RecursivePropertyType[_8],
    tpe9:          RecursivePropertyType[_9],
    tpe10:         RecursivePropertyType[_10]
  ) = new Tuple10PropertyType[
    _1,
    tpe1.type,
    _2,
    tpe2.type,
    _3,
    tpe3.type,
    _4,
    tpe4.type,
    _5,
    tpe5.type,
    _6,
    tpe6.type,
    _7,
    tpe7.type,
    _8,
    tpe8.type,
    _9,
    tpe9.type,
    _10,
    tpe10.type
  ](
    tpe1,
    tpe2,
    tpe3,
    tpe4,
    tpe5,
    tpe6,
    tpe7,
    tpe8,
    tpe9,
    tpe10
  ) with RecursivePropertyType[Tuple10[_1, _2, _3, _4, _5, _6, _7, _8, _9, _10]]

  implicit def tuple11PropertyTypeInstance[_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11](
    implicit tpe1: RecursivePropertyType[_1],
    tpe2:          RecursivePropertyType[_2],
    tpe3:          RecursivePropertyType[_3],
    tpe4:          RecursivePropertyType[_4],
    tpe5:          RecursivePropertyType[_5],
    tpe6:          RecursivePropertyType[_6],
    tpe7:          RecursivePropertyType[_7],
    tpe8:          RecursivePropertyType[_8],
    tpe9:          RecursivePropertyType[_9],
    tpe10:         RecursivePropertyType[_10],
    tpe11:         RecursivePropertyType[_11]
  ) = new Tuple11PropertyType[
    _1,
    tpe1.type,
    _2,
    tpe2.type,
    _3,
    tpe3.type,
    _4,
    tpe4.type,
    _5,
    tpe5.type,
    _6,
    tpe6.type,
    _7,
    tpe7.type,
    _8,
    tpe8.type,
    _9,
    tpe9.type,
    _10,
    tpe10.type,
    _11,
    tpe11.type
  ](
    tpe1,
    tpe2,
    tpe3,
    tpe4,
    tpe5,
    tpe6,
    tpe7,
    tpe8,
    tpe9,
    tpe10,
    tpe11
  ) with RecursivePropertyType[Tuple11[_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11]]

  implicit def tuple12PropertyTypeInstance[_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12](
    implicit tpe1: RecursivePropertyType[_1],
    tpe2:          RecursivePropertyType[_2],
    tpe3:          RecursivePropertyType[_3],
    tpe4:          RecursivePropertyType[_4],
    tpe5:          RecursivePropertyType[_5],
    tpe6:          RecursivePropertyType[_6],
    tpe7:          RecursivePropertyType[_7],
    tpe8:          RecursivePropertyType[_8],
    tpe9:          RecursivePropertyType[_9],
    tpe10:         RecursivePropertyType[_10],
    tpe11:         RecursivePropertyType[_11],
    tpe12:         RecursivePropertyType[_12]
  ) = new Tuple12PropertyType[
    _1,
    tpe1.type,
    _2,
    tpe2.type,
    _3,
    tpe3.type,
    _4,
    tpe4.type,
    _5,
    tpe5.type,
    _6,
    tpe6.type,
    _7,
    tpe7.type,
    _8,
    tpe8.type,
    _9,
    tpe9.type,
    _10,
    tpe10.type,
    _11,
    tpe11.type,
    _12,
    tpe12.type
  ](
    tpe1,
    tpe2,
    tpe3,
    tpe4,
    tpe5,
    tpe6,
    tpe7,
    tpe8,
    tpe9,
    tpe10,
    tpe11,
    tpe12
  ) with RecursivePropertyType[Tuple12[_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12]]

  implicit def tuple13PropertyTypeInstance[_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13](
    implicit tpe1: RecursivePropertyType[_1],
    tpe2:          RecursivePropertyType[_2],
    tpe3:          RecursivePropertyType[_3],
    tpe4:          RecursivePropertyType[_4],
    tpe5:          RecursivePropertyType[_5],
    tpe6:          RecursivePropertyType[_6],
    tpe7:          RecursivePropertyType[_7],
    tpe8:          RecursivePropertyType[_8],
    tpe9:          RecursivePropertyType[_9],
    tpe10:         RecursivePropertyType[_10],
    tpe11:         RecursivePropertyType[_11],
    tpe12:         RecursivePropertyType[_12],
    tpe13:         RecursivePropertyType[_13]
  ) = new Tuple13PropertyType[
    _1,
    tpe1.type,
    _2,
    tpe2.type,
    _3,
    tpe3.type,
    _4,
    tpe4.type,
    _5,
    tpe5.type,
    _6,
    tpe6.type,
    _7,
    tpe7.type,
    _8,
    tpe8.type,
    _9,
    tpe9.type,
    _10,
    tpe10.type,
    _11,
    tpe11.type,
    _12,
    tpe12.type,
    _13,
    tpe13.type
  ](
    tpe1,
    tpe2,
    tpe3,
    tpe4,
    tpe5,
    tpe6,
    tpe7,
    tpe8,
    tpe9,
    tpe10,
    tpe11,
    tpe12,
    tpe13
  ) with RecursivePropertyType[Tuple13[_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13]]

  implicit def tuple14PropertyTypeInstance[_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14](
    implicit tpe1: RecursivePropertyType[_1],
    tpe2:          RecursivePropertyType[_2],
    tpe3:          RecursivePropertyType[_3],
    tpe4:          RecursivePropertyType[_4],
    tpe5:          RecursivePropertyType[_5],
    tpe6:          RecursivePropertyType[_6],
    tpe7:          RecursivePropertyType[_7],
    tpe8:          RecursivePropertyType[_8],
    tpe9:          RecursivePropertyType[_9],
    tpe10:         RecursivePropertyType[_10],
    tpe11:         RecursivePropertyType[_11],
    tpe12:         RecursivePropertyType[_12],
    tpe13:         RecursivePropertyType[_13],
    tpe14:         RecursivePropertyType[_14]
  ) = new Tuple14PropertyType[
    _1,
    tpe1.type,
    _2,
    tpe2.type,
    _3,
    tpe3.type,
    _4,
    tpe4.type,
    _5,
    tpe5.type,
    _6,
    tpe6.type,
    _7,
    tpe7.type,
    _8,
    tpe8.type,
    _9,
    tpe9.type,
    _10,
    tpe10.type,
    _11,
    tpe11.type,
    _12,
    tpe12.type,
    _13,
    tpe13.type,
    _14,
    tpe14.type
  ](
    tpe1,
    tpe2,
    tpe3,
    tpe4,
    tpe5,
    tpe6,
    tpe7,
    tpe8,
    tpe9,
    tpe10,
    tpe11,
    tpe12,
    tpe13,
    tpe14
  ) with RecursivePropertyType[Tuple14[_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14]]

  implicit def tuple15PropertyTypeInstance[_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15](
    implicit tpe1: RecursivePropertyType[_1],
    tpe2:          RecursivePropertyType[_2],
    tpe3:          RecursivePropertyType[_3],
    tpe4:          RecursivePropertyType[_4],
    tpe5:          RecursivePropertyType[_5],
    tpe6:          RecursivePropertyType[_6],
    tpe7:          RecursivePropertyType[_7],
    tpe8:          RecursivePropertyType[_8],
    tpe9:          RecursivePropertyType[_9],
    tpe10:         RecursivePropertyType[_10],
    tpe11:         RecursivePropertyType[_11],
    tpe12:         RecursivePropertyType[_12],
    tpe13:         RecursivePropertyType[_13],
    tpe14:         RecursivePropertyType[_14],
    tpe15:         RecursivePropertyType[_15]
  ) = new Tuple15PropertyType[
    _1,
    tpe1.type,
    _2,
    tpe2.type,
    _3,
    tpe3.type,
    _4,
    tpe4.type,
    _5,
    tpe5.type,
    _6,
    tpe6.type,
    _7,
    tpe7.type,
    _8,
    tpe8.type,
    _9,
    tpe9.type,
    _10,
    tpe10.type,
    _11,
    tpe11.type,
    _12,
    tpe12.type,
    _13,
    tpe13.type,
    _14,
    tpe14.type,
    _15,
    tpe15.type
  ](
    tpe1,
    tpe2,
    tpe3,
    tpe4,
    tpe5,
    tpe6,
    tpe7,
    tpe8,
    tpe9,
    tpe10,
    tpe11,
    tpe12,
    tpe13,
    tpe14,
    tpe15
  ) with RecursivePropertyType[Tuple15[_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15]]

  implicit def tuple16PropertyTypeInstance[_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16](
    implicit tpe1: RecursivePropertyType[_1],
    tpe2:          RecursivePropertyType[_2],
    tpe3:          RecursivePropertyType[_3],
    tpe4:          RecursivePropertyType[_4],
    tpe5:          RecursivePropertyType[_5],
    tpe6:          RecursivePropertyType[_6],
    tpe7:          RecursivePropertyType[_7],
    tpe8:          RecursivePropertyType[_8],
    tpe9:          RecursivePropertyType[_9],
    tpe10:         RecursivePropertyType[_10],
    tpe11:         RecursivePropertyType[_11],
    tpe12:         RecursivePropertyType[_12],
    tpe13:         RecursivePropertyType[_13],
    tpe14:         RecursivePropertyType[_14],
    tpe15:         RecursivePropertyType[_15],
    tpe16:         RecursivePropertyType[_16]
  ) = new Tuple16PropertyType[
    _1,
    tpe1.type,
    _2,
    tpe2.type,
    _3,
    tpe3.type,
    _4,
    tpe4.type,
    _5,
    tpe5.type,
    _6,
    tpe6.type,
    _7,
    tpe7.type,
    _8,
    tpe8.type,
    _9,
    tpe9.type,
    _10,
    tpe10.type,
    _11,
    tpe11.type,
    _12,
    tpe12.type,
    _13,
    tpe13.type,
    _14,
    tpe14.type,
    _15,
    tpe15.type,
    _16,
    tpe16.type
  ](
    tpe1,
    tpe2,
    tpe3,
    tpe4,
    tpe5,
    tpe6,
    tpe7,
    tpe8,
    tpe9,
    tpe10,
    tpe11,
    tpe12,
    tpe13,
    tpe14,
    tpe15,
    tpe16
  ) with RecursivePropertyType[Tuple16[_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16]]

  implicit def tuple17PropertyTypeInstance[_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17](
    implicit tpe1: RecursivePropertyType[_1],
    tpe2:          RecursivePropertyType[_2],
    tpe3:          RecursivePropertyType[_3],
    tpe4:          RecursivePropertyType[_4],
    tpe5:          RecursivePropertyType[_5],
    tpe6:          RecursivePropertyType[_6],
    tpe7:          RecursivePropertyType[_7],
    tpe8:          RecursivePropertyType[_8],
    tpe9:          RecursivePropertyType[_9],
    tpe10:         RecursivePropertyType[_10],
    tpe11:         RecursivePropertyType[_11],
    tpe12:         RecursivePropertyType[_12],
    tpe13:         RecursivePropertyType[_13],
    tpe14:         RecursivePropertyType[_14],
    tpe15:         RecursivePropertyType[_15],
    tpe16:         RecursivePropertyType[_16],
    tpe17:         RecursivePropertyType[_17]
  ) = new Tuple17PropertyType[
    _1,
    tpe1.type,
    _2,
    tpe2.type,
    _3,
    tpe3.type,
    _4,
    tpe4.type,
    _5,
    tpe5.type,
    _6,
    tpe6.type,
    _7,
    tpe7.type,
    _8,
    tpe8.type,
    _9,
    tpe9.type,
    _10,
    tpe10.type,
    _11,
    tpe11.type,
    _12,
    tpe12.type,
    _13,
    tpe13.type,
    _14,
    tpe14.type,
    _15,
    tpe15.type,
    _16,
    tpe16.type,
    _17,
    tpe17.type
  ](
    tpe1,
    tpe2,
    tpe3,
    tpe4,
    tpe5,
    tpe6,
    tpe7,
    tpe8,
    tpe9,
    tpe10,
    tpe11,
    tpe12,
    tpe13,
    tpe14,
    tpe15,
    tpe16,
    tpe17
  ) with RecursivePropertyType[Tuple17[_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17]]

  implicit def tuple18PropertyTypeInstance[
    _1,
    _2,
    _3,
    _4,
    _5,
    _6,
    _7,
    _8,
    _9,
    _10,
    _11,
    _12,
    _13,
    _14,
    _15,
    _16,
    _17,
    _18
  ](
    implicit tpe1: RecursivePropertyType[_1],
    tpe2:          RecursivePropertyType[_2],
    tpe3:          RecursivePropertyType[_3],
    tpe4:          RecursivePropertyType[_4],
    tpe5:          RecursivePropertyType[_5],
    tpe6:          RecursivePropertyType[_6],
    tpe7:          RecursivePropertyType[_7],
    tpe8:          RecursivePropertyType[_8],
    tpe9:          RecursivePropertyType[_9],
    tpe10:         RecursivePropertyType[_10],
    tpe11:         RecursivePropertyType[_11],
    tpe12:         RecursivePropertyType[_12],
    tpe13:         RecursivePropertyType[_13],
    tpe14:         RecursivePropertyType[_14],
    tpe15:         RecursivePropertyType[_15],
    tpe16:         RecursivePropertyType[_16],
    tpe17:         RecursivePropertyType[_17],
    tpe18:         RecursivePropertyType[_18]
  ) = new Tuple18PropertyType[
    _1,
    tpe1.type,
    _2,
    tpe2.type,
    _3,
    tpe3.type,
    _4,
    tpe4.type,
    _5,
    tpe5.type,
    _6,
    tpe6.type,
    _7,
    tpe7.type,
    _8,
    tpe8.type,
    _9,
    tpe9.type,
    _10,
    tpe10.type,
    _11,
    tpe11.type,
    _12,
    tpe12.type,
    _13,
    tpe13.type,
    _14,
    tpe14.type,
    _15,
    tpe15.type,
    _16,
    tpe16.type,
    _17,
    tpe17.type,
    _18,
    tpe18.type
  ](
    tpe1,
    tpe2,
    tpe3,
    tpe4,
    tpe5,
    tpe6,
    tpe7,
    tpe8,
    tpe9,
    tpe10,
    tpe11,
    tpe12,
    tpe13,
    tpe14,
    tpe15,
    tpe16,
    tpe17,
    tpe18
  ) with RecursivePropertyType[Tuple18[_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18]]

  implicit def tuple19PropertyTypeInstance[
    _1,
    _2,
    _3,
    _4,
    _5,
    _6,
    _7,
    _8,
    _9,
    _10,
    _11,
    _12,
    _13,
    _14,
    _15,
    _16,
    _17,
    _18,
    _19
  ](
    implicit tpe1: RecursivePropertyType[_1],
    tpe2:          RecursivePropertyType[_2],
    tpe3:          RecursivePropertyType[_3],
    tpe4:          RecursivePropertyType[_4],
    tpe5:          RecursivePropertyType[_5],
    tpe6:          RecursivePropertyType[_6],
    tpe7:          RecursivePropertyType[_7],
    tpe8:          RecursivePropertyType[_8],
    tpe9:          RecursivePropertyType[_9],
    tpe10:         RecursivePropertyType[_10],
    tpe11:         RecursivePropertyType[_11],
    tpe12:         RecursivePropertyType[_12],
    tpe13:         RecursivePropertyType[_13],
    tpe14:         RecursivePropertyType[_14],
    tpe15:         RecursivePropertyType[_15],
    tpe16:         RecursivePropertyType[_16],
    tpe17:         RecursivePropertyType[_17],
    tpe18:         RecursivePropertyType[_18],
    tpe19:         RecursivePropertyType[_19]
  ) = new Tuple19PropertyType[
    _1,
    tpe1.type,
    _2,
    tpe2.type,
    _3,
    tpe3.type,
    _4,
    tpe4.type,
    _5,
    tpe5.type,
    _6,
    tpe6.type,
    _7,
    tpe7.type,
    _8,
    tpe8.type,
    _9,
    tpe9.type,
    _10,
    tpe10.type,
    _11,
    tpe11.type,
    _12,
    tpe12.type,
    _13,
    tpe13.type,
    _14,
    tpe14.type,
    _15,
    tpe15.type,
    _16,
    tpe16.type,
    _17,
    tpe17.type,
    _18,
    tpe18.type,
    _19,
    tpe19.type
  ](
    tpe1,
    tpe2,
    tpe3,
    tpe4,
    tpe5,
    tpe6,
    tpe7,
    tpe8,
    tpe9,
    tpe10,
    tpe11,
    tpe12,
    tpe13,
    tpe14,
    tpe15,
    tpe16,
    tpe17,
    tpe18,
    tpe19
  ) with RecursivePropertyType[
      Tuple19[_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19]
    ]

  implicit def tuple20PropertyTypeInstance[
    _1,
    _2,
    _3,
    _4,
    _5,
    _6,
    _7,
    _8,
    _9,
    _10,
    _11,
    _12,
    _13,
    _14,
    _15,
    _16,
    _17,
    _18,
    _19,
    _20
  ](
    implicit tpe1: RecursivePropertyType[_1],
    tpe2:          RecursivePropertyType[_2],
    tpe3:          RecursivePropertyType[_3],
    tpe4:          RecursivePropertyType[_4],
    tpe5:          RecursivePropertyType[_5],
    tpe6:          RecursivePropertyType[_6],
    tpe7:          RecursivePropertyType[_7],
    tpe8:          RecursivePropertyType[_8],
    tpe9:          RecursivePropertyType[_9],
    tpe10:         RecursivePropertyType[_10],
    tpe11:         RecursivePropertyType[_11],
    tpe12:         RecursivePropertyType[_12],
    tpe13:         RecursivePropertyType[_13],
    tpe14:         RecursivePropertyType[_14],
    tpe15:         RecursivePropertyType[_15],
    tpe16:         RecursivePropertyType[_16],
    tpe17:         RecursivePropertyType[_17],
    tpe18:         RecursivePropertyType[_18],
    tpe19:         RecursivePropertyType[_19],
    tpe20:         RecursivePropertyType[_20]
  ) = new Tuple20PropertyType[
    _1,
    tpe1.type,
    _2,
    tpe2.type,
    _3,
    tpe3.type,
    _4,
    tpe4.type,
    _5,
    tpe5.type,
    _6,
    tpe6.type,
    _7,
    tpe7.type,
    _8,
    tpe8.type,
    _9,
    tpe9.type,
    _10,
    tpe10.type,
    _11,
    tpe11.type,
    _12,
    tpe12.type,
    _13,
    tpe13.type,
    _14,
    tpe14.type,
    _15,
    tpe15.type,
    _16,
    tpe16.type,
    _17,
    tpe17.type,
    _18,
    tpe18.type,
    _19,
    tpe19.type,
    _20,
    tpe20.type
  ](
    tpe1,
    tpe2,
    tpe3,
    tpe4,
    tpe5,
    tpe6,
    tpe7,
    tpe8,
    tpe9,
    tpe10,
    tpe11,
    tpe12,
    tpe13,
    tpe14,
    tpe15,
    tpe16,
    tpe17,
    tpe18,
    tpe19,
    tpe20
  ) with RecursivePropertyType[
      Tuple20[_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20]
    ]

  implicit def tuple21PropertyTypeInstance[
    _1,
    _2,
    _3,
    _4,
    _5,
    _6,
    _7,
    _8,
    _9,
    _10,
    _11,
    _12,
    _13,
    _14,
    _15,
    _16,
    _17,
    _18,
    _19,
    _20,
    _21
  ](
    implicit tpe1: RecursivePropertyType[_1],
    tpe2:          RecursivePropertyType[_2],
    tpe3:          RecursivePropertyType[_3],
    tpe4:          RecursivePropertyType[_4],
    tpe5:          RecursivePropertyType[_5],
    tpe6:          RecursivePropertyType[_6],
    tpe7:          RecursivePropertyType[_7],
    tpe8:          RecursivePropertyType[_8],
    tpe9:          RecursivePropertyType[_9],
    tpe10:         RecursivePropertyType[_10],
    tpe11:         RecursivePropertyType[_11],
    tpe12:         RecursivePropertyType[_12],
    tpe13:         RecursivePropertyType[_13],
    tpe14:         RecursivePropertyType[_14],
    tpe15:         RecursivePropertyType[_15],
    tpe16:         RecursivePropertyType[_16],
    tpe17:         RecursivePropertyType[_17],
    tpe18:         RecursivePropertyType[_18],
    tpe19:         RecursivePropertyType[_19],
    tpe20:         RecursivePropertyType[_20],
    tpe21:         RecursivePropertyType[_21]
  ) = new Tuple21PropertyType[
    _1,
    tpe1.type,
    _2,
    tpe2.type,
    _3,
    tpe3.type,
    _4,
    tpe4.type,
    _5,
    tpe5.type,
    _6,
    tpe6.type,
    _7,
    tpe7.type,
    _8,
    tpe8.type,
    _9,
    tpe9.type,
    _10,
    tpe10.type,
    _11,
    tpe11.type,
    _12,
    tpe12.type,
    _13,
    tpe13.type,
    _14,
    tpe14.type,
    _15,
    tpe15.type,
    _16,
    tpe16.type,
    _17,
    tpe17.type,
    _18,
    tpe18.type,
    _19,
    tpe19.type,
    _20,
    tpe20.type,
    _21,
    tpe21.type
  ](
    tpe1,
    tpe2,
    tpe3,
    tpe4,
    tpe5,
    tpe6,
    tpe7,
    tpe8,
    tpe9,
    tpe10,
    tpe11,
    tpe12,
    tpe13,
    tpe14,
    tpe15,
    tpe16,
    tpe17,
    tpe18,
    tpe19,
    tpe20,
    tpe21
  ) with RecursivePropertyType[
      Tuple21[_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21]
    ]

  implicit def tuple22PropertyTypeInstance[
    _1,
    _2,
    _3,
    _4,
    _5,
    _6,
    _7,
    _8,
    _9,
    _10,
    _11,
    _12,
    _13,
    _14,
    _15,
    _16,
    _17,
    _18,
    _19,
    _20,
    _21,
    _22
  ](
    implicit tpe1: RecursivePropertyType[_1],
    tpe2:          RecursivePropertyType[_2],
    tpe3:          RecursivePropertyType[_3],
    tpe4:          RecursivePropertyType[_4],
    tpe5:          RecursivePropertyType[_5],
    tpe6:          RecursivePropertyType[_6],
    tpe7:          RecursivePropertyType[_7],
    tpe8:          RecursivePropertyType[_8],
    tpe9:          RecursivePropertyType[_9],
    tpe10:         RecursivePropertyType[_10],
    tpe11:         RecursivePropertyType[_11],
    tpe12:         RecursivePropertyType[_12],
    tpe13:         RecursivePropertyType[_13],
    tpe14:         RecursivePropertyType[_14],
    tpe15:         RecursivePropertyType[_15],
    tpe16:         RecursivePropertyType[_16],
    tpe17:         RecursivePropertyType[_17],
    tpe18:         RecursivePropertyType[_18],
    tpe19:         RecursivePropertyType[_19],
    tpe20:         RecursivePropertyType[_20],
    tpe21:         RecursivePropertyType[_21],
    tpe22:         RecursivePropertyType[_22]
  ) = new Tuple22PropertyType[
    _1,
    tpe1.type,
    _2,
    tpe2.type,
    _3,
    tpe3.type,
    _4,
    tpe4.type,
    _5,
    tpe5.type,
    _6,
    tpe6.type,
    _7,
    tpe7.type,
    _8,
    tpe8.type,
    _9,
    tpe9.type,
    _10,
    tpe10.type,
    _11,
    tpe11.type,
    _12,
    tpe12.type,
    _13,
    tpe13.type,
    _14,
    tpe14.type,
    _15,
    tpe15.type,
    _16,
    tpe16.type,
    _17,
    tpe17.type,
    _18,
    tpe18.type,
    _19,
    tpe19.type,
    _20,
    tpe20.type,
    _21,
    tpe21.type,
    _22,
    tpe22.type
  ](
    tpe1,
    tpe2,
    tpe3,
    tpe4,
    tpe5,
    tpe6,
    tpe7,
    tpe8,
    tpe9,
    tpe10,
    tpe11,
    tpe12,
    tpe13,
    tpe14,
    tpe15,
    tpe16,
    tpe17,
    tpe18,
    tpe19,
    tpe20,
    tpe21,
    tpe22
  ) with RecursivePropertyType[
      Tuple22[_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22]
    ]

}

private[chisel3] trait TuplePropertyTypeInstances extends LowPriorityTuplePropertyTypeInstances {

  implicit def recursiveTuple1PropertyTypeInstance[_1](
    implicit tpe1: PropertyType[_1]
  ) = new Tuple1PropertyType[_1, tpe1.type](
    tpe1
  )

  implicit def recursiveTuple2PropertyTypeInstance[_1, _2](
    implicit tpe1: PropertyType[_1],
    tpe2:          PropertyType[_2]
  ) = new Tuple2PropertyType[_1, tpe1.type, _2, tpe2.type](
    tpe1,
    tpe2
  )

  implicit def recursiveTuple3PropertyTypeInstance[_1, _2, _3](
    implicit tpe1: PropertyType[_1],
    tpe2:          PropertyType[_2],
    tpe3:          PropertyType[_3]
  ) = new Tuple3PropertyType[_1, tpe1.type, _2, tpe2.type, _3, tpe3.type](
    tpe1,
    tpe2,
    tpe3
  )

  implicit def recursiveTuple4PropertyTypeInstance[_1, _2, _3, _4](
    implicit tpe1: PropertyType[_1],
    tpe2:          PropertyType[_2],
    tpe3:          PropertyType[_3],
    tpe4:          PropertyType[_4]
  ) = new Tuple4PropertyType[_1, tpe1.type, _2, tpe2.type, _3, tpe3.type, _4, tpe4.type](
    tpe1,
    tpe2,
    tpe3,
    tpe4
  )

  implicit def recursiveTuple5PropertyTypeInstance[_1, _2, _3, _4, _5](
    implicit tpe1: PropertyType[_1],
    tpe2:          PropertyType[_2],
    tpe3:          PropertyType[_3],
    tpe4:          PropertyType[_4],
    tpe5:          PropertyType[_5]
  ) = new Tuple5PropertyType[_1, tpe1.type, _2, tpe2.type, _3, tpe3.type, _4, tpe4.type, _5, tpe5.type](
    tpe1,
    tpe2,
    tpe3,
    tpe4,
    tpe5
  )

  implicit def recursiveTuple6PropertyTypeInstance[_1, _2, _3, _4, _5, _6](
    implicit tpe1: PropertyType[_1],
    tpe2:          PropertyType[_2],
    tpe3:          PropertyType[_3],
    tpe4:          PropertyType[_4],
    tpe5:          PropertyType[_5],
    tpe6:          PropertyType[_6]
  ) = new Tuple6PropertyType[_1, tpe1.type, _2, tpe2.type, _3, tpe3.type, _4, tpe4.type, _5, tpe5.type, _6, tpe6.type](
    tpe1,
    tpe2,
    tpe3,
    tpe4,
    tpe5,
    tpe6
  )

  implicit def recursiveTuple7PropertyTypeInstance[_1, _2, _3, _4, _5, _6, _7](
    implicit tpe1: PropertyType[_1],
    tpe2:          PropertyType[_2],
    tpe3:          PropertyType[_3],
    tpe4:          PropertyType[_4],
    tpe5:          PropertyType[_5],
    tpe6:          PropertyType[_6],
    tpe7:          PropertyType[_7]
  ) = new Tuple7PropertyType[
    _1,
    tpe1.type,
    _2,
    tpe2.type,
    _3,
    tpe3.type,
    _4,
    tpe4.type,
    _5,
    tpe5.type,
    _6,
    tpe6.type,
    _7,
    tpe7.type
  ](
    tpe1,
    tpe2,
    tpe3,
    tpe4,
    tpe5,
    tpe6,
    tpe7
  )

  implicit def recursiveTuple8PropertyTypeInstance[_1, _2, _3, _4, _5, _6, _7, _8](
    implicit tpe1: PropertyType[_1],
    tpe2:          PropertyType[_2],
    tpe3:          PropertyType[_3],
    tpe4:          PropertyType[_4],
    tpe5:          PropertyType[_5],
    tpe6:          PropertyType[_6],
    tpe7:          PropertyType[_7],
    tpe8:          PropertyType[_8]
  ) = new Tuple8PropertyType[
    _1,
    tpe1.type,
    _2,
    tpe2.type,
    _3,
    tpe3.type,
    _4,
    tpe4.type,
    _5,
    tpe5.type,
    _6,
    tpe6.type,
    _7,
    tpe7.type,
    _8,
    tpe8.type
  ](
    tpe1,
    tpe2,
    tpe3,
    tpe4,
    tpe5,
    tpe6,
    tpe7,
    tpe8
  )

  implicit def recursiveTuple9PropertyTypeInstance[_1, _2, _3, _4, _5, _6, _7, _8, _9](
    implicit tpe1: PropertyType[_1],
    tpe2:          PropertyType[_2],
    tpe3:          PropertyType[_3],
    tpe4:          PropertyType[_4],
    tpe5:          PropertyType[_5],
    tpe6:          PropertyType[_6],
    tpe7:          PropertyType[_7],
    tpe8:          PropertyType[_8],
    tpe9:          PropertyType[_9]
  ) = new Tuple9PropertyType[
    _1,
    tpe1.type,
    _2,
    tpe2.type,
    _3,
    tpe3.type,
    _4,
    tpe4.type,
    _5,
    tpe5.type,
    _6,
    tpe6.type,
    _7,
    tpe7.type,
    _8,
    tpe8.type,
    _9,
    tpe9.type
  ](
    tpe1,
    tpe2,
    tpe3,
    tpe4,
    tpe5,
    tpe6,
    tpe7,
    tpe8,
    tpe9
  )

  implicit def recursiveTuple10PropertyTypeInstance[_1, _2, _3, _4, _5, _6, _7, _8, _9, _10](
    implicit tpe1: PropertyType[_1],
    tpe2:          PropertyType[_2],
    tpe3:          PropertyType[_3],
    tpe4:          PropertyType[_4],
    tpe5:          PropertyType[_5],
    tpe6:          PropertyType[_6],
    tpe7:          PropertyType[_7],
    tpe8:          PropertyType[_8],
    tpe9:          PropertyType[_9],
    tpe10:         PropertyType[_10]
  ) = new Tuple10PropertyType[
    _1,
    tpe1.type,
    _2,
    tpe2.type,
    _3,
    tpe3.type,
    _4,
    tpe4.type,
    _5,
    tpe5.type,
    _6,
    tpe6.type,
    _7,
    tpe7.type,
    _8,
    tpe8.type,
    _9,
    tpe9.type,
    _10,
    tpe10.type
  ](
    tpe1,
    tpe2,
    tpe3,
    tpe4,
    tpe5,
    tpe6,
    tpe7,
    tpe8,
    tpe9,
    tpe10
  )

  implicit def recursiveTuple11PropertyTypeInstance[_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11](
    implicit tpe1: PropertyType[_1],
    tpe2:          PropertyType[_2],
    tpe3:          PropertyType[_3],
    tpe4:          PropertyType[_4],
    tpe5:          PropertyType[_5],
    tpe6:          PropertyType[_6],
    tpe7:          PropertyType[_7],
    tpe8:          PropertyType[_8],
    tpe9:          PropertyType[_9],
    tpe10:         PropertyType[_10],
    tpe11:         PropertyType[_11]
  ) = new Tuple11PropertyType[
    _1,
    tpe1.type,
    _2,
    tpe2.type,
    _3,
    tpe3.type,
    _4,
    tpe4.type,
    _5,
    tpe5.type,
    _6,
    tpe6.type,
    _7,
    tpe7.type,
    _8,
    tpe8.type,
    _9,
    tpe9.type,
    _10,
    tpe10.type,
    _11,
    tpe11.type
  ](
    tpe1,
    tpe2,
    tpe3,
    tpe4,
    tpe5,
    tpe6,
    tpe7,
    tpe8,
    tpe9,
    tpe10,
    tpe11
  )

  implicit def recursiveTuple12PropertyTypeInstance[_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12](
    implicit tpe1: PropertyType[_1],
    tpe2:          PropertyType[_2],
    tpe3:          PropertyType[_3],
    tpe4:          PropertyType[_4],
    tpe5:          PropertyType[_5],
    tpe6:          PropertyType[_6],
    tpe7:          PropertyType[_7],
    tpe8:          PropertyType[_8],
    tpe9:          PropertyType[_9],
    tpe10:         PropertyType[_10],
    tpe11:         PropertyType[_11],
    tpe12:         PropertyType[_12]
  ) = new Tuple12PropertyType[
    _1,
    tpe1.type,
    _2,
    tpe2.type,
    _3,
    tpe3.type,
    _4,
    tpe4.type,
    _5,
    tpe5.type,
    _6,
    tpe6.type,
    _7,
    tpe7.type,
    _8,
    tpe8.type,
    _9,
    tpe9.type,
    _10,
    tpe10.type,
    _11,
    tpe11.type,
    _12,
    tpe12.type
  ](
    tpe1,
    tpe2,
    tpe3,
    tpe4,
    tpe5,
    tpe6,
    tpe7,
    tpe8,
    tpe9,
    tpe10,
    tpe11,
    tpe12
  )

  implicit def recursiveTuple13PropertyTypeInstance[_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13](
    implicit tpe1: PropertyType[_1],
    tpe2:          PropertyType[_2],
    tpe3:          PropertyType[_3],
    tpe4:          PropertyType[_4],
    tpe5:          PropertyType[_5],
    tpe6:          PropertyType[_6],
    tpe7:          PropertyType[_7],
    tpe8:          PropertyType[_8],
    tpe9:          PropertyType[_9],
    tpe10:         PropertyType[_10],
    tpe11:         PropertyType[_11],
    tpe12:         PropertyType[_12],
    tpe13:         PropertyType[_13]
  ) = new Tuple13PropertyType[
    _1,
    tpe1.type,
    _2,
    tpe2.type,
    _3,
    tpe3.type,
    _4,
    tpe4.type,
    _5,
    tpe5.type,
    _6,
    tpe6.type,
    _7,
    tpe7.type,
    _8,
    tpe8.type,
    _9,
    tpe9.type,
    _10,
    tpe10.type,
    _11,
    tpe11.type,
    _12,
    tpe12.type,
    _13,
    tpe13.type
  ](
    tpe1,
    tpe2,
    tpe3,
    tpe4,
    tpe5,
    tpe6,
    tpe7,
    tpe8,
    tpe9,
    tpe10,
    tpe11,
    tpe12,
    tpe13
  )

  implicit def recursiveTuple14PropertyTypeInstance[_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14](
    implicit tpe1: PropertyType[_1],
    tpe2:          PropertyType[_2],
    tpe3:          PropertyType[_3],
    tpe4:          PropertyType[_4],
    tpe5:          PropertyType[_5],
    tpe6:          PropertyType[_6],
    tpe7:          PropertyType[_7],
    tpe8:          PropertyType[_8],
    tpe9:          PropertyType[_9],
    tpe10:         PropertyType[_10],
    tpe11:         PropertyType[_11],
    tpe12:         PropertyType[_12],
    tpe13:         PropertyType[_13],
    tpe14:         PropertyType[_14]
  ) = new Tuple14PropertyType[
    _1,
    tpe1.type,
    _2,
    tpe2.type,
    _3,
    tpe3.type,
    _4,
    tpe4.type,
    _5,
    tpe5.type,
    _6,
    tpe6.type,
    _7,
    tpe7.type,
    _8,
    tpe8.type,
    _9,
    tpe9.type,
    _10,
    tpe10.type,
    _11,
    tpe11.type,
    _12,
    tpe12.type,
    _13,
    tpe13.type,
    _14,
    tpe14.type
  ](
    tpe1,
    tpe2,
    tpe3,
    tpe4,
    tpe5,
    tpe6,
    tpe7,
    tpe8,
    tpe9,
    tpe10,
    tpe11,
    tpe12,
    tpe13,
    tpe14
  )

  implicit def recursiveTuple15PropertyTypeInstance[_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15](
    implicit tpe1: PropertyType[_1],
    tpe2:          PropertyType[_2],
    tpe3:          PropertyType[_3],
    tpe4:          PropertyType[_4],
    tpe5:          PropertyType[_5],
    tpe6:          PropertyType[_6],
    tpe7:          PropertyType[_7],
    tpe8:          PropertyType[_8],
    tpe9:          PropertyType[_9],
    tpe10:         PropertyType[_10],
    tpe11:         PropertyType[_11],
    tpe12:         PropertyType[_12],
    tpe13:         PropertyType[_13],
    tpe14:         PropertyType[_14],
    tpe15:         PropertyType[_15]
  ) = new Tuple15PropertyType[
    _1,
    tpe1.type,
    _2,
    tpe2.type,
    _3,
    tpe3.type,
    _4,
    tpe4.type,
    _5,
    tpe5.type,
    _6,
    tpe6.type,
    _7,
    tpe7.type,
    _8,
    tpe8.type,
    _9,
    tpe9.type,
    _10,
    tpe10.type,
    _11,
    tpe11.type,
    _12,
    tpe12.type,
    _13,
    tpe13.type,
    _14,
    tpe14.type,
    _15,
    tpe15.type
  ](
    tpe1,
    tpe2,
    tpe3,
    tpe4,
    tpe5,
    tpe6,
    tpe7,
    tpe8,
    tpe9,
    tpe10,
    tpe11,
    tpe12,
    tpe13,
    tpe14,
    tpe15
  )

  implicit def recursiveTuple16PropertyTypeInstance[
    _1,
    _2,
    _3,
    _4,
    _5,
    _6,
    _7,
    _8,
    _9,
    _10,
    _11,
    _12,
    _13,
    _14,
    _15,
    _16
  ](
    implicit tpe1: PropertyType[_1],
    tpe2:          PropertyType[_2],
    tpe3:          PropertyType[_3],
    tpe4:          PropertyType[_4],
    tpe5:          PropertyType[_5],
    tpe6:          PropertyType[_6],
    tpe7:          PropertyType[_7],
    tpe8:          PropertyType[_8],
    tpe9:          PropertyType[_9],
    tpe10:         PropertyType[_10],
    tpe11:         PropertyType[_11],
    tpe12:         PropertyType[_12],
    tpe13:         PropertyType[_13],
    tpe14:         PropertyType[_14],
    tpe15:         PropertyType[_15],
    tpe16:         PropertyType[_16]
  ) = new Tuple16PropertyType[
    _1,
    tpe1.type,
    _2,
    tpe2.type,
    _3,
    tpe3.type,
    _4,
    tpe4.type,
    _5,
    tpe5.type,
    _6,
    tpe6.type,
    _7,
    tpe7.type,
    _8,
    tpe8.type,
    _9,
    tpe9.type,
    _10,
    tpe10.type,
    _11,
    tpe11.type,
    _12,
    tpe12.type,
    _13,
    tpe13.type,
    _14,
    tpe14.type,
    _15,
    tpe15.type,
    _16,
    tpe16.type
  ](
    tpe1,
    tpe2,
    tpe3,
    tpe4,
    tpe5,
    tpe6,
    tpe7,
    tpe8,
    tpe9,
    tpe10,
    tpe11,
    tpe12,
    tpe13,
    tpe14,
    tpe15,
    tpe16
  )

  implicit def recursiveTuple17PropertyTypeInstance[
    _1,
    _2,
    _3,
    _4,
    _5,
    _6,
    _7,
    _8,
    _9,
    _10,
    _11,
    _12,
    _13,
    _14,
    _15,
    _16,
    _17
  ](
    implicit tpe1: PropertyType[_1],
    tpe2:          PropertyType[_2],
    tpe3:          PropertyType[_3],
    tpe4:          PropertyType[_4],
    tpe5:          PropertyType[_5],
    tpe6:          PropertyType[_6],
    tpe7:          PropertyType[_7],
    tpe8:          PropertyType[_8],
    tpe9:          PropertyType[_9],
    tpe10:         PropertyType[_10],
    tpe11:         PropertyType[_11],
    tpe12:         PropertyType[_12],
    tpe13:         PropertyType[_13],
    tpe14:         PropertyType[_14],
    tpe15:         PropertyType[_15],
    tpe16:         PropertyType[_16],
    tpe17:         PropertyType[_17]
  ) = new Tuple17PropertyType[
    _1,
    tpe1.type,
    _2,
    tpe2.type,
    _3,
    tpe3.type,
    _4,
    tpe4.type,
    _5,
    tpe5.type,
    _6,
    tpe6.type,
    _7,
    tpe7.type,
    _8,
    tpe8.type,
    _9,
    tpe9.type,
    _10,
    tpe10.type,
    _11,
    tpe11.type,
    _12,
    tpe12.type,
    _13,
    tpe13.type,
    _14,
    tpe14.type,
    _15,
    tpe15.type,
    _16,
    tpe16.type,
    _17,
    tpe17.type
  ](
    tpe1,
    tpe2,
    tpe3,
    tpe4,
    tpe5,
    tpe6,
    tpe7,
    tpe8,
    tpe9,
    tpe10,
    tpe11,
    tpe12,
    tpe13,
    tpe14,
    tpe15,
    tpe16,
    tpe17
  )

  implicit def recursiveTuple18PropertyTypeInstance[
    _1,
    _2,
    _3,
    _4,
    _5,
    _6,
    _7,
    _8,
    _9,
    _10,
    _11,
    _12,
    _13,
    _14,
    _15,
    _16,
    _17,
    _18
  ](
    implicit tpe1: PropertyType[_1],
    tpe2:          PropertyType[_2],
    tpe3:          PropertyType[_3],
    tpe4:          PropertyType[_4],
    tpe5:          PropertyType[_5],
    tpe6:          PropertyType[_6],
    tpe7:          PropertyType[_7],
    tpe8:          PropertyType[_8],
    tpe9:          PropertyType[_9],
    tpe10:         PropertyType[_10],
    tpe11:         PropertyType[_11],
    tpe12:         PropertyType[_12],
    tpe13:         PropertyType[_13],
    tpe14:         PropertyType[_14],
    tpe15:         PropertyType[_15],
    tpe16:         PropertyType[_16],
    tpe17:         PropertyType[_17],
    tpe18:         PropertyType[_18]
  ) = new Tuple18PropertyType[
    _1,
    tpe1.type,
    _2,
    tpe2.type,
    _3,
    tpe3.type,
    _4,
    tpe4.type,
    _5,
    tpe5.type,
    _6,
    tpe6.type,
    _7,
    tpe7.type,
    _8,
    tpe8.type,
    _9,
    tpe9.type,
    _10,
    tpe10.type,
    _11,
    tpe11.type,
    _12,
    tpe12.type,
    _13,
    tpe13.type,
    _14,
    tpe14.type,
    _15,
    tpe15.type,
    _16,
    tpe16.type,
    _17,
    tpe17.type,
    _18,
    tpe18.type
  ](
    tpe1,
    tpe2,
    tpe3,
    tpe4,
    tpe5,
    tpe6,
    tpe7,
    tpe8,
    tpe9,
    tpe10,
    tpe11,
    tpe12,
    tpe13,
    tpe14,
    tpe15,
    tpe16,
    tpe17,
    tpe18
  )

  implicit def recursiveTuple19PropertyTypeInstance[
    _1,
    _2,
    _3,
    _4,
    _5,
    _6,
    _7,
    _8,
    _9,
    _10,
    _11,
    _12,
    _13,
    _14,
    _15,
    _16,
    _17,
    _18,
    _19
  ](
    implicit tpe1: PropertyType[_1],
    tpe2:          PropertyType[_2],
    tpe3:          PropertyType[_3],
    tpe4:          PropertyType[_4],
    tpe5:          PropertyType[_5],
    tpe6:          PropertyType[_6],
    tpe7:          PropertyType[_7],
    tpe8:          PropertyType[_8],
    tpe9:          PropertyType[_9],
    tpe10:         PropertyType[_10],
    tpe11:         PropertyType[_11],
    tpe12:         PropertyType[_12],
    tpe13:         PropertyType[_13],
    tpe14:         PropertyType[_14],
    tpe15:         PropertyType[_15],
    tpe16:         PropertyType[_16],
    tpe17:         PropertyType[_17],
    tpe18:         PropertyType[_18],
    tpe19:         PropertyType[_19]
  ) = new Tuple19PropertyType[
    _1,
    tpe1.type,
    _2,
    tpe2.type,
    _3,
    tpe3.type,
    _4,
    tpe4.type,
    _5,
    tpe5.type,
    _6,
    tpe6.type,
    _7,
    tpe7.type,
    _8,
    tpe8.type,
    _9,
    tpe9.type,
    _10,
    tpe10.type,
    _11,
    tpe11.type,
    _12,
    tpe12.type,
    _13,
    tpe13.type,
    _14,
    tpe14.type,
    _15,
    tpe15.type,
    _16,
    tpe16.type,
    _17,
    tpe17.type,
    _18,
    tpe18.type,
    _19,
    tpe19.type
  ](
    tpe1,
    tpe2,
    tpe3,
    tpe4,
    tpe5,
    tpe6,
    tpe7,
    tpe8,
    tpe9,
    tpe10,
    tpe11,
    tpe12,
    tpe13,
    tpe14,
    tpe15,
    tpe16,
    tpe17,
    tpe18,
    tpe19
  )

  implicit def recursiveTuple20PropertyTypeInstance[
    _1,
    _2,
    _3,
    _4,
    _5,
    _6,
    _7,
    _8,
    _9,
    _10,
    _11,
    _12,
    _13,
    _14,
    _15,
    _16,
    _17,
    _18,
    _19,
    _20
  ](
    implicit tpe1: PropertyType[_1],
    tpe2:          PropertyType[_2],
    tpe3:          PropertyType[_3],
    tpe4:          PropertyType[_4],
    tpe5:          PropertyType[_5],
    tpe6:          PropertyType[_6],
    tpe7:          PropertyType[_7],
    tpe8:          PropertyType[_8],
    tpe9:          PropertyType[_9],
    tpe10:         PropertyType[_10],
    tpe11:         PropertyType[_11],
    tpe12:         PropertyType[_12],
    tpe13:         PropertyType[_13],
    tpe14:         PropertyType[_14],
    tpe15:         PropertyType[_15],
    tpe16:         PropertyType[_16],
    tpe17:         PropertyType[_17],
    tpe18:         PropertyType[_18],
    tpe19:         PropertyType[_19],
    tpe20:         PropertyType[_20]
  ) = new Tuple20PropertyType[
    _1,
    tpe1.type,
    _2,
    tpe2.type,
    _3,
    tpe3.type,
    _4,
    tpe4.type,
    _5,
    tpe5.type,
    _6,
    tpe6.type,
    _7,
    tpe7.type,
    _8,
    tpe8.type,
    _9,
    tpe9.type,
    _10,
    tpe10.type,
    _11,
    tpe11.type,
    _12,
    tpe12.type,
    _13,
    tpe13.type,
    _14,
    tpe14.type,
    _15,
    tpe15.type,
    _16,
    tpe16.type,
    _17,
    tpe17.type,
    _18,
    tpe18.type,
    _19,
    tpe19.type,
    _20,
    tpe20.type
  ](
    tpe1,
    tpe2,
    tpe3,
    tpe4,
    tpe5,
    tpe6,
    tpe7,
    tpe8,
    tpe9,
    tpe10,
    tpe11,
    tpe12,
    tpe13,
    tpe14,
    tpe15,
    tpe16,
    tpe17,
    tpe18,
    tpe19,
    tpe20
  )

  implicit def recursiveTuple21PropertyTypeInstance[
    _1,
    _2,
    _3,
    _4,
    _5,
    _6,
    _7,
    _8,
    _9,
    _10,
    _11,
    _12,
    _13,
    _14,
    _15,
    _16,
    _17,
    _18,
    _19,
    _20,
    _21
  ](
    implicit tpe1: PropertyType[_1],
    tpe2:          PropertyType[_2],
    tpe3:          PropertyType[_3],
    tpe4:          PropertyType[_4],
    tpe5:          PropertyType[_5],
    tpe6:          PropertyType[_6],
    tpe7:          PropertyType[_7],
    tpe8:          PropertyType[_8],
    tpe9:          PropertyType[_9],
    tpe10:         PropertyType[_10],
    tpe11:         PropertyType[_11],
    tpe12:         PropertyType[_12],
    tpe13:         PropertyType[_13],
    tpe14:         PropertyType[_14],
    tpe15:         PropertyType[_15],
    tpe16:         PropertyType[_16],
    tpe17:         PropertyType[_17],
    tpe18:         PropertyType[_18],
    tpe19:         PropertyType[_19],
    tpe20:         PropertyType[_20],
    tpe21:         PropertyType[_21]
  ) = new Tuple21PropertyType[
    _1,
    tpe1.type,
    _2,
    tpe2.type,
    _3,
    tpe3.type,
    _4,
    tpe4.type,
    _5,
    tpe5.type,
    _6,
    tpe6.type,
    _7,
    tpe7.type,
    _8,
    tpe8.type,
    _9,
    tpe9.type,
    _10,
    tpe10.type,
    _11,
    tpe11.type,
    _12,
    tpe12.type,
    _13,
    tpe13.type,
    _14,
    tpe14.type,
    _15,
    tpe15.type,
    _16,
    tpe16.type,
    _17,
    tpe17.type,
    _18,
    tpe18.type,
    _19,
    tpe19.type,
    _20,
    tpe20.type,
    _21,
    tpe21.type
  ](
    tpe1,
    tpe2,
    tpe3,
    tpe4,
    tpe5,
    tpe6,
    tpe7,
    tpe8,
    tpe9,
    tpe10,
    tpe11,
    tpe12,
    tpe13,
    tpe14,
    tpe15,
    tpe16,
    tpe17,
    tpe18,
    tpe19,
    tpe20,
    tpe21
  )

  implicit def recursiveTuple22PropertyTypeInstance[
    _1,
    _2,
    _3,
    _4,
    _5,
    _6,
    _7,
    _8,
    _9,
    _10,
    _11,
    _12,
    _13,
    _14,
    _15,
    _16,
    _17,
    _18,
    _19,
    _20,
    _21,
    _22
  ](
    implicit tpe1: PropertyType[_1],
    tpe2:          PropertyType[_2],
    tpe3:          PropertyType[_3],
    tpe4:          PropertyType[_4],
    tpe5:          PropertyType[_5],
    tpe6:          PropertyType[_6],
    tpe7:          PropertyType[_7],
    tpe8:          PropertyType[_8],
    tpe9:          PropertyType[_9],
    tpe10:         PropertyType[_10],
    tpe11:         PropertyType[_11],
    tpe12:         PropertyType[_12],
    tpe13:         PropertyType[_13],
    tpe14:         PropertyType[_14],
    tpe15:         PropertyType[_15],
    tpe16:         PropertyType[_16],
    tpe17:         PropertyType[_17],
    tpe18:         PropertyType[_18],
    tpe19:         PropertyType[_19],
    tpe20:         PropertyType[_20],
    tpe21:         PropertyType[_21],
    tpe22:         PropertyType[_22]
  ) = new Tuple22PropertyType[
    _1,
    tpe1.type,
    _2,
    tpe2.type,
    _3,
    tpe3.type,
    _4,
    tpe4.type,
    _5,
    tpe5.type,
    _6,
    tpe6.type,
    _7,
    tpe7.type,
    _8,
    tpe8.type,
    _9,
    tpe9.type,
    _10,
    tpe10.type,
    _11,
    tpe11.type,
    _12,
    tpe12.type,
    _13,
    tpe13.type,
    _14,
    tpe14.type,
    _15,
    tpe15.type,
    _16,
    tpe16.type,
    _17,
    tpe17.type,
    _18,
    tpe18.type,
    _19,
    tpe19.type,
    _20,
    tpe20.type,
    _21,
    tpe21.type,
    _22,
    tpe22.type
  ](
    tpe1,
    tpe2,
    tpe3,
    tpe4,
    tpe5,
    tpe6,
    tpe7,
    tpe8,
    tpe9,
    tpe10,
    tpe11,
    tpe12,
    tpe13,
    tpe14,
    tpe15,
    tpe16,
    tpe17,
    tpe18,
    tpe19,
    tpe20,
    tpe21,
    tpe22
  )

}
