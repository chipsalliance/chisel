name: Continuous Integration

on:
<<<<<<< HEAD
  pull_request:
  push:
    branches:
      - master
      - 3.6.x
      - 3.5.x
      - 3.4.x
      - 3.3.x
      - 3.2.x
=======
  workflow_call:
    inputs:
      system:
        description: 'The GitHub runner to use'
        default: 'ubuntu-20.04'
        required: true
        type: string
      jvm:
        description: 'The Java version to use'
        default: 8
        required: true
        type: number
      scala:
        description: 'The Scala version to use'
        default: '2.13.12'
        required: true
        type: string
      espresso:
        description: 'The espresso version to use'
        default: '2.4'
        required: true
        type: string
      circt:
        description: 'The CIRCT version to use (must be a valid release tag, "nightly", or "version-file").
                      Leave off (or empty) to let Chisel manage the CIRCT version'
        type: string
      ref:
        description: 'The branch, tag, or git hash to checkout'
        default: ''
        required: false
        type: string
>>>>>>> 3938a465e (Switch to firtool-resolver (#3458))

jobs:
  ci:
    name: ci
    strategy:
      matrix:
        system: ["ubuntu-20.04"]
        jvm: ["8"]
        scala: ["2.13.10", "2.12.17"]
        espresso: ["2.4"]
        circt: ["firtool-1.37.0"]
    runs-on: ${{ matrix.system }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install Tabby OSS Cad Suite
        uses: ./.github/workflows/setup-oss-cad-suite
      - name: Install Espresso
        uses: ./.github/workflows/install-espresso
        with:
          version: ${{ matrix.espresso }}
      - name: Setup Scala
        uses: actions/setup-java@v3
        with:
          distribution: 'adopt'
          java-version: ${{ matrix.jvm }}
          cache: 'sbt'
      - name: Install CIRCT
<<<<<<< HEAD
        uses: ./.github/workflows/install-circt
        with:
          version: ${{ matrix.circt }}
=======
        id: install-circt
        if: ${{ inputs.circt }}
        uses: circt/install-circt@v1.1.1
        with:
          version: ${{ inputs.circt }}
          github-token: ${{ github.token }}
      # TODO have install-circt do this
      - name: Set FIRTOOL_PATH
        if: steps.install-circt.outcome == 'success'
        run: |
          dir=$(dirname $(which firtool))
          echo "FIRTOOL_PATH=$dir" >> "$GITHUB_ENV"
      - name: Print firtool version
        if: steps.install-circt.outcome == 'success'
        run: |
          echo "The CIRCT version used is:" >> $GITHUB_STEP_SUMMARY
          echo \`\`\` >> $GITHUB_STEP_SUMMARY
          $FIRTOOL_PATH/firtool -version >> $GITHUB_STEP_SUMMARY
          echo \`\`\` >> $GITHUB_STEP_SUMMARY
>>>>>>> 3938a465e (Switch to firtool-resolver (#3458))
      - name: Test
        run: sbt ++${{ matrix.scala }} test
      - name: Binary compatibility
<<<<<<< HEAD
        run: sbt ++${{ matrix.scala }} mimaReportBinaryIssues
=======
        # TODO either make this also check the plugin or decide that we don't
        #      support binary compatibility for the plugin
        run: sbt ++${{ inputs.scala }} unipublish/mimaReportBinaryIssues

  mill:
    name: compile project with mill
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.ref }}
      # FIXME: installling jextract before installing mill to workaround `os.proc` can't find jextract in the outdated PATH env from mill server
      - name: Install Jextract
        uses: ./.github/workflows/install-jextract
      - name: Setup Scala
        uses: actions/setup-java@v3
        with:
          distribution: 'adopt'
          java-version: '21'
          cache: 'sbt'
      - name: Install Mill
        uses: jodersky/setup-mill@v0.3.0
        with:
          mill-version: 0.11.5
      # Mill needs firtool to compile with bindings, cannot use firtool-resolver at runtime
      - name: Pick CIRCT version
        id: circt-version
        run: |
          if [[ -z "${{ inputs.circt }}" ]]; then
            echo "version=version-file" >> "$GITHUB_OUTPUT"
          else
            echo "version=${{ inputs.circt }}" >> "$GITHUB_OUTPUT"
          fi
      - name: Install CIRCT
        uses: circt/install-circt@v1.1.1
        with:
          version: ${{ steps.circt-version.outputs.version }}
          github-token: ${{ github.token }}
      - name: Compile Mill
        run: |
          export CIRCT_INSTALL_PATH="$(pwd)/circt"
          mill __.compile
>>>>>>> 3938a465e (Switch to firtool-resolver (#3458))

  doc:
    name: Formatting
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Scala
        uses: actions/setup-java@v3
        with:
          distribution: 'adopt'
          java-version: '11'
          cache: 'sbt'
<<<<<<< HEAD
      - name: Install CIRCT
        uses: ./.github/workflows/install-circt
=======
>>>>>>> 3938a465e (Switch to firtool-resolver (#3458))
      - name: Check Formatting
        run: sbt fmtCheck

  integration:
    name: Integration Tests (w/ chiseltest)
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install Tabby OSS Cad Suite
        uses: ./.github/workflows/setup-oss-cad-suite
      - name: Install Espresso
        uses: ./.github/workflows/install-espresso
      - name: Install CIRCT
        uses: ./.github/workflows/install-circt
      - name: Setup Scala
        uses: actions/setup-java@v3
        with:
          distribution: 'adopt'
          java-version: '11'
          cache: 'sbt'
<<<<<<< HEAD
=======
      - name: Install CIRCT
        id: install-circt
        if: ${{ inputs.circt }}
        uses: circt/install-circt@v1.1.1
        with:
          version: ${{ inputs.circt }}
          github-token: ${{ github.token }}
      # TODO have install-circt do this
      - name: Set FIRTOOL_PATH
        if: steps.install-circt.outcome == 'success'
        run: |
          dir=$(dirname $(which firtool))
          echo "FIRTOOL_PATH=$dir" >> "$GITHUB_ENV"
>>>>>>> 3938a465e (Switch to firtool-resolver (#3458))
      - name: Integration Tests
        # This is here instead of on the whole job because, if a job is skipped, so are dependent jobs.
        # If this job were skipped, all_tests_passed would be skipped too.
        # By having this "if" here, this job returns success so that all_tests_passed will succeed too.
        if: github.event_name != 'pull_request' ||
          ! contains(github.event.pull_request.labels.*.name, 'Skip chiseltest')
        run: sbt integrationTests/test

  std:
    name: Standard Library Tests
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        scala: [ "2.13.10", "2.12.17" ]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install Tabby OSS Cad Suite
        uses: ./.github/workflows/setup-oss-cad-suite
      - name: Setup Scala
        uses: actions/setup-java@v3
        with:
          distribution: 'adopt'
          java-version: '11'
          cache: 'sbt'
      - name: Check Formatting (Scala 2.12 only)
        if: startsWith(matrix.scala, '2.12')
        run: sbt ++${{ matrix.scala }} standardLibrary/scalafmtCheckAll
      - name: Unit Tests
        run: sbt ++${{ matrix.scala }} standardLibrary/test

  website:
    name: Build Mdoc & Website
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Scala
        uses: olafurpg/setup-scala@v10
        with:
          java-version: adopt@1.8
      - name: Cache Scala
        uses: coursier/cache-action@v5
      - name: Setup Ruby
        uses: actions/setup-ruby@v1
      - name: Setup Jekyll
        run: |
          gem install jekyll -v 4.2.0
          gem install jekyll-redirect-from
      - name: Install CIRCT
<<<<<<< HEAD
        uses: ./.github/workflows/install-circt
        #TODO: make the microsite building include building ScalaDoc
      - name: Build the docs
        run: sbt doc
      - name: Build the microsite
        run: make -C website
=======
        id: install-circt
        if: ${{ inputs.circt }}
        uses: circt/install-circt@v1.1.1
        with:
          version: ${{ inputs.circt }}
          github-token: ${{ github.token }}
      # TODO have install-circt do this
      - name: Set FIRTOOL_PATH
        if: steps.install-circt.outcome == 'success'
        run: |
          dir=$(dirname $(which firtool))
          echo "FIRTOOL_PATH=$dir" >> "$GITHUB_ENV"
        # TODO: make the website building include building ScalaDoc
      - name: Build the website
        run: make -C website build
>>>>>>> 3938a465e (Switch to firtool-resolver (#3458))
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Tar built website
        run: tar zcf website.tar.gz website/docs/target/site
      - name: Share Built Website
        uses: actions/upload-artifact@v3
        with:
          name: website
          path: website.tar.gz

  scala-cli-example:
    name: Test Chisel Scala-CLI Example
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        # Need to fetch full history for deriving version
        with:
          fetch-depth: 0
      - name: Build and Test Chisel Scala-CLI Example
        uses: ./.github/workflows/build-scala-cli-example

  # Sentinel job to simplify how we specify which checks need to pass in branch
  # protection and in Mergify. This job checks that all jobs were successful.
  #
  # When adding new jobs, please add them to `needs` below
  check-tests:
    name: "check tests"
    needs: [ci, integration, std, doc, website, scala-cli-example]
    runs-on: ubuntu-20.04
    if: success() # only run if all tests have passed
    outputs:
      success: ${{ steps.setoutput.outputs.success }}
    steps:
      - id: setoutput
        run: echo "success=true" >> $GITHUB_OUTPUT

  # Related to check-tests above, this job _always_ runs (even if tests fail
  # and thus check-steps is skipped). This two sentinel job approach avoids an
  # issue where failing tests causes a single sentinel job to be skipped which
  # counts as passing for purposes of branch protection.
  #
  # See: https://brunoscheufler.com/blog/2022-04-09-the-required-github-status-check-that-wasnt
  all_tests_passed:
    name: "all tests passed"
    runs-on: ubuntu-20.04
    if: always() # Always run so that we never skip this check
    needs: check-tests
      # Pass only if check-tests set its output value
    steps:
      - run: |
          PASSED="${{ needs.check-tests.outputs.success }}"
          if [[ $PASSED == "true" ]]; then
            echo "### All tests passed! :rocket:" >> $GITHUB_STEP_SUMMARY
            exit 0
          else
            echo "### One or more tests FAILED! :bangbang:" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

  # sbt ci-release publishes all cross versions so this job needs to be
  # separate from a Scala versions build matrix to avoid duplicate publishing
  publish:
    needs: [all_tests_passed]
    runs-on: ubuntu-20.04
    if: github.event_name == 'push'

    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install CIRCT
        uses: ./.github/workflows/install-circt
      - name: Setup Scala
        uses: actions/setup-java@v3
        with:
          distribution: 'adopt'
          java-version: '8'
          cache: 'sbt'
      - name: Setup GPG (for Publish)
        uses: olafurpg/setup-gpg@v3
      - name: Publish
        run: sbt -DdisableFatalWarnings ci-release
        env:
          PGP_PASSPHRASE: ${{ secrets.PGP_PASSPHRASE }}
          PGP_SECRET: ${{ secrets.PGP_SECRET }}
          SONATYPE_PASSWORD: ${{ secrets.SONATYPE_PASSWORD }}
          SONATYPE_USERNAME: ${{ secrets.SONATYPE_USERNAME }}

