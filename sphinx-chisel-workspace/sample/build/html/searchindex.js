Search.setIndex({docnames:["chiselFrontend/chiselFrontend","chiselFrontend/src/main/main","chiselFrontend/src/main/scala/chisel3/chisel3","chiselFrontend/src/main/scala/chisel3/core/core","chiselFrontend/src/main/scala/chisel3/experimental/experimental","chiselFrontend/src/main/scala/chisel3/internal/firrtl/firrtl","chiselFrontend/src/main/scala/chisel3/internal/internal","chiselFrontend/src/main/scala/scala","chiselFrontend/src/src","chiselFrontend/target/scala-2.12/classes/chisel3/chisel3","chiselFrontend/target/scala-2.12/classes/chisel3/core/core","chiselFrontend/target/scala-2.12/classes/chisel3/experimental/experimental","chiselFrontend/target/scala-2.12/classes/chisel3/internal/firrtl/firrtl","chiselFrontend/target/scala-2.12/classes/chisel3/internal/internal","chiselFrontend/target/scala-2.12/classes/chisel3/internal/naming/naming","chiselFrontend/target/scala-2.12/classes/chisel3/internal/sourceinfo/sourceinfo","chiselFrontend/target/scala-2.12/classes/classes","chiselFrontend/target/scala-2.12/resolution-cache/edu.berkeley.cs/chiselfrontend_2.12/3.2-050719-SNAPSHOT/3.2-050719-SNAPSHOT","chiselFrontend/target/scala-2.12/resolution-cache/edu.berkeley.cs/chiselfrontend_2.12/3.2-SNAPSHOT/3.2-SNAPSHOT","chiselFrontend/target/scala-2.12/resolution-cache/edu.berkeley.cs/chiselfrontend_2.12/chiselfrontend_2.12","chiselFrontend/target/scala-2.12/resolution-cache/edu.berkeley.cs/edu.berkeley.cs","chiselFrontend/target/scala-2.12/resolution-cache/reports/reports","chiselFrontend/target/scala-2.12/resolution-cache/resolution-cache","chiselFrontend/target/scala-2.12/scala-2.12","chiselFrontend/target/streams/$global/$global","chiselFrontend/target/streams/$global/$global/$global","chiselFrontend/target/streams/$global/$global/$global/$global","chiselFrontend/target/streams/$global/$global/$global/streams/streams","chiselFrontend/target/streams/$global/clean/$global/$global","chiselFrontend/target/streams/$global/clean/$global/streams/streams","chiselFrontend/target/streams/$global/clean/clean","chiselFrontend/target/streams/$global/dependencyPositions/$global/$global","chiselFrontend/target/streams/$global/dependencyPositions/$global/streams/streams","chiselFrontend/target/streams/$global/dependencyPositions/$global/streams/update_cache_2.12/update_cache_2.12","chiselFrontend/target/streams/$global/dependencyPositions/dependencyPositions","chiselFrontend/target/streams/$global/ivyConfiguration/$global/$global","chiselFrontend/target/streams/$global/ivyConfiguration/$global/streams/streams","chiselFrontend/target/streams/$global/ivyConfiguration/ivyConfiguration","chiselFrontend/target/streams/$global/ivySbt/$global/$global","chiselFrontend/target/streams/$global/ivySbt/$global/streams/streams","chiselFrontend/target/streams/$global/ivySbt/ivySbt","chiselFrontend/target/streams/$global/projectDescriptors/$global/$global","chiselFrontend/target/streams/$global/projectDescriptors/$global/streams/streams","chiselFrontend/target/streams/$global/projectDescriptors/projectDescriptors","chiselFrontend/target/streams/$global/update/$global/$global","chiselFrontend/target/streams/$global/update/$global/streams/streams","chiselFrontend/target/streams/$global/update/$global/streams/update_cache_2.12/update_cache_2.12","chiselFrontend/target/streams/$global/update/update","chiselFrontend/target/streams/compile/$global/$global","chiselFrontend/target/streams/compile/$global/$global/$global","chiselFrontend/target/streams/compile/$global/$global/discoveredMainClasses/discoveredMainClasses","chiselFrontend/target/streams/compile/compile","chiselFrontend/target/streams/compile/compile/$global/$global","chiselFrontend/target/streams/compile/compile/$global/streams/streams","chiselFrontend/target/streams/compile/compile/compile","chiselFrontend/target/streams/compile/compileIncSetup/$global/$global","chiselFrontend/target/streams/compile/compileIncSetup/$global/streams/streams","chiselFrontend/target/streams/compile/compileIncSetup/compileIncSetup","chiselFrontend/target/streams/compile/compileIncremental/$global/$global","chiselFrontend/target/streams/compile/compileIncremental/$global/streams/streams","chiselFrontend/target/streams/compile/compileIncremental/compileIncremental","chiselFrontend/target/streams/compile/copyResources/$global/$global","chiselFrontend/target/streams/compile/copyResources/$global/streams/streams","chiselFrontend/target/streams/compile/copyResources/copyResources","chiselFrontend/target/streams/compile/dependencyClasspath/$global/$global","chiselFrontend/target/streams/compile/dependencyClasspath/$global/streams/streams","chiselFrontend/target/streams/compile/dependencyClasspath/dependencyClasspath","chiselFrontend/target/streams/compile/exportedProducts/$global/$global","chiselFrontend/target/streams/compile/exportedProducts/$global/streams/streams","chiselFrontend/target/streams/compile/exportedProducts/exportedProducts","chiselFrontend/target/streams/compile/externalDependencyClasspath/$global/$global","chiselFrontend/target/streams/compile/externalDependencyClasspath/$global/streams/streams","chiselFrontend/target/streams/compile/externalDependencyClasspath/externalDependencyClasspath","chiselFrontend/target/streams/compile/internalDependencyClasspath/$global/$global","chiselFrontend/target/streams/compile/internalDependencyClasspath/$global/streams/streams","chiselFrontend/target/streams/compile/internalDependencyClasspath/internalDependencyClasspath","chiselFrontend/target/streams/compile/managedClasspath/$global/$global","chiselFrontend/target/streams/compile/managedClasspath/$global/streams/streams","chiselFrontend/target/streams/compile/managedClasspath/managedClasspath","chiselFrontend/target/streams/compile/unmanagedClasspath/$global/$global","chiselFrontend/target/streams/compile/unmanagedClasspath/$global/streams/streams","chiselFrontend/target/streams/compile/unmanagedClasspath/unmanagedClasspath","chiselFrontend/target/streams/compile/unmanagedJars/$global/$global","chiselFrontend/target/streams/compile/unmanagedJars/$global/streams/streams","chiselFrontend/target/streams/compile/unmanagedJars/unmanagedJars","chiselFrontend/target/streams/streams","chiselFrontend/target/target","contents","src/main/main","src/main/resources/chisel3/chisel3","src/main/resources/resources","src/main/scala/chisel3/chisel3","src/main/scala/chisel3/internal/firrtl/firrtl","src/main/scala/chisel3/internal/internal","src/main/scala/chisel3/stage/phases/phases","src/main/scala/chisel3/stage/stage","src/main/scala/chisel3/testers/testers","src/main/scala/chisel3/util/experimental/experimental","src/main/scala/chisel3/util/random/random","src/main/scala/chisel3/util/util","src/main/scala/gcd/GCD","src/main/scala/gcd/gcd","src/main/scala/scala","src/src","src/test/resources/chisel3/chisel3","src/test/resources/resources","src/test/scala/chisel3/chisel3","src/test/scala/chisel3/stage/phases/phases","src/test/scala/chisel3/stage/stage","src/test/scala/chiselTests/chiselTests","src/test/scala/chiselTests/experimental/experimental","src/test/scala/chiselTests/stage/phases/phases","src/test/scala/chiselTests/stage/stage","src/test/scala/chiselTests/util/random/random","src/test/scala/chiselTests/util/util","src/test/scala/cookbook/cookbook","src/test/scala/examples/examples","src/test/scala/gcd/GCD","src/test/scala/gcd/GCDMain","src/test/scala/gcd/GCDUnitTest","src/test/scala/gcd/gcd","src/test/scala/scala","src/test/test"],envversion:{"sphinx.domains.c":1,"sphinx.domains.changeset":1,"sphinx.domains.cpp":1,"sphinx.domains.javascript":1,"sphinx.domains.math":2,"sphinx.domains.python":1,"sphinx.domains.rst":1,"sphinx.domains.std":1,"sphinx.ext.viewcode":1,sphinx:54},filenames:["chiselFrontend/chiselFrontend.rst","chiselFrontend/src/main/main.rst","chiselFrontend/src/main/scala/chisel3/chisel3.rst","chiselFrontend/src/main/scala/chisel3/core/core.rst","chiselFrontend/src/main/scala/chisel3/experimental/experimental.rst","chiselFrontend/src/main/scala/chisel3/internal/firrtl/firrtl.rst","chiselFrontend/src/main/scala/chisel3/internal/internal.rst","chiselFrontend/src/main/scala/scala.rst","chiselFrontend/src/src.rst","chiselFrontend/target/scala-2.12/classes/chisel3/chisel3.rst","chiselFrontend/target/scala-2.12/classes/chisel3/core/core.rst","chiselFrontend/target/scala-2.12/classes/chisel3/experimental/experimental.rst","chiselFrontend/target/scala-2.12/classes/chisel3/internal/firrtl/firrtl.rst","chiselFrontend/target/scala-2.12/classes/chisel3/internal/internal.rst","chiselFrontend/target/scala-2.12/classes/chisel3/internal/naming/naming.rst","chiselFrontend/target/scala-2.12/classes/chisel3/internal/sourceinfo/sourceinfo.rst","chiselFrontend/target/scala-2.12/classes/classes.rst","chiselFrontend/target/scala-2.12/resolution-cache/edu.berkeley.cs/chiselfrontend_2.12/3.2-050719-SNAPSHOT/3.2-050719-SNAPSHOT.rst","chiselFrontend/target/scala-2.12/resolution-cache/edu.berkeley.cs/chiselfrontend_2.12/3.2-SNAPSHOT/3.2-SNAPSHOT.rst","chiselFrontend/target/scala-2.12/resolution-cache/edu.berkeley.cs/chiselfrontend_2.12/chiselfrontend_2.12.rst","chiselFrontend/target/scala-2.12/resolution-cache/edu.berkeley.cs/edu.berkeley.cs.rst","chiselFrontend/target/scala-2.12/resolution-cache/reports/reports.rst","chiselFrontend/target/scala-2.12/resolution-cache/resolution-cache.rst","chiselFrontend/target/scala-2.12/scala-2.12.rst","chiselFrontend/target/streams/$global/$global.rst","chiselFrontend/target/streams/$global/$global/$global.rst","chiselFrontend/target/streams/$global/$global/$global/$global.rst","chiselFrontend/target/streams/$global/$global/$global/streams/streams.rst","chiselFrontend/target/streams/$global/clean/$global/$global.rst","chiselFrontend/target/streams/$global/clean/$global/streams/streams.rst","chiselFrontend/target/streams/$global/clean/clean.rst","chiselFrontend/target/streams/$global/dependencyPositions/$global/$global.rst","chiselFrontend/target/streams/$global/dependencyPositions/$global/streams/streams.rst","chiselFrontend/target/streams/$global/dependencyPositions/$global/streams/update_cache_2.12/update_cache_2.12.rst","chiselFrontend/target/streams/$global/dependencyPositions/dependencyPositions.rst","chiselFrontend/target/streams/$global/ivyConfiguration/$global/$global.rst","chiselFrontend/target/streams/$global/ivyConfiguration/$global/streams/streams.rst","chiselFrontend/target/streams/$global/ivyConfiguration/ivyConfiguration.rst","chiselFrontend/target/streams/$global/ivySbt/$global/$global.rst","chiselFrontend/target/streams/$global/ivySbt/$global/streams/streams.rst","chiselFrontend/target/streams/$global/ivySbt/ivySbt.rst","chiselFrontend/target/streams/$global/projectDescriptors/$global/$global.rst","chiselFrontend/target/streams/$global/projectDescriptors/$global/streams/streams.rst","chiselFrontend/target/streams/$global/projectDescriptors/projectDescriptors.rst","chiselFrontend/target/streams/$global/update/$global/$global.rst","chiselFrontend/target/streams/$global/update/$global/streams/streams.rst","chiselFrontend/target/streams/$global/update/$global/streams/update_cache_2.12/update_cache_2.12.rst","chiselFrontend/target/streams/$global/update/update.rst","chiselFrontend/target/streams/compile/$global/$global.rst","chiselFrontend/target/streams/compile/$global/$global/$global.rst","chiselFrontend/target/streams/compile/$global/$global/discoveredMainClasses/discoveredMainClasses.rst","chiselFrontend/target/streams/compile/compile.rst","chiselFrontend/target/streams/compile/compile/$global/$global.rst","chiselFrontend/target/streams/compile/compile/$global/streams/streams.rst","chiselFrontend/target/streams/compile/compile/compile.rst","chiselFrontend/target/streams/compile/compileIncSetup/$global/$global.rst","chiselFrontend/target/streams/compile/compileIncSetup/$global/streams/streams.rst","chiselFrontend/target/streams/compile/compileIncSetup/compileIncSetup.rst","chiselFrontend/target/streams/compile/compileIncremental/$global/$global.rst","chiselFrontend/target/streams/compile/compileIncremental/$global/streams/streams.rst","chiselFrontend/target/streams/compile/compileIncremental/compileIncremental.rst","chiselFrontend/target/streams/compile/copyResources/$global/$global.rst","chiselFrontend/target/streams/compile/copyResources/$global/streams/streams.rst","chiselFrontend/target/streams/compile/copyResources/copyResources.rst","chiselFrontend/target/streams/compile/dependencyClasspath/$global/$global.rst","chiselFrontend/target/streams/compile/dependencyClasspath/$global/streams/streams.rst","chiselFrontend/target/streams/compile/dependencyClasspath/dependencyClasspath.rst","chiselFrontend/target/streams/compile/exportedProducts/$global/$global.rst","chiselFrontend/target/streams/compile/exportedProducts/$global/streams/streams.rst","chiselFrontend/target/streams/compile/exportedProducts/exportedProducts.rst","chiselFrontend/target/streams/compile/externalDependencyClasspath/$global/$global.rst","chiselFrontend/target/streams/compile/externalDependencyClasspath/$global/streams/streams.rst","chiselFrontend/target/streams/compile/externalDependencyClasspath/externalDependencyClasspath.rst","chiselFrontend/target/streams/compile/internalDependencyClasspath/$global/$global.rst","chiselFrontend/target/streams/compile/internalDependencyClasspath/$global/streams/streams.rst","chiselFrontend/target/streams/compile/internalDependencyClasspath/internalDependencyClasspath.rst","chiselFrontend/target/streams/compile/managedClasspath/$global/$global.rst","chiselFrontend/target/streams/compile/managedClasspath/$global/streams/streams.rst","chiselFrontend/target/streams/compile/managedClasspath/managedClasspath.rst","chiselFrontend/target/streams/compile/unmanagedClasspath/$global/$global.rst","chiselFrontend/target/streams/compile/unmanagedClasspath/$global/streams/streams.rst","chiselFrontend/target/streams/compile/unmanagedClasspath/unmanagedClasspath.rst","chiselFrontend/target/streams/compile/unmanagedJars/$global/$global.rst","chiselFrontend/target/streams/compile/unmanagedJars/$global/streams/streams.rst","chiselFrontend/target/streams/compile/unmanagedJars/unmanagedJars.rst","chiselFrontend/target/streams/streams.rst","chiselFrontend/target/target.rst","contents.rst","src/main/main.rst","src/main/resources/chisel3/chisel3.rst","src/main/resources/resources.rst","src/main/scala/chisel3/chisel3.rst","src/main/scala/chisel3/internal/firrtl/firrtl.rst","src/main/scala/chisel3/internal/internal.rst","src/main/scala/chisel3/stage/phases/phases.rst","src/main/scala/chisel3/stage/stage.rst","src/main/scala/chisel3/testers/testers.rst","src/main/scala/chisel3/util/experimental/experimental.rst","src/main/scala/chisel3/util/random/random.rst","src/main/scala/chisel3/util/util.rst","src/main/scala/gcd/GCD.rst","src/main/scala/gcd/gcd.rst","src/main/scala/scala.rst","src/src.rst","src/test/resources/chisel3/chisel3.rst","src/test/resources/resources.rst","src/test/scala/chisel3/chisel3.rst","src/test/scala/chisel3/stage/phases/phases.rst","src/test/scala/chisel3/stage/stage.rst","src/test/scala/chiselTests/chiselTests.rst","src/test/scala/chiselTests/experimental/experimental.rst","src/test/scala/chiselTests/stage/phases/phases.rst","src/test/scala/chiselTests/stage/stage.rst","src/test/scala/chiselTests/util/random/random.rst","src/test/scala/chiselTests/util/util.rst","src/test/scala/cookbook/cookbook.rst","src/test/scala/examples/examples.rst","src/test/scala/gcd/GCD.rst","src/test/scala/gcd/GCDMain.rst","src/test/scala/gcd/GCDUnitTest.rst","src/test/scala/gcd/gcd.rst","src/test/scala/scala.rst","src/test/test.rst"],objects:{"":{"* class Foo extends Module with Internals with InlineInstance with HasSub *":[97,0,0,"attr-* class Foo extends Module with Internals with InlineInstance with HasSub *"],"* class Top extends Module with Internals":[97,0,0,"attr-* class Top extends Module with Internals"],"\"running with --generate-vcd-output on\" should \"create a vcd file from your test\" in":[119,0,0,"attr-\"running with --generate-vcd-output on\" should \"create a vcd file from your test\" in"],"abstract class AnalogDUTModule(numBlackBoxes: Int) extends Module":[109,0,0,"attr-abstract class AnalogDUTModule(numBlackBoxes: Int) extends Module"],"abstract class AnalogTester extends BasicTester":[109,0,0,"attr-abstract class AnalogTester extends BasicTester"],"abstract class Arg":[5,0,0,"attr-abstract class Arg"],"abstract class BaseBlackBox extends BaseModule":[3,0,0,"attr-abstract class BaseBlackBox extends BaseModule"],"abstract class BaseModule extends HasId":[3,0,0,"attr-abstract class BaseModule extends HasId"],"abstract class BlackBox(val params: Map[String, Param]":[3,0,0,"attr-abstract class BlackBox(val params: Map[String, Param]"],"abstract class Bundle(implicit compileOptions: CompileOptions) extends Record":[3,0,0,"attr-abstract class Bundle(implicit compileOptions: CompileOptions) extends Record"],"abstract class ChiselFlatSpec extends FlatSpec with ChiselRunners with Matchers  class ChiselTestUtilitiesSpec extends ChiselFlatSpec":[109,0,0,"attr-abstract class ChiselFlatSpec extends FlatSpec with ChiselRunners with Matchers  class ChiselTestUtilitiesSpec extends ChiselFlatSpec"],"abstract class ChiselFlatSpec extends FlatSpec with ChiselRunners with Matchers":[109,0,0,"attr-abstract class ChiselFlatSpec extends FlatSpec with ChiselRunners with Matchers"],"abstract class Command":[5,0,0,"attr-abstract class Command"],"abstract class Component extends Arg":[5,0,0,"attr-abstract class Component extends Arg"],"abstract class CookbookSpec extends ChiselFlatSpec":[115,0,0,"attr-abstract class CookbookSpec extends ChiselFlatSpec"],"abstract class CookbookTester(length: Int) extends BasicTester":[115,0,0,"attr-abstract class CookbookTester(length: Int) extends BasicTester"],"abstract class CrossCheck extends Bundle":[109,0,0,"attr-abstract class CrossCheck extends Bundle"],"abstract class Data extends HasId with NamedComponent with SourceInfoDoc":[3,0,0,"attr-abstract class Data extends HasId with NamedComponent with SourceInfoDoc"],"abstract class Definition extends Command":[5,0,0,"attr-abstract class Definition extends Command"],"abstract class Element extends Data":[3,0,0,"attr-abstract class Element extends Data"],"abstract class EnumFactory":[3,0,0,"attr-abstract class EnumFactory"],"abstract class EnumType(private val factory: EnumFactory, selfAnnotating: Boolean":[3,0,0,"attr-abstract class EnumType(private val factory: EnumFactory, selfAnnotating: Boolean"],"abstract class ExtModule(val params: Map[String, Param]":[3,0,0,"attr-abstract class ExtModule(val params: Map[String, Param]"],"abstract class LegacyModule(implicit moduleCompileOptions: CompileOptions) extends MultiIOModule":[3,0,0,"attr-abstract class LegacyModule(implicit moduleCompileOptions: CompileOptions) extends MultiIOModule"],"abstract class LitArg(val num: BigInt, widthArg: Width) extends Arg":[5,0,0,"attr-abstract class LitArg(val num: BigInt, widthArg: Width) extends Arg"],"abstract class LockingArbiterLike[T &lt;: Data](gen: T, n: Int, count: Int, needsLock: Option[T =&gt; Bool]) extends Module":[99,0,0,"attr-abstract class LockingArbiterLike[T <: Data](gen: T, n: Int, count: Int, needsLock: Option[T => Bool]) extends Module"],"abstract class MultiIOModule(implicit moduleCompileOptions: CompileOptions) extends RawModule":[3,0,0,"attr-abstract class MultiIOModule(implicit moduleCompileOptions: CompileOptions) extends RawModule"],"abstract class PRNG(val width: Int, val seed: Option[BigInt], step: Int = 1, updateSeed: Boolean = false) extends Module":[98,0,0,"attr-abstract class PRNG(val width: Int, val seed: Option[BigInt], step: Int = 1, updateSeed: Boolean = false) extends Module"],"abstract class PRNG(val width: Int, val seed: Option[BigInt], step: Int":[98,0,0,"attr-abstract class PRNG(val width: Int, val seed: Option[BigInt], step: Int"],"abstract class ParameterizedVendingMachine(legalCoins: Seq[Coin], val sodaCost: Int) extends Module":[116,0,0,"attr-abstract class ParameterizedVendingMachine(legalCoins: Seq[Coin], val sodaCost: Int) extends Module"],"abstract class RawModule(implicit moduleCompileOptions: CompileOptions) extends BaseModule":[3,0,0,"attr-abstract class RawModule(implicit moduleCompileOptions: CompileOptions) extends BaseModule"],"abstract class ReadyValidIO[+T &lt;: Data](gen: T) extends Bundle":[99,0,0,"attr-abstract class ReadyValidIO[+T <: Data](gen: T) extends Bundle"],"abstract class Record(private[chisel3] implicit val compileOptions: CompileOptions) extends Aggregate":[3,0,0,"attr-abstract class Record(private[chisel3] implicit val compileOptions: CompileOptions) extends Aggregate"],"abstract class ShouldntAssertTester(cyclesToWait: BigInt":[109,0,0,"attr-abstract class ShouldntAssertTester(cyclesToWait: BigInt"],"abstract class SimpleVendingMachine extends Module":[116,0,0,"attr-abstract class SimpleVendingMachine extends Module"],"abstract class WireDefaultRegInitSpecImpl extends ChiselFlatSpec":[109,0,0,"attr-abstract class WireDefaultRegInitSpecImpl extends ChiselFlatSpec"],"abstract class WireRegWidthSpecImpl extends ChiselFlatSpec":[109,0,0,"attr-abstract class WireRegWidthSpecImpl extends ChiselFlatSpec"],"abstract trait Num[T &lt;: Data]":[3,0,0,"attr-abstract trait Num[T <: Data]"],"case class AltBegin(sourceInfo: SourceInfo) extends Command case class OtherwiseEnd(sourceInfo: SourceInfo, firrtlDepth: Int) extends Command case class Connect(sourceInfo: SourceInfo, loc: Node, exp: Arg) extends Command":[5,0,0,"attr-case class AltBegin(sourceInfo: SourceInfo) extends Command case class OtherwiseEnd(sourceInfo: SourceInfo, firrtlDepth: Int) extends Command case class Connect(sourceInfo: SourceInfo, loc: Node, exp: Arg) extends Command"],"case class Attach(sourceInfo: SourceInfo, locs: Seq[Node]) extends Command case class ConnectInit(sourceInfo: SourceInfo, loc: Node, exp: Arg) extends Command case class Stop(sourceInfo: SourceInfo, clock: Arg, ret: Int) extends Command":[5,0,0,"attr-case class Attach(sourceInfo: SourceInfo, locs: Seq[Node]) extends Command case class ConnectInit(sourceInfo: SourceInfo, loc: Node, exp: Arg) extends Command case class Stop(sourceInfo: SourceInfo, clock: Arg, ret: Int) extends Command"],"case class Binary(bits: Bits) extends FirrtlFormat('b')":[3,0,0,"attr-case class Binary(bits: Bits) extends FirrtlFormat('b')"],"case class BulkConnect(sourceInfo: SourceInfo, loc1: Node, loc2: Node) extends Command case class Attach(sourceInfo: SourceInfo, locs: Seq[Node]) extends Command case class ConnectInit(sourceInfo: SourceInfo, loc: Node, exp: Arg) extends Command":[5,0,0,"attr-case class BulkConnect(sourceInfo: SourceInfo, loc1: Node, loc2: Node) extends Command case class Attach(sourceInfo: SourceInfo, locs: Seq[Node]) extends Command case class ConnectInit(sourceInfo: SourceInfo, loc: Node, exp: Arg) extends Command"],"case class BundleLitBinding(litMap: Map[Data, LitArg]) extends LitBinding":[6,0,0,"attr-case class BundleLitBinding(litMap: Map[Data, LitArg]) extends LitBinding"],"case class Character(bits: Bits) extends FirrtlFormat('c')":[3,0,0,"attr-case class Character(bits: Bits) extends FirrtlFormat('c')"],"case class ChildBinding(parent: Data) extends Binding":[6,0,0,"attr-case class ChildBinding(parent: Data) extends Binding"],"case class ChiselCircuitAnnotation(circuit: Circuit) extends NoTargetAnnotation with ChiselOption  case class ChiselOutputFileAnnotation(file: String) extends NoTargetAnnotation with ChiselOption":[95,0,0,"attr-case class ChiselCircuitAnnotation(circuit: Circuit) extends NoTargetAnnotation with ChiselOption  case class ChiselOutputFileAnnotation(file: String) extends NoTargetAnnotation with ChiselOption"],"case class ChiselCircuitAnnotation(circuit: Circuit) extends NoTargetAnnotation with ChiselOption":[95,0,0,"attr-case class ChiselCircuitAnnotation(circuit: Circuit) extends NoTargetAnnotation with ChiselOption"],"case class ChiselExecutionFailure(message: String) extends ChiselExecutionResult  object Driver extends BackendCompilationUtilities":[91,0,0,"attr-case class ChiselExecutionFailure(message: String) extends ChiselExecutionResult  object Driver extends BackendCompilationUtilities"],"case class ChiselExecutionFailure(message: String) extends ChiselExecutionResult":[91,0,0,"attr-case class ChiselExecutionFailure(message: String) extends ChiselExecutionResult"],"case class ChiselExecutionOptions(runFirrtlCompiler: Boolean = true, printFullStackTrace: Boolean = false":[91,0,0,"attr-case class ChiselExecutionOptions(runFirrtlCompiler: Boolean = true, printFullStackTrace: Boolean = false"],"case class ChiselExecutionOptions(runFirrtlCompiler: Boolean":[91,0,0,"attr-case class ChiselExecutionOptions(runFirrtlCompiler: Boolean"],"case class ChiselExecutionSuccess(circuitOption: Option[Circuit], emitted: String, firrtlResultOption: Option[FirrtlExecutionResult] ) extends ChiselExecutionResult":[91,0,0,"attr-case class ChiselExecutionSuccess(circuitOption: Option[Circuit], emitted: String, firrtlResultOption: Option[FirrtlExecutionResult] ) extends ChiselExecutionResult"],"case class ChiselGeneratorAnnotation(gen: () =&gt; RawModule) extends NoTargetAnnotation with Unserializable":[95,0,0,"attr-case class ChiselGeneratorAnnotation(gen: () => RawModule) extends NoTargetAnnotation with Unserializable"],"case class ChiselOutputFileAnnotation(file: String) extends NoTargetAnnotation with ChiselOption  object ChiselOutputFileAnnotation extends HasShellOptions":[95,0,0,"attr-case class ChiselOutputFileAnnotation(file: String) extends NoTargetAnnotation with ChiselOption  object ChiselOutputFileAnnotation extends HasShellOptions"],"case class Circuit(name: String, components: Seq[Component], annotations: Seq[ChiselAnnotation]":[5,0,0,"attr-case class Circuit(name: String, components: Seq[Component], annotations: Seq[ChiselAnnotation]"],"case class Connect(sourceInfo: SourceInfo, loc: Node, exp: Arg) extends Command case class BulkConnect(sourceInfo: SourceInfo, loc1: Node, loc2: Node) extends Command case class Attach(sourceInfo: SourceInfo, locs: Seq[Node]) extends Command":[5,0,0,"attr-case class Connect(sourceInfo: SourceInfo, loc: Node, exp: Arg) extends Command case class BulkConnect(sourceInfo: SourceInfo, loc1: Node, loc2: Node) extends Command case class Attach(sourceInfo: SourceInfo, locs: Seq[Node]) extends Command"],"case class ConnectInit(sourceInfo: SourceInfo, loc: Node, exp: Arg) extends Command case class Stop(sourceInfo: SourceInfo, clock: Arg, ret: Int) extends Command case class Port(id: Data, dir: SpecifiedDirection)":[5,0,0,"attr-case class ConnectInit(sourceInfo: SourceInfo, loc: Node, exp: Arg) extends Command case class Stop(sourceInfo: SourceInfo, clock: Arg, ret: Int) extends Command case class Port(id: Data, dir: SpecifiedDirection)"],"case class ConvertSpecChiselAnnotation(name: String) extends ChiselAnnotation with RunFirrtlTransform":[111,0,0,"attr-case class ConvertSpecChiselAnnotation(name: String) extends ChiselAnnotation with RunFirrtlTransform"],"case class ConvertSpecFirrtlAnnotation(name: String) extends NoTargetAnnotation  case class ConvertSpecChiselAnnotation(name: String) extends ChiselAnnotation with RunFirrtlTransform":[111,0,0,"attr-case class ConvertSpecFirrtlAnnotation(name: String) extends NoTargetAnnotation  case class ConvertSpecChiselAnnotation(name: String) extends ChiselAnnotation with RunFirrtlTransform"],"case class Decimal(bits: Bits) extends FirrtlFormat('d')":[3,0,0,"attr-case class Decimal(bits: Bits) extends FirrtlFormat('d')"],"case class DefBlackBox(id: BaseBlackBox, name: String, ports: Seq[Port], topDir: SpecifiedDirection, params: Map[String, Param]) extends Component  case class Circuit(name: String, components: Seq[Component], annotations: Seq[ChiselAnnotation]":[5,0,0,"attr-case class DefBlackBox(id: BaseBlackBox, name: String, ports: Seq[Port], topDir: SpecifiedDirection, params: Map[String, Param]) extends Component  case class Circuit(name: String, components: Seq[Component], annotations: Seq[ChiselAnnotation]"],"case class DefInstance(sourceInfo: SourceInfo, id: BaseModule, ports: Seq[Port]) extends Definition case class WhenBegin(sourceInfo: SourceInfo, pred: Arg) extends Command case class WhenEnd(sourceInfo: SourceInfo, firrtlDepth: Int, hasAlt: Boolean":[5,0,0,"attr-case class DefInstance(sourceInfo: SourceInfo, id: BaseModule, ports: Seq[Port]) extends Definition case class WhenBegin(sourceInfo: SourceInfo, pred: Arg) extends Command case class WhenEnd(sourceInfo: SourceInfo, firrtlDepth: Int, hasAlt: Boolean"],"case class DefInvalid(sourceInfo: SourceInfo, arg: Arg) extends Command case class DefWire(sourceInfo: SourceInfo, id: Data) extends Definition case class DefReg(sourceInfo: SourceInfo, id: Data, clock: Arg) extends Definition":[5,0,0,"attr-case class DefInvalid(sourceInfo: SourceInfo, arg: Arg) extends Command case class DefWire(sourceInfo: SourceInfo, id: Data) extends Definition case class DefReg(sourceInfo: SourceInfo, id: Data, clock: Arg) extends Definition"],"case class DefMemPort[T &lt;: Data](sourceInfo: SourceInfo, id: T, source: Node, dir: MemPortDirection, index: Arg, clock: Arg) extends Definition case class DefInstance(sourceInfo: SourceInfo, id: BaseModule, ports: Seq[Port]) extends Definition case class WhenBegin(sourceInfo: SourceInfo, pred: Arg) extends Command":[5,0,0,"attr-case class DefMemPort[T <: Data](sourceInfo: SourceInfo, id: T, source: Node, dir: MemPortDirection, index: Arg, clock: Arg) extends Definition case class DefInstance(sourceInfo: SourceInfo, id: BaseModule, ports: Seq[Port]) extends Definition case class WhenBegin(sourceInfo: SourceInfo, pred: Arg) extends Command"],"case class DefMemory(sourceInfo: SourceInfo, id: HasId, t: Data, size: BigInt) extends Definition case class DefSeqMemory(sourceInfo: SourceInfo, id: HasId, t: Data, size: BigInt) extends Definition case class DefMemPort[T &lt;: Data](sourceInfo: SourceInfo, id: T, source: Node, dir: MemPortDirection, index: Arg, clock: Arg) extends Definition":[5,0,0,"attr-case class DefMemory(sourceInfo: SourceInfo, id: HasId, t: Data, size: BigInt) extends Definition case class DefSeqMemory(sourceInfo: SourceInfo, id: HasId, t: Data, size: BigInt) extends Definition case class DefMemPort[T <: Data](sourceInfo: SourceInfo, id: T, source: Node, dir: MemPortDirection, index: Arg, clock: Arg) extends Definition"],"case class DefModule(id: RawModule, name: String, ports: Seq[Port], commands: Seq[Command]) extends Component case class DefBlackBox(id: BaseBlackBox, name: String, ports: Seq[Port], topDir: SpecifiedDirection, params: Map[String, Param]) extends Component  case class Circuit(name: String, components: Seq[Component], annotations: Seq[ChiselAnnotation]":[5,0,0,"attr-case class DefModule(id: RawModule, name: String, ports: Seq[Port], commands: Seq[Command]) extends Component case class DefBlackBox(id: BaseBlackBox, name: String, ports: Seq[Port], topDir: SpecifiedDirection, params: Map[String, Param]) extends Component  case class Circuit(name: String, components: Seq[Component], annotations: Seq[ChiselAnnotation]"],"case class DefPrim[T &lt;: Data](sourceInfo: SourceInfo, id: T, op: PrimOp, args: Arg*) extends Definition case class DefInvalid(sourceInfo: SourceInfo, arg: Arg) extends Command case class DefWire(sourceInfo: SourceInfo, id: Data) extends Definition":[5,0,0,"attr-case class DefPrim[T <: Data](sourceInfo: SourceInfo, id: T, op: PrimOp, args: Arg*) extends Definition case class DefInvalid(sourceInfo: SourceInfo, arg: Arg) extends Command case class DefWire(sourceInfo: SourceInfo, id: Data) extends Definition"],"case class DefReg(sourceInfo: SourceInfo, id: Data, clock: Arg) extends Definition case class DefRegInit(sourceInfo: SourceInfo, id: Data, clock: Arg, reset: Arg, init: Arg) extends Definition case class DefMemory(sourceInfo: SourceInfo, id: HasId, t: Data, size: BigInt) extends Definition":[5,0,0,"attr-case class DefReg(sourceInfo: SourceInfo, id: Data, clock: Arg) extends Definition case class DefRegInit(sourceInfo: SourceInfo, id: Data, clock: Arg, reset: Arg, init: Arg) extends Definition case class DefMemory(sourceInfo: SourceInfo, id: HasId, t: Data, size: BigInt) extends Definition"],"case class DefRegInit(sourceInfo: SourceInfo, id: Data, clock: Arg, reset: Arg, init: Arg) extends Definition case class DefMemory(sourceInfo: SourceInfo, id: HasId, t: Data, size: BigInt) extends Definition case class DefSeqMemory(sourceInfo: SourceInfo, id: HasId, t: Data, size: BigInt) extends Definition":[5,0,0,"attr-case class DefRegInit(sourceInfo: SourceInfo, id: Data, clock: Arg, reset: Arg, init: Arg) extends Definition case class DefMemory(sourceInfo: SourceInfo, id: HasId, t: Data, size: BigInt) extends Definition case class DefSeqMemory(sourceInfo: SourceInfo, id: HasId, t: Data, size: BigInt) extends Definition"],"case class DefSeqMemory(sourceInfo: SourceInfo, id: HasId, t: Data, size: BigInt) extends Definition case class DefMemPort[T &lt;: Data](sourceInfo: SourceInfo, id: T, source: Node, dir: MemPortDirection, index: Arg, clock: Arg) extends Definition case class DefInstance(sourceInfo: SourceInfo, id: BaseModule, ports: Seq[Port]) extends Definition":[5,0,0,"attr-case class DefSeqMemory(sourceInfo: SourceInfo, id: HasId, t: Data, size: BigInt) extends Definition case class DefMemPort[T <: Data](sourceInfo: SourceInfo, id: T, source: Node, dir: MemPortDirection, index: Arg, clock: Arg) extends Definition case class DefInstance(sourceInfo: SourceInfo, id: BaseModule, ports: Seq[Port]) extends Definition"],"case class DefWire(sourceInfo: SourceInfo, id: Data) extends Definition case class DefReg(sourceInfo: SourceInfo, id: Data, clock: Arg) extends Definition case class DefRegInit(sourceInfo: SourceInfo, id: Data, clock: Arg, reset: Arg, init: Arg) extends Definition":[5,0,0,"attr-case class DefWire(sourceInfo: SourceInfo, id: Data) extends Definition case class DefReg(sourceInfo: SourceInfo, id: Data, clock: Arg) extends Definition case class DefRegInit(sourceInfo: SourceInfo, id: Data, clock: Arg, reset: Arg, init: Arg) extends Definition"],"case class DontCareBinding() extends UnconstrainedBinding  sealed trait LitBinding extends UnconstrainedBinding with ReadOnlyBinding":[6,0,0,"attr-case class DontCareBinding() extends UnconstrainedBinding  sealed trait LitBinding extends UnconstrainedBinding with ReadOnlyBinding"],"case class DoubleParam(value: Double) extends Param case class StringParam(value: String) extends Param":[3,0,0,"attr-case class DoubleParam(value: Double) extends Param case class StringParam(value: String) extends Param"],"case class ElementLitBinding(litArg: LitArg) extends LitBinding":[6,0,0,"attr-case class ElementLitBinding(litArg: LitArg) extends LitBinding"],"case class EnumComponentAnnotation(target: Named, enumTypeName: String) extends SingleTargetAnnotation[Named]":[3,0,0,"attr-case class EnumComponentAnnotation(target: Named, enumTypeName: String) extends SingleTargetAnnotation[Named]"],"case class EnumDefAnnotation(typeName: String, definition: Map[String, BigInt]) extends NoTargetAnnotation":[3,0,0,"attr-case class EnumDefAnnotation(typeName: String, definition: Map[String, BigInt]) extends NoTargetAnnotation"],"case class EnumVecAnnotation(target: Named, typeName: String, fields: Seq[Seq[String]]) extends SingleTargetAnnotation[Named]":[3,0,0,"attr-case class EnumVecAnnotation(target: Named, typeName: String, fields: Seq[Seq[String]]) extends SingleTargetAnnotation[Named]"],"case class ExpectedChiselTypeException(message: String) extends BindingException(message)":[3,0,0,"attr-case class ExpectedChiselTypeException(message: String) extends BindingException(message)"],"case class ExpectedHardwareException(message: String) extends BindingException(message)":[3,0,0,"attr-case class ExpectedHardwareException(message: String) extends BindingException(message)"],"case class FPLit(n: BigInt, w: Width, binaryPoint: BinaryPoint) extends LitArg(n, w)":[5,0,0,"attr-case class FPLit(n: BigInt, w: Width, binaryPoint: BinaryPoint) extends LitArg(n, w)"],"case class FullName(data: Data) extends Printable":[3,0,0,"attr-case class FullName(data: Data) extends Printable"],"case class Hexadecimal(bits: Bits) extends FirrtlFormat('x')":[3,0,0,"attr-case class Hexadecimal(bits: Bits) extends FirrtlFormat('x')"],"case class ILit(n: BigInt) extends Arg":[5,0,0,"attr-case class ILit(n: BigInt) extends Arg"],"case class IdentityAnnotation(target: Named, value: String) extends SingleTargetAnnotation[Named]":[109,0,0,"attr-case class IdentityAnnotation(target: Named, value: String) extends SingleTargetAnnotation[Named]"],"case class IdentityChiselAnnotation(target: InstanceId, value: String) extends ChiselAnnotation with RunFirrtlTransform":[109,0,0,"attr-case class IdentityChiselAnnotation(target: InstanceId, value: String) extends ChiselAnnotation with RunFirrtlTransform"],"case class Index(imm: Arg, value: Arg) extends Arg":[5,0,0,"attr-case class Index(imm: Arg, value: Arg) extends Arg"],"case class IntParam(value: BigInt) extends Param case class DoubleParam(value: Double) extends Param case class StringParam(value: String) extends Param":[3,0,0,"attr-case class IntParam(value: BigInt) extends Param case class DoubleParam(value: Double) extends Param case class StringParam(value: String) extends Param"],"case class MemoryPortBinding(enclosure: RawModule) extends ConstrainedBinding case class PortBinding(enclosure: BaseModule) extends ConstrainedBinding case class RegBinding(enclosure: RawModule) extends ConstrainedBinding":[6,0,0,"attr-case class MemoryPortBinding(enclosure: RawModule) extends ConstrainedBinding case class PortBinding(enclosure: BaseModule) extends ConstrainedBinding case class RegBinding(enclosure: RawModule) extends ConstrainedBinding"],"case class MixedDirectionAggregateException(message: String) extends BindingException(message)":[3,0,0,"attr-case class MixedDirectionAggregateException(message: String) extends BindingException(message)"],"case class ModuleIO(mod: BaseModule, name: String) extends Arg":[5,0,0,"attr-case class ModuleIO(mod: BaseModule, name: String) extends Arg"],"case class Name(data: Data) extends Printable":[3,0,0,"attr-case class Name(data: Data) extends Printable"],"case class Node(id: HasId) extends Arg":[5,0,0,"attr-case class Node(id: HasId) extends Arg"],"case class OpBinding(enclosure: RawModule) extends ConstrainedBinding with ReadOnlyBinding case class MemoryPortBinding(enclosure: RawModule) extends ConstrainedBinding case class PortBinding(enclosure: BaseModule) extends ConstrainedBinding":[6,0,0,"attr-case class OpBinding(enclosure: RawModule) extends ConstrainedBinding with ReadOnlyBinding case class MemoryPortBinding(enclosure: RawModule) extends ConstrainedBinding case class PortBinding(enclosure: BaseModule) extends ConstrainedBinding"],"case class OtherwiseEnd(sourceInfo: SourceInfo, firrtlDepth: Int) extends Command case class Connect(sourceInfo: SourceInfo, loc: Node, exp: Arg) extends Command case class BulkConnect(sourceInfo: SourceInfo, loc1: Node, loc2: Node) extends Command":[5,0,0,"attr-case class OtherwiseEnd(sourceInfo: SourceInfo, firrtlDepth: Int) extends Command case class Connect(sourceInfo: SourceInfo, loc: Node, exp: Arg) extends Command case class BulkConnect(sourceInfo: SourceInfo, loc1: Node, loc2: Node) extends Command"],"case class PString(str: String) extends Printable":[3,0,0,"attr-case class PString(str: String) extends Printable"],"case class Port(id: Data, dir: SpecifiedDirection) case class Printf(sourceInfo: SourceInfo, clock: Arg, pable: Printable) extends Command abstract class Component extends Arg":[5,0,0,"attr-case class Port(id: Data, dir: SpecifiedDirection) case class Printf(sourceInfo: SourceInfo, clock: Arg, pable: Printable) extends Command abstract class Component extends Arg"],"case class PortBinding(enclosure: BaseModule) extends ConstrainedBinding case class RegBinding(enclosure: RawModule) extends ConstrainedBinding case class WireBinding(enclosure: RawModule) extends ConstrainedBinding":[6,0,0,"attr-case class PortBinding(enclosure: BaseModule) extends ConstrainedBinding case class RegBinding(enclosure: RawModule) extends ConstrainedBinding case class WireBinding(enclosure: RawModule) extends ConstrainedBinding"],"case class PrimOp(val name: String)":[5,0,0,"attr-case class PrimOp(val name: String)"],"case class Printables(pables: Iterable[Printable]) extends Printable":[3,0,0,"attr-case class Printables(pables: Iterable[Printable]) extends Printable"],"case class Printf(sourceInfo: SourceInfo, clock: Arg, pable: Printable) extends Command abstract class Component extends Arg":[5,0,0,"attr-case class Printf(sourceInfo: SourceInfo, clock: Arg, pable: Printable) extends Command abstract class Component extends Arg"],"case class RawParam(value: String) extends Param  abstract class BaseBlackBox extends BaseModule":[3,0,0,"attr-case class RawParam(value: String) extends Param  abstract class BaseBlackBox extends BaseModule"],"case class RawParam(value: String) extends Param":[3,0,0,"attr-case class RawParam(value: String) extends Param"],"case class RebindingException(message: String) extends BindingException(message)":[3,0,0,"attr-case class RebindingException(message: String) extends BindingException(message)"],"case class Ref(name: String) extends Arg case class ModuleIO(mod: BaseModule, name: String) extends Arg":[5,0,0,"attr-case class Ref(name: String) extends Arg case class ModuleIO(mod: BaseModule, name: String) extends Arg"],"case class RegBinding(enclosure: RawModule) extends ConstrainedBinding case class WireBinding(enclosure: RawModule) extends ConstrainedBinding  case class ChildBinding(parent: Data) extends Binding":[6,0,0,"attr-case class RegBinding(enclosure: RawModule) extends ConstrainedBinding case class WireBinding(enclosure: RawModule) extends ConstrainedBinding  case class ChildBinding(parent: Data) extends Binding"],"case class SLit(n: BigInt, w: Width) extends LitArg(n, w)":[5,0,0,"attr-case class SLit(n: BigInt, w: Width) extends LitArg(n, w)"],"case class SampleElementBinding[T &lt;: Data](parent: Vec[T]) extends Binding":[6,0,0,"attr-case class SampleElementBinding[T <: Data](parent: Vec[T]) extends Binding"],"case class Slot(imm: Node, name: String) extends Arg":[5,0,0,"attr-case class Slot(imm: Node, name: String) extends Arg"],"case class SourceLine(filename: String, line: Int, col: Int) extends SourceInfo":[6,0,0,"attr-case class SourceLine(filename: String, line: Int, col: Int) extends SourceInfo"],"case class Stop(sourceInfo: SourceInfo, clock: Arg, ret: Int) extends Command case class Port(id: Data, dir: SpecifiedDirection) case class Printf(sourceInfo: SourceInfo, clock: Arg, pable: Printable) extends Command":[5,0,0,"attr-case class Stop(sourceInfo: SourceInfo, clock: Arg, ret: Int) extends Command case class Port(id: Data, dir: SpecifiedDirection) case class Printf(sourceInfo: SourceInfo, clock: Arg, pable: Printable) extends Command"],"case class StringParam(value: String) extends Param":[3,0,0,"attr-case class StringParam(value: String) extends Param"],"case class ULit(n: BigInt, w: Width) extends LitArg(n, w)":[5,0,0,"attr-case class ULit(n: BigInt, w: Width) extends LitArg(n, w)"],"case class WhenBegin(sourceInfo: SourceInfo, pred: Arg) extends Command case class WhenEnd(sourceInfo: SourceInfo, firrtlDepth: Int, hasAlt: Boolean":[5,0,0,"attr-case class WhenBegin(sourceInfo: SourceInfo, pred: Arg) extends Command case class WhenEnd(sourceInfo: SourceInfo, firrtlDepth: Int, hasAlt: Boolean"],"case class WhenEnd(sourceInfo: SourceInfo, firrtlDepth: Int, hasAlt: Boolean":[5,0,0,"attr-case class WhenEnd(sourceInfo: SourceInfo, firrtlDepth: Int, hasAlt: Boolean"],"case class WireBinding(enclosure: RawModule) extends ConstrainedBinding  case class ChildBinding(parent: Data) extends Binding":[6,0,0,"attr-case class WireBinding(enclosure: RawModule) extends ConstrainedBinding  case class ChildBinding(parent: Data) extends Binding"],"case object DeprecatedSourceInfo extends NoSourceInfo":[6,0,0,"attr-case object DeprecatedSourceInfo extends NoSourceInfo"],"case object Empty extends ActualDirection":[3,0,0,"attr-case object Empty extends ActualDirection"],"case object Flip extends SpecifiedDirection":[3,0,0,"attr-case object Flip extends SpecifiedDirection"],"case object Input extends ActualDirection":[3,0,0,"attr-case object Input extends ActualDirection"],"case object Input extends BindingDirection":[6,0,0,"attr-case object Input extends BindingDirection"],"case object Input extends SpecifiedDirection":[3,0,0,"attr-case object Input extends SpecifiedDirection"],"case object Internal extends BindingDirection":[6,0,0,"attr-case object Internal extends BindingDirection"],"case object NoRunFirrtlCompilerAnnotation extends NoTargetAnnotation with ChiselOption with HasShellOptions":[95,0,0,"attr-case object NoRunFirrtlCompilerAnnotation extends NoTargetAnnotation with ChiselOption with HasShellOptions"],"case object Output extends ActualDirection":[3,0,0,"attr-case object Output extends ActualDirection"],"case object Output extends BindingDirection":[6,0,0,"attr-case object Output extends BindingDirection"],"case object Output extends SpecifiedDirection":[3,0,0,"attr-case object Output extends SpecifiedDirection"],"case object Percent extends Printable":[3,0,0,"attr-case object Percent extends Printable"],"case object PrintFullStackTraceAnnotation extends NoTargetAnnotation with ChiselOption with HasShellOptions":[95,0,0,"attr-case object PrintFullStackTraceAnnotation extends NoTargetAnnotation with ChiselOption with HasShellOptions"],"case object UnknownBinaryPoint extends BinaryPoint":[5,0,0,"attr-case object UnknownBinaryPoint extends BinaryPoint"],"case object UnlocatableSourceInfo extends NoSourceInfo":[6,0,0,"attr-case object UnlocatableSourceInfo extends NoSourceInfo"],"case object Unspecified extends ActualDirection":[3,0,0,"attr-case object Unspecified extends ActualDirection"],"case object Unspecified extends SpecifiedDirection":[3,0,0,"attr-case object Unspecified extends SpecifiedDirection"],"class ASCIIPrintableTester extends BasicTester":[109,0,0,"attr-class ASCIIPrintableTester extends BasicTester"],"class ASCIIPrintfTester() extends BasicTester":[109,0,0,"attr-class ASCIIPrintfTester() extends BasicTester"],"class AddImplicitOutputAnnotationFile extends Phase":[94,0,0,"attr-class AddImplicitOutputAnnotationFile extends Phase"],"class AddImplicitOutputAnnotationFileSpec extends FlatSpec with Matchers":[111,0,0,"attr-class AddImplicitOutputAnnotationFileSpec extends FlatSpec with Matchers"],"class AddImplicitOutputFile extends Phase":[94,0,0,"attr-class AddImplicitOutputFile extends Phase"],"class AddImplicitOutputFileSpec extends FlatSpec with Matchers":[111,0,0,"attr-class AddImplicitOutputFileSpec extends FlatSpec with Matchers"],"class Agg1 extends Bundle":[109,0,0,"attr-class Agg1 extends Bundle"],"class Agg2 extends Bundle":[109,0,0,"attr-class Agg2 extends Bundle"],"class AliasedAggregateFieldException(message: String) extends ChiselException(message)":[3,0,0,"attr-class AliasedAggregateFieldException(message: String) extends ChiselException(message)"],"class AllSameFixedPointOneHotTester extends BasicTester":[109,0,0,"attr-class AllSameFixedPointOneHotTester extends BasicTester"],"class AnalogBlackBox(index: Int) extends BlackBox(Map(\"index\" -&gt; index))":[109,0,0,"attr-class AnalogBlackBox(index: Int) extends BlackBox(Map(\"index\" -> index))"],"class AnalogBlackBoxIO(val n: Int) extends Bundle":[109,0,0,"attr-class AnalogBlackBoxIO(val n: Int) extends Bundle"],"class AnalogBlackBoxModule(index: Int) extends Module":[109,0,0,"attr-class AnalogBlackBoxModule(index: Int) extends Module"],"class AnalogBlackBoxPort extends Bundle":[109,0,0,"attr-class AnalogBlackBoxPort extends Bundle"],"class AnalogBlackBoxWrapper(n: Int, idxs: Seq[Int]) extends Module":[109,0,0,"attr-class AnalogBlackBoxWrapper(n: Int, idxs: Seq[Int]) extends Module"],"class AnalogConnector extends Module":[109,0,0,"attr-class AnalogConnector extends Module"],"class AnalogDUT extends AnalogDUTModule(5)":[109,0,0,"attr-class AnalogDUT extends AnalogDUTModule(5)"],"class AnalogIntegrationSpec extends ChiselFlatSpec":[109,0,0,"attr-class AnalogIntegrationSpec extends ChiselFlatSpec"],"class AnalogIntegrationTester(mod: =&gt; AnalogDUTModule) extends BasicTester":[109,0,0,"attr-class AnalogIntegrationTester(mod: => AnalogDUTModule) extends BasicTester"],"class AnalogReaderBlackBox extends BlackBox with AnalogReader  class AnalogReaderWrapper extends Module with AnalogReader":[109,0,0,"attr-class AnalogReaderBlackBox extends BlackBox with AnalogReader  class AnalogReaderWrapper extends Module with AnalogReader"],"class AnalogReaderBlackBox extends BlackBox with AnalogReader":[109,0,0,"attr-class AnalogReaderBlackBox extends BlackBox with AnalogReader"],"class AnalogReaderIO extends Bundle":[109,0,0,"attr-class AnalogReaderIO extends Bundle"],"class AnalogReaderWrapper extends Module with AnalogReader":[109,0,0,"attr-class AnalogReaderWrapper extends Module with AnalogReader"],"class AnalogSmallDUT extends AnalogDUTModule(4)":[109,0,0,"attr-class AnalogSmallDUT extends AnalogDUTModule(4)"],"class AnalogSpec extends ChiselFlatSpec":[109,0,0,"attr-class AnalogSpec extends ChiselFlatSpec"],"class AnalogWriterBlackBox extends BlackBox":[109,0,0,"attr-class AnalogWriterBlackBox extends BlackBox"],"class AnalogWriterIO extends Bundle":[109,0,0,"attr-class AnalogWriterIO extends Bundle"],"class AnnotatingDiamondSpec extends FreeSpec with Matchers":[109,0,0,"attr-class AnnotatingDiamondSpec extends FreeSpec with Matchers"],"class AnnotationNoDedup extends FreeSpec with Matchers":[109,0,0,"attr-class AnnotationNoDedup extends FreeSpec with Matchers"],"class ArbiterIO[T &lt;: Data](private val gen: T, val n: Int) extends Bundle":[99,0,0,"attr-class ArbiterIO[T <: Data](private val gen: T, val n: Int) extends Bundle"],"class Arbiter[T &lt;: Data](gen: T, n: Int) extends Module":[99,0,0,"attr-class Arbiter[T <: Data](gen: T, n: Int) extends Module"],"class AsChiselEnumTester extends BasicTester":[109,0,0,"attr-class AsChiselEnumTester extends BasicTester"],"class AsTypeOfBundleTester extends BasicTester":[109,0,0,"attr-class AsTypeOfBundleTester extends BasicTester"],"class AsTypeOfBundleZeroWidthTester extends BasicTester":[109,0,0,"attr-class AsTypeOfBundleZeroWidthTester extends BasicTester"],"class AsTypeOfSpec extends ChiselFlatSpec":[109,0,0,"attr-class AsTypeOfSpec extends ChiselFlatSpec"],"class AsTypeOfTruncationTester extends BasicTester":[109,0,0,"attr-class AsTypeOfTruncationTester extends BasicTester"],"class AsTypeOfVecTester extends BasicTester":[109,0,0,"attr-class AsTypeOfVecTester extends BasicTester"],"class AssertSpec extends ChiselFlatSpec":[109,0,0,"attr-class AssertSpec extends ChiselFlatSpec"],"class AutoClonetypeException(message: String) extends ChiselException(message)  package experimental":[2,0,0,"attr-class AutoClonetypeException(message: String) extends ChiselException(message)  package experimental"],"class AutoClonetypeException(message: String) extends ChiselException(message) class BundleLiteralException(message: String) extends ChiselException(message)":[3,0,0,"attr-class AutoClonetypeException(message: String) extends ChiselException(message) class BundleLiteralException(message: String) extends ChiselException(message)"],"class AutoClonetypeSpec extends ChiselFlatSpec":[109,0,0,"attr-class AutoClonetypeSpec extends ChiselFlatSpec"],"class AutoNestedCloneSpec extends ChiselFlatSpec with Matchers":[109,0,0,"attr-class AutoNestedCloneSpec extends ChiselFlatSpec with Matchers"],"class BadBoolConversion extends Module":[109,0,0,"attr-class BadBoolConversion extends Module"],"class BadDirection extends DirectionHaver":[109,0,0,"attr-class BadDirection extends DirectionHaver"],"class BadSubDirection extends DirectionHaver":[109,0,0,"attr-class BadSubDirection extends DirectionHaver"],"class BadUnescapedPercentAssertTester extends BasicTester":[109,0,0,"attr-class BadUnescapedPercentAssertTester extends BasicTester"],"class BaseBundleNonVal(i: Int) extends Bundle":[109,0,0,"attr-class BaseBundleNonVal(i: Int) extends Bundle"],"class BaseBundleVal(val i: Int) extends Bundle":[109,0,0,"attr-class BaseBundleVal(val i: Int) extends Bundle"],"class BasicTester extends Module()":[96,0,0,"attr-class BasicTester extends Module()"],"class BetterNamingTests extends ChiselFlatSpec":[109,0,0,"attr-class BetterNamingTests extends ChiselFlatSpec"],"class BitwiseOpsSpec extends ChiselPropSpec":[109,0,0,"attr-class BitwiseOpsSpec extends ChiselPropSpec"],"class BitwiseOpsTester(w: Int, _a: Int, _b: Int) extends BasicTester":[109,0,0,"attr-class BitwiseOpsTester(w: Int, _a: Int, _b: Int) extends BasicTester"],"class BlackBoxAdd(n : Int) extends HasBlackBoxInline":[109,0,0,"attr-class BlackBoxAdd(n : Int) extends HasBlackBoxInline"],"class BlackBoxConstant(value: Int) extends BlackBox(Map(\"VALUE\" -&gt; value, \"WIDTH\" -&gt; log2Ceil(value + 1)))":[109,0,0,"attr-class BlackBoxConstant(value: Int) extends BlackBox(Map(\"VALUE\" -> value, \"WIDTH\" -> log2Ceil(value + 1)))"],"class BlackBoxFlipTester extends BasicTester":[109,0,0,"attr-class BlackBoxFlipTester extends BasicTester"],"class BlackBoxImplSpec extends FreeSpec with Matchers":[109,0,0,"attr-class BlackBoxImplSpec extends FreeSpec with Matchers"],"class BlackBoxInverter extends BlackBox":[109,0,0,"attr-class BlackBoxInverter extends BlackBox"],"class BlackBoxMinus extends HasBlackBoxResource":[109,0,0,"attr-class BlackBoxMinus extends HasBlackBoxResource"],"class BlackBoxMinusPath extends HasBlackBoxPath":[109,0,0,"attr-class BlackBoxMinusPath extends HasBlackBoxPath"],"class BlackBoxPassthrough extends BlackBox":[109,0,0,"attr-class BlackBoxPassthrough extends BlackBox"],"class BlackBoxPassthrough2 extends BlackBox":[109,0,0,"attr-class BlackBoxPassthrough2 extends BlackBox"],"class BlackBoxRealParam(dbl: Double) extends BlackBox(Map(\"REAL\" -&gt; dbl))":[109,0,0,"attr-class BlackBoxRealParam(dbl: Double) extends BlackBox(Map(\"REAL\" -> dbl))"],"class BlackBoxRegister extends BlackBox":[109,0,0,"attr-class BlackBoxRegister extends BlackBox"],"class BlackBoxSpec extends ChiselFlatSpec":[109,0,0,"attr-class BlackBoxSpec extends ChiselFlatSpec"],"class BlackBoxStringParam(str: String) extends BlackBox(Map(\"STRING\" -&gt; str))":[109,0,0,"attr-class BlackBoxStringParam(str: String) extends BlackBox(Map(\"STRING\" -> str))"],"class BlackBoxTester extends BasicTester":[109,0,0,"attr-class BlackBoxTester extends BasicTester"],"class BlackBoxTypeParam(w: Int, raw: String) extends BlackBox(Map(\"T\" -&gt; RawParam(raw)))":[109,0,0,"attr-class BlackBoxTypeParam(w: Int, raw: String) extends BlackBox(Map(\"T\" -> RawParam(raw)))"],"class BlackBoxWithClockTester extends BasicTester":[109,0,0,"attr-class BlackBoxWithClockTester extends BasicTester"],"class BlackBoxWithParamsTester extends BasicTester":[109,0,0,"attr-class BlackBoxWithParamsTester extends BasicTester"],"class BoringUtilsException(message: String) extends Exception(message)":[97,0,0,"attr-class BoringUtilsException(message: String) extends Exception(message)"],"class BoringUtilsSpec extends ChiselFlatSpec with ChiselRunners":[109,0,0,"attr-class BoringUtilsSpec extends ChiselFlatSpec with ChiselRunners"],"class BrokenVectorPacketModule extends Module":[109,0,0,"attr-class BrokenVectorPacketModule extends Module"],"class Bundle1 extends Bundle":[109,0,0,"attr-class Bundle1 extends Bundle"],"class Bundle2 extends Bundle":[109,0,0,"attr-class Bundle2 extends Bundle"],"class Bundle2UInt extends CookbookTester(1)":[115,0,0,"attr-class Bundle2UInt extends CookbookTester(1)"],"class Bundle2UIntSpec  extends CookbookSpec":[115,0,0,"attr-class Bundle2UIntSpec  extends CookbookSpec"],"class Bundle3 extends Bundle":[109,0,0,"attr-class Bundle3 extends Bundle"],"class BundleLiteralException(message: String) extends ChiselException(message)":[3,0,0,"attr-class BundleLiteralException(message: String) extends ChiselException(message)"],"class BundleLiteralSpec extends ChiselFlatSpec":[109,0,0,"attr-class BundleLiteralSpec extends ChiselFlatSpec"],"class BundleSpec extends ChiselFlatSpec with BundleSpecUtils":[109,0,0,"attr-class BundleSpec extends ChiselFlatSpec with BundleSpecUtils"],"class BundleToUIntSpec extends ChiselPropSpec":[109,0,0,"attr-class BundleToUIntSpec extends ChiselPropSpec"],"class BundleToUnitTester extends BasicTester":[109,0,0,"attr-class BundleToUnitTester extends BasicTester"],"class BundleWire(n: Int) extends Module":[109,0,0,"attr-class BundleWire(n: Int) extends Module"],"class BundleWireSpec extends ChiselPropSpec":[109,0,0,"attr-class BundleWireSpec extends ChiselPropSpec"],"class BundleWireTester(n: Int, x: Int, y: Int) extends BasicTester":[109,0,0,"attr-class BundleWireTester(n: Int, x: Int, y: Int) extends BasicTester"],"class BundleWithAnonymousInner(val w: Int) extends Bundle":[109,0,0,"attr-class BundleWithAnonymousInner(val w: Int) extends Bundle"],"class BundleWithArgAndImplicit(val i: Int)(implicit val ii: Int) extends Bundle":[109,0,0,"attr-class BundleWithArgAndImplicit(val i: Int)(implicit val ii: Int) extends Bundle"],"class BundleWithArgumentField(val x: Data, val y: Data) extends Bundle  class AutoClonetypeSpec extends ChiselFlatSpec":[109,0,0,"attr-class BundleWithArgumentField(val x: Data, val y: Data) extends Bundle  class AutoClonetypeSpec extends ChiselFlatSpec"],"class BundleWithImplicit()(implicit val ii: Int) extends Bundle":[109,0,0,"attr-class BundleWithImplicit()(implicit val ii: Int) extends Bundle"],"class BundleWithIntArg(val i: Int) extends Bundle":[109,0,0,"attr-class BundleWithIntArg(val i: Int) extends Bundle"],"class CastFromLit(in: UInt) extends Module":[109,0,0,"attr-class CastFromLit(in: UInt) extends Module"],"class CastFromLitTester extends BasicTester":[109,0,0,"attr-class CastFromLitTester extends BasicTester"],"class CastFromNonLit extends Module":[109,0,0,"attr-class CastFromNonLit extends Module"],"class CastFromNonLitTester extends BasicTester":[109,0,0,"attr-class CastFromNonLitTester extends BasicTester"],"class CastFromNonLitWidth(w: Option[Int]":[109,0,0,"attr-class CastFromNonLitWidth(w: Option[Int]"],"class CastToInvalidEnumTester extends BasicTester":[109,0,0,"attr-class CastToInvalidEnumTester extends BasicTester"],"class CastToUInt extends Module":[109,0,0,"attr-class CastToUInt extends Module"],"class CastToUIntTester extends BasicTester":[109,0,0,"attr-class CastToUIntTester extends BasicTester"],"class Checks extends Phase":[94,0,0,"attr-class Checks extends Phase"],"class ChecksSpec extends FlatSpec with Matchers":[111,0,0,"attr-class ChecksSpec extends FlatSpec with Matchers"],"class ChiselAnnotation  class ChiselAnnotationsSpec extends FlatSpec with Matchers":[112,0,0,"attr-class ChiselAnnotation  class ChiselAnnotationsSpec extends FlatSpec with Matchers"],"class ChiselAnnotationsSpec extends FlatSpec with Matchers":[112,0,0,"attr-class ChiselAnnotationsSpec extends FlatSpec with Matchers"],"class ChiselAnnotationsSpecBaz(name: String) extends ChiselAnnotationsSpecFoo":[112,0,0,"attr-class ChiselAnnotationsSpecBaz(name: String) extends ChiselAnnotationsSpecFoo"],"class ChiselAnnotationsSpecFoo extends RawModule":[112,0,0,"attr-class ChiselAnnotationsSpecFoo extends RawModule"],"class ChiselAnnotationsSpecQux extends ChiselAnnotationsSpecFoo":[112,0,0,"attr-class ChiselAnnotationsSpecQux extends ChiselAnnotationsSpecFoo"],"class ChiselException(message: String, cause: Throwable":[6,0,0,"attr-class ChiselException(message: String, cause: Throwable"],"class ChiselOptions private[stage] (val runFirrtlCompiler:   Boolean":[95,0,0,"attr-class ChiselOptions private[stage] (val runFirrtlCompiler:   Boolean"],"class ChiselOptionsViewSpec extends FlatSpec with Matchers":[112,0,0,"attr-class ChiselOptionsViewSpec extends FlatSpec with Matchers"],"class ChiselPropSpec extends PropSpec with ChiselRunners with PropertyChecks with Matchers":[109,0,0,"attr-class ChiselPropSpec extends PropSpec with ChiselRunners with PropertyChecks with Matchers"],"class ChiselStack(val depth: Int) extends Module":[109,0,0,"attr-class ChiselStack(val depth: Int) extends Module"],"class ChiselStage extends Stage":[95,0,0,"attr-class ChiselStage extends Stage"],"class ChiselTestUtilitiesSpec extends ChiselFlatSpec":[109,0,0,"attr-class ChiselTestUtilitiesSpec extends ChiselFlatSpec"],"class ClockAsUIntTester extends BasicTester":[109,0,0,"attr-class ClockAsUIntTester extends BasicTester"],"class ClockDividerTest extends BasicTester":[109,0,0,"attr-class ClockDividerTest extends BasicTester"],"class ClockSpec extends ChiselPropSpec":[109,0,0,"attr-class ClockSpec extends ChiselPropSpec"],"class CloneModuleSpec extends ChiselPropSpec":[109,0,0,"attr-class CloneModuleSpec extends ChiselPropSpec"],"class CompatibiltyInteroperabilitySpec extends ChiselFlatSpec":[109,0,0,"attr-class CompatibiltyInteroperabilitySpec extends ChiselFlatSpec"],"class CompatibiltySpec extends ChiselFlatSpec with GeneratorDrivenPropertyChecks":[109,0,0,"attr-class CompatibiltySpec extends ChiselFlatSpec with GeneratorDrivenPropertyChecks"],"class CompileOptionsSpec extends ChiselFlatSpec":[109,0,0,"attr-class CompileOptionsSpec extends ChiselFlatSpec"],"class ComplexAssign(w: Int) extends Module":[109,0,0,"attr-class ComplexAssign(w: Int) extends Module"],"class ComplexAssignSpec extends ChiselPropSpec":[109,0,0,"attr-class ComplexAssignSpec extends ChiselPropSpec"],"class ComplexAssignTester(enList: List[Boolean], re: Int, im: Int) extends BasicTester":[109,0,0,"attr-class ComplexAssignTester(enList: List[Boolean], re: Int, im: Int) extends BasicTester"],"class Complex[T &lt;: Data](val re: T, val im: T) extends Bundle":[109,0,0,"attr-class Complex[T <: Data](val re: T, val im: T) extends Bundle"],"class ComposedMultiIOModule extends MultiIOModule with LiteralOutputTrait with MultiIOTrait":[109,0,0,"attr-class ComposedMultiIOModule extends MultiIOModule with LiteralOutputTrait with MultiIOTrait"],"class ComposedMultiIOTester extends BasicTester":[109,0,0,"attr-class ComposedMultiIOTester extends BasicTester"],"class CompositionalPort(module: NamedModuleTester, name: String)":[110,0,0,"attr-class CompositionalPort(module: NamedModuleTester, name: String)"],"class CompositionalPortTester extends NamedModuleTester":[110,0,0,"attr-class CompositionalPortTester extends NamedModuleTester"],"class ConnectSpec extends ChiselPropSpec":[109,0,0,"attr-class ConnectSpec extends ChiselPropSpec"],"class Convert extends Phase":[94,0,0,"attr-class Convert extends Phase"],"class ConvertSpec extends FlatSpec with Matchers":[111,0,0,"attr-class ConvertSpec extends FlatSpec with Matchers"],"class ConvertSpecFirrtlTransform extends Transform":[111,0,0,"attr-class ConvertSpecFirrtlTransform extends Transform"],"class ConvertSpecFoo extends RawModule":[111,0,0,"attr-class ConvertSpecFoo extends RawModule"],"class Coord extends Bundle":[109,0,0,"attr-class Coord extends Bundle"],"class CountIsCorrectTester(elements: Seq[Int], queueDepth: Int, bitWidth: Int, tap: Int) extends BasicTester":[109,0,0,"attr-class CountIsCorrectTester(elements: Seq[Int], queueDepth: Int, bitWidth: Int, tap: Int) extends BasicTester"],"class CountTester(max: Int) extends BasicTester":[109,0,0,"attr-class CountTester(max: Int) extends BasicTester"],"class Counter(val n: Int)":[99,0,0,"attr-class Counter(val n: Int)"],"class CounterSpec extends ChiselPropSpec":[109,0,0,"attr-class CounterSpec extends ChiselPropSpec"],"class CrossConnectTester(inType: Data, outType: Data) extends BasicTester":[109,0,0,"attr-class CrossConnectTester(inType: Data, outType: Data) extends BasicTester"],"class CrossConnects(inType: Data, outType: Data) extends Module":[109,0,0,"attr-class CrossConnects(inType: Data, outType: Data) extends Module"],"class CyclePRNG(width: Int, seed: Option[BigInt], step: Int, updateSeed: Boolean) extends PRNG(width, seed, step, updateSeed)":[113,0,0,"attr-class CyclePRNG(width: Int, seed: Option[BigInt], step: Int, updateSeed: Boolean) extends PRNG(width, seed, step, updateSeed)"],"class DataPrintSpec extends ChiselFlatSpec with Matchers":[109,0,0,"attr-class DataPrintSpec extends ChiselFlatSpec with Matchers"],"class Decoder(bitpats: List[String]) extends Module":[109,0,0,"attr-class Decoder(bitpats: List[String]) extends Module"],"class DecoderSpec extends ChiselPropSpec":[109,0,0,"attr-class DecoderSpec extends ChiselPropSpec"],"class DecoderTester(pairs: List[(String, String)]) extends BasicTester":[109,0,0,"attr-class DecoderTester(pairs: List[(String, String)]) extends BasicTester"],"class DecoupledIO[+T &lt;: Data](gen: T) extends ReadyValidIO[T](gen)":[99,0,0,"attr-class DecoupledIO[+T <: Data](gen: T) extends ReadyValidIO[T](gen)"],"class DedupIO extends Bundle":[109,0,0,"attr-class DedupIO extends Bundle"],"class DedupQueues(n: Int) extends Module":[109,0,0,"attr-class DedupQueues(n: Int) extends Module"],"class DedupSpec extends ChiselFlatSpec":[109,0,0,"attr-class DedupSpec extends ChiselFlatSpec"],"class DedupSubModule extends Module":[109,0,0,"attr-class DedupSubModule extends Module"],"class DetectTwoOnes extends Module":[115,0,0,"attr-class DetectTwoOnes extends Module"],"class DetectTwoOnesTester extends CookbookTester(10)":[115,0,0,"attr-class DetectTwoOnesTester extends CookbookTester(10)"],"class DiamondTester extends BasicTester":[109,0,0,"attr-class DiamondTester extends BasicTester"],"class DifferentBundleOneHotTester extends BasicTester":[109,0,0,"attr-class DifferentBundleOneHotTester extends BasicTester"],"class DigitFieldNamesInRecord extends NamedModuleTester":[109,0,0,"attr-class DigitFieldNamesInRecord extends NamedModuleTester"],"class DirectionHaver extends Module":[109,0,0,"attr-class DirectionHaver extends Module"],"class DirectionSpec extends ChiselPropSpec with Matchers":[109,0,0,"attr-class DirectionSpec extends ChiselPropSpec with Matchers"],"class DirectionedBundle extends Bundle":[109,0,0,"attr-class DirectionedBundle extends Bundle"],"class DontTouchSpec extends ChiselFlatSpec":[109,0,0,"attr-class DontTouchSpec extends ChiselFlatSpec"],"class DriverCompatibilitySpec extends FlatSpec with Matchers":[107,0,0,"attr-class DriverCompatibilitySpec extends FlatSpec with Matchers"],"class DriverSpec extends FreeSpec with Matchers":[109,0,0,"attr-class DriverSpec extends FreeSpec with Matchers"],"class DummyModule extends Module":[109,0,0,"attr-class DummyModule extends Module"],"class Elaborate extends Phase":[94,0,0,"attr-class Elaborate extends Phase"],"class ElaborateSpec extends FlatSpec with Matchers":[111,0,0,"attr-class ElaborateSpec extends FlatSpec with Matchers"],"class Emitter extends Phase":[94,0,0,"attr-class Emitter extends Phase"],"class EmitterSpec extends FlatSpec with Matchers":[111,0,0,"attr-class EmitterSpec extends FlatSpec with Matchers"],"class EnableShiftRegister extends Module":[109,0,0,"attr-class EnableShiftRegister extends Module"],"class EnableShiftRegisterSpec extends ChiselPropSpec":[109,0,0,"attr-class EnableShiftRegisterSpec extends ChiselPropSpec"],"class EnableShiftRegisterTester(c: EnableShiftRegister) extends Tester(c)":[109,0,0,"attr-class EnableShiftRegisterTester(c: EnableShiftRegister) extends Tester(c)"],"class EnableTester(seed: Int) extends BasicTester":[109,0,0,"attr-class EnableTester(seed: Int) extends BasicTester"],"class EnumOps(val xType: ChiselEnum, val yType: ChiselEnum) extends Module":[109,0,0,"attr-class EnumOps(val xType: ChiselEnum, val yType: ChiselEnum) extends Module"],"class EnumOpsTester extends BasicTester":[109,0,0,"attr-class EnumOpsTester extends BasicTester"],"class EnumSpec extends ChiselFlatSpec":[109,0,0,"attr-class EnumSpec extends ChiselFlatSpec"],"class ExtModuleSpec extends ChiselFlatSpec":[109,0,0,"attr-class ExtModuleSpec extends ChiselFlatSpec"],"class ExtModuleTester extends BasicTester":[109,0,0,"attr-class ExtModuleTester extends BasicTester"],"class FSMSpec extends CookbookSpec":[115,0,0,"attr-class FSMSpec extends CookbookSpec"],"class FSMVendingMachine extends SimpleVendingMachine":[116,0,0,"attr-class FSMVendingMachine extends SimpleVendingMachine"],"class FailingAssertTester() extends BasicTester":[109,0,0,"attr-class FailingAssertTester() extends BasicTester"],"class FibonacciLFSR(width: Int, taps: Set[Int], seed: Option[BigInt] = Some(1), val reduction: LFSRReduce = XOR, step: Int = 1, updateSeed: Boolean = false) extends PRNG(width, seed, step, updateSeed) with LFSR":[98,0,0,"attr-class FibonacciLFSR(width: Int, taps: Set[Int], seed: Option[BigInt] = Some(1), val reduction: LFSRReduce = XOR, step: Int = 1, updateSeed: Boolean = false) extends PRNG(width, seed, step, updateSeed) with LFSR"],"class FibonacciLFSR(width: Int, taps: Set[Int], seed: Option[BigInt]":[98,0,0,"attr-class FibonacciLFSR(width: Int, taps: Set[Int], seed: Option[BigInt]"],"class FileHasSuffix(memoryDepth: Int, memoryType: Data) extends Module":[109,0,0,"attr-class FileHasSuffix(memoryDepth: Int, memoryType: Data) extends Module"],"class FinishTester extends BasicTester":[109,0,0,"attr-class FinishTester extends BasicTester"],"class FixedPointFromBitsTester extends BasicTester":[109,0,0,"attr-class FixedPointFromBitsTester extends BasicTester"],"class FixedPointLitExtractTester extends BasicTester":[109,0,0,"attr-class FixedPointLitExtractTester extends BasicTester"],"class FixedPointLiteralSpec extends FlatSpec with Matchers":[109,0,0,"attr-class FixedPointLiteralSpec extends FlatSpec with Matchers"],"class FixedPointMuxTester extends BasicTester":[109,0,0,"attr-class FixedPointMuxTester extends BasicTester"],"class FixedPointOneHotTester extends BasicTester":[109,0,0,"attr-class FixedPointOneHotTester extends BasicTester"],"class FixedPointSpec extends ChiselPropSpec":[109,0,0,"attr-class FixedPointSpec extends ChiselPropSpec"],"class FooLFSR(val reduction: LFSRReduce, seed: Option[BigInt]) extends PRNG(4, seed) with LFSR":[113,0,0,"attr-class FooLFSR(val reduction: LFSRReduce, seed: Option[BigInt]) extends PRNG(4, seed) with LFSR"],"class FormattedAssertTester extends BasicTester":[109,0,0,"attr-class FormattedAssertTester extends BasicTester"],"class GCD extends Module":[109,0,0,"attr-class GCD extends Module"],"class GCDSpec extends ChiselPropSpec":[109,0,0,"attr-class GCDSpec extends ChiselPropSpec"],"class GCDTester extends ChiselFlatSpec":[120,0,0,"attr-class GCDTester extends ChiselFlatSpec"],"class GCDTester(a: Int, b: Int, z: Int) extends BasicTester":[109,0,0,"attr-class GCDTester(a: Int, b: Int, z: Int) extends BasicTester"],"class GCDUnitTester(c: GCD) extends PeekPokeTester(c)":[120,0,0,"attr-class GCDUnitTester(c: GCD) extends PeekPokeTester(c)"],"class GaloisLFSR(width: Int, taps: Set[Int], seed: Option[BigInt] = Some(1), val reduction: LFSRReduce = XOR, step: Int = 1, updateSeed: Boolean = false) extends PRNG(width, seed, step, updateSeed) with LFSR":[98,0,0,"attr-class GaloisLFSR(width: Int, taps: Set[Int], seed: Option[BigInt] = Some(1), val reduction: LFSRReduce = XOR, step: Int = 1, updateSeed: Boolean = false) extends PRNG(width, seed, step, updateSeed) with LFSR"],"class GaloisLFSR(width: Int, taps: Set[Int], seed: Option[BigInt]":[98,0,0,"attr-class GaloisLFSR(width: Int, taps: Set[Int], seed: Option[BigInt]"],"class GoodBoolConversion extends Module":[109,0,0,"attr-class GoodBoolConversion extends Module"],"class GoodDirection extends DirectionHaver":[109,0,0,"attr-class GoodDirection extends DirectionHaver"],"class HarnessSpec extends ChiselPropSpec with BackendCompilationUtilities":[109,0,0,"attr-class HarnessSpec extends ChiselPropSpec with BackendCompilationUtilities"],"class HasComplexMemory(memoryDepth: Int) extends Module":[109,0,0,"attr-class HasComplexMemory(memoryDepth: Int) extends Module"],"class HasDeadCode(withDontTouch: Boolean) extends Module":[109,0,0,"attr-class HasDeadCode(withDontTouch: Boolean) extends Module"],"class HasDeadCodeChild(withDontTouch: Boolean) extends Module":[109,0,0,"attr-class HasDeadCodeChild(withDontTouch: Boolean) extends Module"],"class HugeCMemTester(size: BigInt) extends BasicTester":[109,0,0,"attr-class HugeCMemTester(size: BigInt) extends BasicTester"],"class HugeSMemTester(size: BigInt) extends BasicTester":[109,0,0,"attr-class HugeSMemTester(size: BigInt) extends BasicTester"],"class HugeVecTester(n: Int) extends BasicTester":[109,0,0,"attr-class HugeVecTester(n: Int) extends BasicTester"],"class IOCModuleVec(val n: Int) extends Module":[109,0,0,"attr-class IOCModuleVec(val n: Int) extends Module"],"class IOCModuleWire extends Module":[109,0,0,"attr-class IOCModuleWire extends Module"],"class IOCPlusOne extends Module":[109,0,0,"attr-class IOCPlusOne extends Module"],"class IOCSimpleIO extends Bundle":[109,0,0,"attr-class IOCSimpleIO extends Bundle"],"class IOCompatibilitySpec extends ChiselPropSpec with Matchers":[109,0,0,"attr-class IOCompatibilitySpec extends ChiselPropSpec with Matchers"],"class IOTester(w: Int, values: List[Int]) extends BasicTester":[109,0,0,"attr-class IOTester(w: Int, values: List[Int]) extends BasicTester"],"class IOTesterMod(vecSize: Int) extends Module":[109,0,0,"attr-class IOTesterMod(vecSize: Int) extends Module"],"class IOTesterModFill(vecSize: Int) extends Module":[109,0,0,"attr-class IOTesterModFill(vecSize: Int) extends Module"],"class IdentityTransform extends Transform":[109,0,0,"attr-class IdentityTransform extends Transform"],"class IllegalAssignSpec extends ChiselFlatSpec":[109,0,0,"attr-class IllegalAssignSpec extends ChiselFlatSpec"],"class ImplicitConversionsSpec extends ChiselFlatSpec":[109,0,0,"attr-class ImplicitConversionsSpec extends ChiselFlatSpec"],"class ImplicitModuleDirectlyInRawModuleTester extends BasicTester":[109,0,0,"attr-class ImplicitModuleDirectlyInRawModuleTester extends BasicTester"],"class ImplicitModuleInRawModuleTester extends BasicTester":[109,0,0,"attr-class ImplicitModuleInRawModuleTester extends BasicTester"],"class ImplicitStateVendingMachine extends SimpleVendingMachine":[116,0,0,"attr-class ImplicitStateVendingMachine extends SimpleVendingMachine"],"class ImplicitStateVendingMachineSpec extends ChiselFlatSpec":[116,0,0,"attr-class ImplicitStateVendingMachineSpec extends ChiselFlatSpec"],"class InferredWidthAggregateOneHotTester extends BasicTester":[109,0,0,"attr-class InferredWidthAggregateOneHotTester extends BasicTester"],"class InlineSpec extends FreeSpec with ChiselRunners with Matchers":[109,0,0,"attr-class InlineSpec extends FreeSpec with ChiselRunners with Matchers"],"class InstanceNameModule extends Module":[109,0,0,"attr-class InstanceNameModule extends Module"],"class InstanceNameSpec extends ChiselFlatSpec":[109,0,0,"attr-class InstanceNameSpec extends ChiselFlatSpec"],"class IntegerMathSpec extends ChiselPropSpec":[109,0,0,"attr-class IntegerMathSpec extends ChiselPropSpec"],"class IntegerMathTester extends BasicTester":[109,0,0,"attr-class IntegerMathTester extends BasicTester"],"class InvalidEnumOpsTester extends BasicTester":[109,0,0,"attr-class InvalidEnumOpsTester extends BasicTester"],"class InvalidOptionBundleTester() extends BasicTester":[109,0,0,"attr-class InvalidOptionBundleTester() extends BasicTester"],"class InvalidateAPISpec extends ChiselPropSpec with Matchers with BackendCompilationUtilities":[109,0,0,"attr-class InvalidateAPISpec extends ChiselPropSpec with Matchers with BackendCompilationUtilities"],"class IrrevocableIO[+T &lt;: Data](gen: T) extends ReadyValidIO[T](gen)":[99,0,0,"attr-class IrrevocableIO[+T <: Data](gen: T) extends ReadyValidIO[T](gen)"],"class IsLitTester extends BasicTester":[109,0,0,"attr-class IsLitTester extends BasicTester"],"class IterableNaming extends NamedModuleTester":[109,0,0,"attr-class IterableNaming extends NamedModuleTester"],"class LFSR16MaxPeriod extends BasicTester":[109,0,0,"attr-class LFSR16MaxPeriod extends BasicTester"],"class LFSRDistribution(gen: =&gt; UInt, cycles: Int = 10000) extends BasicTester":[109,0,0,"attr-class LFSRDistribution(gen: => UInt, cycles: Int = 10000) extends BasicTester"],"class LFSRDistribution(gen: =&gt; UInt, cycles: Int":[109,0,0,"attr-class LFSRDistribution(gen: => UInt, cycles: Int"],"class LFSRMaxPeriod(gen: =&gt; UInt) extends BasicTester":[109,0,0,"attr-class LFSRMaxPeriod(gen: => UInt) extends BasicTester"],"class LFSRResetTester(gen: =&gt; LFSR, lockUpValue: BigInt) extends BasicTester":[113,0,0,"attr-class LFSRResetTester(gen: => LFSR, lockUpValue: BigInt) extends BasicTester"],"class LFSRSpec extends ChiselFlatSpec":[113,0,0,"attr-class LFSRSpec extends ChiselFlatSpec"],"class LFSRSpec extends ChiselPropSpec":[109,0,0,"attr-class LFSRSpec extends ChiselPropSpec"],"class LFSRTester extends BasicTester":[109,0,0,"attr-class LFSRTester extends BasicTester"],"class LastAssignTester() extends BasicTester":[109,0,0,"attr-class LastAssignTester() extends BasicTester"],"class LitTester(w: Int, values: List[Int]) extends BasicTester":[109,0,0,"attr-class LitTester(w: Int, values: List[Int]) extends BasicTester"],"class LitTesterMod(vecSize: Int) extends Module":[109,0,0,"attr-class LitTesterMod(vecSize: Int) extends Module"],"class LiteralExtractorSpec extends ChiselFlatSpec":[109,0,0,"attr-class LiteralExtractorSpec extends ChiselFlatSpec"],"class LoadMemoryFromFileSpec extends FreeSpec with Matchers":[109,0,0,"attr-class LoadMemoryFromFileSpec extends FreeSpec with Matchers"],"class LoadMemoryTransform extends Transform":[97,0,0,"attr-class LoadMemoryTransform extends Transform"],"class LockingArbiter[T &lt;: Data](gen: T, n: Int, count: Int, needsLock: Option[T =&gt; Bool]":[99,0,0,"attr-class LockingArbiter[T <: Data](gen: T, n: Int, count: Int, needsLock: Option[T => Bool]"],"class LockingRRArbiter[T &lt;: Data](gen: T, n: Int, count: Int, needsLock: Option[T =&gt; Bool]":[99,0,0,"attr-class LockingRRArbiter[T <: Data](gen: T, n: Int, count: Int, needsLock: Option[T => Bool]"],"class Math extends ChiselPropSpec":[109,0,0,"attr-class Math extends ChiselPropSpec"],"class MaxPeriodFibonacciLFSR(width: Int, seed: Option[BigInt]":[98,0,0,"attr-class MaxPeriodFibonacciLFSR(width: Int, seed: Option[BigInt]"],"class MaxPeriodGaloisLFSR(width: Int, seed: Option[BigInt]":[98,0,0,"attr-class MaxPeriodGaloisLFSR(width: Int, seed: Option[BigInt]"],"class MaybeFirrtlStage extends Phase":[94,0,0,"attr-class MaybeFirrtlStage extends Phase"],"class MeetTheNewLFSR16SameAsTheOldLFSR16 extends BasicTester":[109,0,0,"attr-class MeetTheNewLFSR16SameAsTheOldLFSR16 extends BasicTester"],"class MemVecTester extends BasicTester":[109,0,0,"attr-class MemVecTester extends BasicTester"],"class MemorySearch extends Module":[109,0,0,"attr-class MemorySearch extends Module"],"class MemorySearchSpec extends ChiselPropSpec":[109,0,0,"attr-class MemorySearchSpec extends ChiselPropSpec"],"class MemorySearchTester(c: MemorySearch) extends Tester(c)":[109,0,0,"attr-class MemorySearchTester(c: MemorySearch) extends Tester(c)"],"class MemoryShape extends Bundle":[109,0,0,"attr-class MemoryShape extends Bundle"],"class MemorySpec extends ChiselPropSpec":[109,0,0,"attr-class MemorySpec extends ChiselPropSpec"],"class MissingCloneBindingExceptionSpec extends ChiselFlatSpec with Matchers":[109,0,0,"attr-class MissingCloneBindingExceptionSpec extends ChiselFlatSpec with Matchers"],"class MixedVecAssignTester(w: Int, values: List[Int]) extends BasicTester":[109,0,0,"attr-class MixedVecAssignTester(w: Int, values: List[Int]) extends BasicTester"],"class MixedVecConnectWithSeqTester extends BasicTester":[109,0,0,"attr-class MixedVecConnectWithSeqTester extends BasicTester"],"class MixedVecConnectWithVecTester extends BasicTester":[109,0,0,"attr-class MixedVecConnectWithVecTester extends BasicTester"],"class MixedVecFromVecTester extends BasicTester":[109,0,0,"attr-class MixedVecFromVecTester extends BasicTester"],"class MixedVecIOPassthroughModule[T &lt;: Data](hvec: MixedVec[T]) extends Module":[109,0,0,"attr-class MixedVecIOPassthroughModule[T <: Data](hvec: MixedVec[T]) extends Module"],"class MixedVecIOTester(boundVals: Seq[Data]) extends BasicTester":[109,0,0,"attr-class MixedVecIOTester(boundVals: Seq[Data]) extends BasicTester"],"class MixedVecOneBitTester extends BasicTester":[109,0,0,"attr-class MixedVecOneBitTester extends BasicTester"],"class MixedVecRegTester(w: Int, values: List[Int]) extends BasicTester":[109,0,0,"attr-class MixedVecRegTester(w: Int, values: List[Int]) extends BasicTester"],"class MixedVecSmallTestBundle extends Bundle":[109,0,0,"attr-class MixedVecSmallTestBundle extends Bundle"],"class MixedVecSpec extends ChiselPropSpec":[109,0,0,"attr-class MixedVecSpec extends ChiselPropSpec"],"class MixedVecTestBundle extends Bundle":[109,0,0,"attr-class MixedVecTestBundle extends Bundle"],"class MixedVecUIntDynamicIndexTester extends BasicTester":[109,0,0,"attr-class MixedVecUIntDynamicIndexTester extends BasicTester"],"class MixedVecZeroEntryTester extends BasicTester":[109,0,0,"attr-class MixedVecZeroEntryTester extends BasicTester"],"class ModA(annoParam: Int) extends Module":[109,0,0,"attr-class ModA(annoParam: Int) extends Module"],"class ModB(widthB: Int) extends Module":[109,0,0,"attr-class ModB(widthB: Int) extends Module"],"class ModC(widthC: Int) extends Module":[109,0,0,"attr-class ModC(widthC: Int) extends Module"],"class ModuleDoubleWrap extends Module":[109,0,0,"attr-class ModuleDoubleWrap extends Module"],"class ModuleExplicitResetSpec extends ChiselFlatSpec":[109,0,0,"attr-class ModuleExplicitResetSpec extends ChiselFlatSpec"],"class ModuleForgetWrapper extends Module":[109,0,0,"attr-class ModuleForgetWrapper extends Module"],"class ModuleIODynamicIndexTester(n: Int) extends BasicTester":[109,0,0,"attr-class ModuleIODynamicIndexTester(n: Int) extends BasicTester"],"class ModuleRewrap extends Module":[109,0,0,"attr-class ModuleRewrap extends Module"],"class ModuleSpec extends ChiselPropSpec":[109,0,0,"attr-class ModuleSpec extends ChiselPropSpec"],"class ModuleVec(val n: Int) extends Module":[109,0,0,"attr-class ModuleVec(val n: Int) extends Module"],"class ModuleWhen extends Module":[109,0,0,"attr-class ModuleWhen extends Module"],"class ModuleWire extends Module":[109,0,0,"attr-class ModuleWire extends Module"],"class ModuleWithInner extends Module":[109,0,0,"attr-class ModuleWithInner extends Module"],"class ModuleWrapper(gen: =&gt; Module) extends Module":[109,0,0,"attr-class ModuleWrapper(gen: => Module) extends Module"],"class ModuloAssertTester extends BasicTester":[109,0,0,"attr-class ModuloAssertTester extends BasicTester"],"class MuchUsedModule extends Module":[109,0,0,"attr-class MuchUsedModule extends Module"],"class MulLookup(val w: Int) extends Module":[109,0,0,"attr-class MulLookup(val w: Int) extends Module"],"class MulLookupSpec extends ChiselPropSpec":[109,0,0,"attr-class MulLookupSpec extends ChiselPropSpec"],"class MulLookupTester(w: Int, x: Int, y: Int) extends BasicTester":[109,0,0,"attr-class MulLookupTester(w: Int, x: Int, y: Int) extends BasicTester"],"class MultiAssignSpec extends ChiselFlatSpec":[109,0,0,"attr-class MultiAssignSpec extends ChiselFlatSpec"],"class MultiBlackBoxTester extends BasicTester":[109,0,0,"attr-class MultiBlackBoxTester extends BasicTester"],"class MultiClockMemTest extends BasicTester":[109,0,0,"attr-class MultiClockMemTest extends BasicTester"],"class MultiClockSpec extends ChiselFlatSpec":[109,0,0,"attr-class MultiClockSpec extends ChiselFlatSpec"],"class MultiClockSubModuleTest extends BasicTester":[109,0,0,"attr-class MultiClockSubModuleTest extends BasicTester"],"class MultiExtModuleTester extends BasicTester":[109,0,0,"attr-class MultiExtModuleTester extends BasicTester"],"class MultiIOPlusOne extends MultiIOModule":[109,0,0,"attr-class MultiIOPlusOne extends MultiIOModule"],"class MultiIOQueue[T &lt;: Data](gen: T, val entries: Int) extends MultiIOModule":[109,0,0,"attr-class MultiIOQueue[T <: Data](gen: T, val entries: Int) extends MultiIOModule"],"class MultiIOSpec extends ChiselFlatSpec":[109,0,0,"attr-class MultiIOSpec extends ChiselFlatSpec"],"class MultiIOTester extends BasicTester":[109,0,0,"attr-class MultiIOTester extends BasicTester"],"class MultiPrintfTester() extends BasicTester":[109,0,0,"attr-class MultiPrintfTester() extends BasicTester"],"class MuxSpec extends ChiselFlatSpec":[109,0,0,"attr-class MuxSpec extends ChiselFlatSpec"],"class MuxTester extends BasicTester":[109,0,0,"attr-class MuxTester extends BasicTester"],"class MyBundle extends Bundle":[101,0,0,"attr-class MyBundle extends Bundle"],"class MyBundleTwo extends Bundle":[101,0,0,"attr-class MyBundleTwo extends Bundle"],"class NameCollisionModule extends NamedModuleTester":[109,0,0,"attr-class NameCollisionModule extends NamedModuleTester"],"class NamedModule extends NamedModuleTester":[109,0,0,"attr-class NamedModule extends NamedModuleTester"],"class NamingAnnotationSpec extends ChiselPropSpec":[109,0,0,"attr-class NamingAnnotationSpec extends ChiselPropSpec"],"class NamingContext extends NamingContextInterface":[6,0,0,"attr-class NamingContext extends NamingContextInterface"],"class NamingStack":[6,0,0,"attr-class NamingStack"],"class NegativeShift(t: =&gt; Bits) extends Module":[109,0,0,"attr-class NegativeShift(t: => Bits) extends Module"],"class NestedAnonymousBundle extends Bundle":[109,0,0,"attr-class NestedAnonymousBundle extends Bundle"],"class NestedDedup extends Module":[109,0,0,"attr-class NestedDedup extends Module"],"class NextTester extends BasicTester":[109,0,0,"attr-class NextTester extends BasicTester"],"class NoOtherwiseOverlappedWhenTester() extends BasicTester":[109,0,0,"attr-class NoOtherwiseOverlappedWhenTester() extends BasicTester"],"class NonNamedFunction extends NamedModuleTester":[109,0,0,"attr-class NonNamedFunction extends NamedModuleTester"],"class NonNamedModule extends NamedModuleTester":[109,0,0,"attr-class NonNamedModule extends NamedModuleTester"],"class NoneOptionBundleTester() extends BasicTester":[109,0,0,"attr-class NoneOptionBundleTester() extends BasicTester"],"class NullModuleWrapper extends Module":[109,0,0,"attr-class NullModuleWrapper extends Module"],"class OneBitUnitRegVec extends Module":[109,0,0,"attr-class OneBitUnitRegVec extends Module"],"class OneBitUnitRegVecTester extends BasicTester":[109,0,0,"attr-class OneBitUnitRegVecTester extends BasicTester"],"class OneHotMuxSpec extends FreeSpec with Matchers with ChiselRunners":[109,0,0,"attr-class OneHotMuxSpec extends FreeSpec with Matchers with ChiselRunners"],"class OptionBundle(val hasIn: Boolean) extends Bundle":[109,0,0,"attr-class OptionBundle(val hasIn: Boolean) extends Bundle"],"class OptionBundleModule(val hasIn: Boolean) extends Module":[109,0,0,"attr-class OptionBundleModule(val hasIn: Boolean) extends Module"],"class OptionBundleSpec extends ChiselFlatSpec":[109,0,0,"attr-class OptionBundleSpec extends ChiselFlatSpec"],"class Other(w: Int) extends Module":[109,0,0,"attr-class Other(w: Int) extends Module"],"class OverlappedWhenTester() extends BasicTester":[109,0,0,"attr-class OverlappedWhenTester() extends BasicTester"],"class PRNGIO(val n: Int) extends Bundle":[98,0,0,"attr-class PRNGIO(val n: Int) extends Bundle"],"class PRNGSpec extends ChiselFlatSpec":[113,0,0,"attr-class PRNGSpec extends ChiselFlatSpec"],"class PRNGStepTest extends BasicTester":[113,0,0,"attr-class PRNGStepTest extends BasicTester"],"class PRNGUpdateSeedTest(updateSeed: Boolean, seed: BigInt, expected: BigInt) extends BasicTester":[113,0,0,"attr-class PRNGUpdateSeedTest(updateSeed: Boolean, seed: BigInt, expected: BigInt) extends BasicTester"],"class Packet extends Bundle":[109,0,0,"attr-class Packet extends Bundle"],"class Padder extends Module":[109,0,0,"attr-class Padder extends Module"],"class PadderSpec extends ChiselPropSpec":[109,0,0,"attr-class PadderSpec extends ChiselPropSpec"],"class PadsTester(c: Pads) extends Tester(c)":[109,0,0,"attr-class PadsTester(c: Pads) extends Tester(c)"],"class ParameterizedAggregateOneHotTester extends BasicTester":[109,0,0,"attr-class ParameterizedAggregateOneHotTester extends BasicTester"],"class ParameterizedAggregateOneHot[T &lt;: Data](valGen: HasMakeLit[T], outGen: T) extends Module":[109,0,0,"attr-class ParameterizedAggregateOneHot[T <: Data](valGen: HasMakeLit[T], outGen: T) extends Module"],"class ParameterizedModule(invert: Boolean) extends Module":[109,0,0,"attr-class ParameterizedModule(invert: Boolean) extends Module"],"class ParameterizedModuleSpec extends ChiselFlatSpec":[109,0,0,"attr-class ParameterizedModuleSpec extends ChiselFlatSpec"],"class ParameterizedModuleTester() extends BasicTester":[109,0,0,"attr-class ParameterizedModuleTester() extends BasicTester"],"class ParameterizedOneHotTester[T &lt;: Data](values: Seq[T], outGen: T, expected: T) extends BasicTester":[109,0,0,"attr-class ParameterizedOneHotTester[T <: Data](values: Seq[T], outGen: T, expected: T) extends BasicTester"],"class ParameterizedOneHot[T &lt;: Data](values: Seq[T], outGen: T) extends Module":[109,0,0,"attr-class ParameterizedOneHot[T <: Data](values: Seq[T], outGen: T) extends Module"],"class ParameterizedVendingMachineTester(mod: =&gt; ParameterizedVendingMachine, testLength: Int) extends BasicTester":[116,0,0,"attr-class ParameterizedVendingMachineTester(mod: => ParameterizedVendingMachine, testLength: Int) extends BasicTester"],"class PartialNamedModule extends NamedModuleTester":[109,0,0,"attr-class PartialNamedModule extends NamedModuleTester"],"class PassthroughModule extends Module with AbstractPassthroughModule class PassthroughMultiIOModule extends MultiIOModule with AbstractPassthroughModule class PassthroughRawModule extends RawModule with AbstractPassthroughModule":[109,0,0,"attr-class PassthroughModule extends Module with AbstractPassthroughModule class PassthroughMultiIOModule extends MultiIOModule with AbstractPassthroughModule class PassthroughRawModule extends RawModule with AbstractPassthroughModule"],"class PassthroughModuleIO extends Bundle":[109,0,0,"attr-class PassthroughModuleIO extends Bundle"],"class PassthroughModuleTester extends Module":[109,0,0,"attr-class PassthroughModuleTester extends Module"],"class PassthroughMultiIOModule extends MultiIOModule with AbstractPassthroughModule class PassthroughRawModule extends RawModule with AbstractPassthroughModule":[109,0,0,"attr-class PassthroughMultiIOModule extends MultiIOModule with AbstractPassthroughModule class PassthroughRawModule extends RawModule with AbstractPassthroughModule"],"class PassthroughRawModule extends RawModule with AbstractPassthroughModule":[109,0,0,"attr-class PassthroughRawModule extends RawModule with AbstractPassthroughModule"],"class PerNameIndexing(count: Int) extends NamedModuleTester":[109,0,0,"attr-class PerNameIndexing(count: Int) extends NamedModuleTester"],"class PipeIO extends Bundle":[99,0,0,"attr-class PipeIO extends Bundle"],"class PipeInternalWires extends Module":[109,0,0,"attr-class PipeInternalWires extends Module"],"class Pipe[T &lt;: Data](gen: T, latency: Int = 1)(implicit compileOptions: CompileOptions) extends Module":[99,0,0,"attr-class Pipe[T <: Data](gen: T, latency: Int = 1)(implicit compileOptions: CompileOptions) extends Module"],"class Pipe[T &lt;: Data](gen: T, latency: Int":[99,0,0,"attr-class Pipe[T <: Data](gen: T, latency: Int"],"class PipelinedResetModule extends Module":[109,0,0,"attr-class PipelinedResetModule extends Module"],"class PipelinedResetTester extends BasicTester":[109,0,0,"attr-class PipelinedResetTester extends BasicTester"],"class PlusOne extends Module":[109,0,0,"attr-class PlusOne extends Module"],"class PlusOneModule extends Module":[109,0,0,"attr-class PlusOneModule extends Module"],"class PopCountSpec extends ChiselPropSpec":[109,0,0,"attr-class PopCountSpec extends ChiselPropSpec"],"class PopCountTester(n: Int) extends BasicTester":[109,0,0,"attr-class PopCountTester(n: Int) extends BasicTester"],"class PortsWinTester extends NamedModuleTester":[110,0,0,"attr-class PortsWinTester extends NamedModuleTester"],"class PrintableSpec extends FlatSpec with Matchers":[109,0,0,"attr-class PrintableSpec extends FlatSpec with Matchers"],"class PrintfSpec extends ChiselFlatSpec":[109,0,0,"attr-class PrintfSpec extends ChiselFlatSpec"],"class PrivatePort extends NamedModuleTester":[110,0,0,"attr-class PrivatePort extends NamedModuleTester"],"class ProgrammaticPortsSpec extends ChiselFlatSpec":[110,0,0,"attr-class ProgrammaticPortsSpec extends ChiselFlatSpec"],"class QueueClone(multiIO: Boolean":[109,0,0,"attr-class QueueClone(multiIO: Boolean"],"class QueueCloneTester(x: Int, multiIO: Boolean":[109,0,0,"attr-class QueueCloneTester(x: Int, multiIO: Boolean"],"class QueueFlowTester(elements: Seq[Int], queueDepth: Int, bitWidth: Int, tap: Int) extends BasicTester":[109,0,0,"attr-class QueueFlowTester(elements: Seq[Int], queueDepth: Int, bitWidth: Int, tap: Int) extends BasicTester"],"class QueueIO[T &lt;: Data](private val gen: T, val entries: Int) extends Bundle":[99,0,0,"attr-class QueueIO[T <: Data](private val gen: T, val entries: Int) extends Bundle"],"class QueuePipeTester(elements: Seq[Int], queueDepth: Int, bitWidth: Int, tap: Int) extends BasicTester":[109,0,0,"attr-class QueuePipeTester(elements: Seq[Int], queueDepth: Int, bitWidth: Int, tap: Int) extends BasicTester"],"class QueueReasonableReadyValid(elements: Seq[Int], queueDepth: Int, bitWidth: Int, tap: Int) extends BasicTester":[109,0,0,"attr-class QueueReasonableReadyValid(elements: Seq[Int], queueDepth: Int, bitWidth: Int, tap: Int) extends BasicTester"],"class QueueSinglePipeTester(elements: Seq[Int], bitWidth: Int, tap: Int) extends BasicTester":[109,0,0,"attr-class QueueSinglePipeTester(elements: Seq[Int], bitWidth: Int, tap: Int) extends BasicTester"],"class QueueSpec extends ChiselPropSpec":[109,0,0,"attr-class QueueSpec extends ChiselPropSpec"],"class Queue[T &lt;: Data](gen: T, val entries: Int, pipe: Boolean":[99,0,0,"attr-class Queue[T <: Data](gen: T, val entries: Int, pipe: Boolean"],"class RRArbiter[T &lt;: Data](gen:T, n: Int) extends LockingRRArbiter[T](gen, n, 1)":[99,0,0,"attr-class RRArbiter[T <: Data](gen:T, n: Int) extends LockingRRArbiter[T](gen, n, 1)"],"class RangeSpec extends FreeSpec with Matchers":[109,0,0,"attr-class RangeSpec extends FreeSpec with Matchers"],"class RawModuleSpec extends ChiselFlatSpec":[109,0,0,"attr-class RawModuleSpec extends ChiselFlatSpec"],"class RawModuleTester extends BasicTester":[109,0,0,"attr-class RawModuleTester extends BasicTester"],"class RawModuleWithDirectImplicitModule extends RawModule":[109,0,0,"attr-class RawModuleWithDirectImplicitModule extends RawModule"],"class RawModuleWithImplicitModule extends RawModule":[109,0,0,"attr-class RawModuleWithImplicitModule extends RawModule"],"class RebindingSpec extends ChiselFlatSpec":[109,0,0,"attr-class RebindingSpec extends ChiselFlatSpec"],"class RecordSpec extends ChiselFlatSpec with RecordSpecUtils":[109,0,0,"attr-class RecordSpec extends ChiselFlatSpec with RecordSpecUtils"],"class RegInitWidthSpec extends WireDefaultRegInitSpecImpl":[109,0,0,"attr-class RegInitWidthSpec extends WireDefaultRegInitSpecImpl"],"class RegOfVec extends CookbookTester(2)":[115,0,0,"attr-class RegOfVec extends CookbookTester(2)"],"class RegOfVecSpec  extends CookbookSpec":[115,0,0,"attr-class RegOfVecSpec  extends CookbookSpec"],"class RegSpec extends ChiselFlatSpec":[109,0,0,"attr-class RegSpec extends ChiselFlatSpec"],"class RegTester(w: Int, values: List[Int]) extends BasicTester":[109,0,0,"attr-class RegTester(w: Int, values: List[Int]) extends BasicTester"],"class RegTesterMod(vecSize: Int) extends Module":[109,0,0,"attr-class RegTesterMod(vecSize: Int) extends Module"],"class RegWidthSpec extends WireRegWidthSpecImpl":[109,0,0,"attr-class RegWidthSpec extends WireRegWidthSpecImpl"],"class ResetAsTypeOfBoolTester extends BasicTester":[109,0,0,"attr-class ResetAsTypeOfBoolTester extends BasicTester"],"class Risc extends Module":[109,0,0,"attr-class Risc extends Module"],"class RiscSpec extends ChiselPropSpec":[109,0,0,"attr-class RiscSpec extends ChiselPropSpec"],"class RiscTester(c: Risc) extends Tester(c)":[109,0,0,"attr-class RiscTester(c: Risc) extends Tester(c)"],"class SBP extends Module":[109,0,0,"attr-class SBP extends Module"],"class SBPTester extends BasicTester":[109,0,0,"attr-class SBPTester extends BasicTester"],"class SIntLitExtractTester extends BasicTester":[109,0,0,"attr-class SIntLitExtractTester extends BasicTester"],"class SIntOneHotTester extends BasicTester":[109,0,0,"attr-class SIntOneHotTester extends BasicTester"],"class SIntOps extends Module":[109,0,0,"attr-class SIntOps extends Module"],"class SIntOpsSpec extends ChiselPropSpec":[109,0,0,"attr-class SIntOpsSpec extends ChiselPropSpec"],"class SIntOpsTester(c: SIntOps) extends Tester(c)":[109,0,0,"attr-class SIntOpsTester(c: SIntOps) extends Tester(c)"],"class SharedConstantValDedup extends Module":[109,0,0,"attr-class SharedConstantValDedup extends Module"],"class SharedConstantValDedupTop extends Module":[109,0,0,"attr-class SharedConstantValDedupTop extends Module"],"class ShiftRegisterSpec extends ChiselPropSpec":[109,0,0,"attr-class ShiftRegisterSpec extends ChiselPropSpec"],"class ShiftRegisterTester(n: Int) extends BasicTester":[109,0,0,"attr-class ShiftRegisterTester(n: Int) extends BasicTester"],"class ShiftResetTester(n: Int) extends BasicTester":[109,0,0,"attr-class ShiftResetTester(n: Int) extends BasicTester"],"class ShiftTester(n: Int) extends BasicTester":[109,0,0,"attr-class ShiftTester(n: Int) extends BasicTester"],"class SimpleBundle extends Bundle":[109,0,0,"attr-class SimpleBundle extends Bundle"],"class SimpleConnector(inType: Data, outType: Data) extends Module":[109,0,0,"attr-class SimpleConnector(inType: Data, outType: Data) extends Module"],"class SimpleIO extends Bundle":[109,0,0,"attr-class SimpleIO extends Bundle"],"class SimpleOneHotTester extends BasicTester":[109,0,0,"attr-class SimpleOneHotTester extends BasicTester"],"class SimpleVendingMachineIO extends Bundle":[116,0,0,"attr-class SimpleVendingMachineIO extends Bundle"],"class SimpleVendingMachineSpec extends ChiselFlatSpec":[116,0,0,"attr-class SimpleVendingMachineSpec extends ChiselFlatSpec"],"class SimpleVendingMachineTester(mod: =&gt; SimpleVendingMachine) extends BasicTester":[116,0,0,"attr-class SimpleVendingMachineTester(mod: => SimpleVendingMachine) extends BasicTester"],"class SinglePrintfTester() extends BasicTester":[109,0,0,"attr-class SinglePrintfTester() extends BasicTester"],"class SomeOptionBundleTester(expected: Boolean) extends BasicTester":[109,0,0,"attr-class SomeOptionBundleTester(expected: Boolean) extends BasicTester"],"class StackSpec extends ChiselPropSpec":[109,0,0,"attr-class StackSpec extends ChiselPropSpec"],"class StackTester(c: Stack) extends Tester(c)":[109,0,0,"attr-class StackTester(c: Stack) extends Tester(c)"],"class StopImmediatelyTester extends BasicTester":[109,0,0,"attr-class StopImmediatelyTester extends BasicTester"],"class StopSpec extends ChiselFlatSpec":[109,0,0,"attr-class StopSpec extends ChiselFlatSpec"],"class StopTester() extends BasicTester":[109,0,0,"attr-class StopTester() extends BasicTester"],"class StripNoDedupAnnotation extends Transform":[109,0,0,"attr-class StripNoDedupAnnotation extends Transform"],"class StrongEnumAnnotationSpec extends FreeSpec with Matchers":[109,0,0,"attr-class StrongEnumAnnotationSpec extends FreeSpec with Matchers"],"class StrongEnumAnnotator extends Module":[109,0,0,"attr-class StrongEnumAnnotator extends Module"],"class StrongEnumAnnotatorWithChiselName extends Module":[109,0,0,"attr-class StrongEnumAnnotatorWithChiselName extends Module"],"class StrongEnumFSM extends Module":[109,0,0,"attr-class StrongEnumFSM extends Module"],"class StrongEnumFSMTester extends BasicTester":[109,0,0,"attr-class StrongEnumFSMTester extends BasicTester"],"class StrongEnumSpec extends ChiselFlatSpec":[109,0,0,"attr-class StrongEnumSpec extends ChiselFlatSpec"],"class SubBundle(i: Int, val i2: Int) extends BaseBundleVal(i)":[109,0,0,"attr-class SubBundle(i: Int, val i2: Int) extends BaseBundleVal(i)"],"class SubBundleInvalid(i: Int, val i2: Int) extends BaseBundleVal(i + 1)":[109,0,0,"attr-class SubBundleInvalid(i: Int, val i2: Int) extends BaseBundleVal(i + 1)"],"class SubBundleVal(val i: Int, val i2: Int) extends BaseBundleNonVal(i)":[109,0,0,"attr-class SubBundleVal(val i: Int, val i2: Int) extends BaseBundleNonVal(i)"],"class SubmoduleWhenTester extends BasicTester":[109,0,0,"attr-class SubmoduleWhenTester extends BasicTester"],"class SucceedingAssertTester() extends BasicTester":[109,0,0,"attr-class SucceedingAssertTester() extends BasicTester"],"class SwitchContext[T &lt;: Element](cond: T, whenContext: Option[WhenContext], lits: Set[BigInt])":[99,0,0,"attr-class SwitchContext[T <: Element](cond: T, whenContext: Option[WhenContext], lits: Set[BigInt])"],"class SwitchSpec extends ChiselFlatSpec":[109,0,0,"attr-class SwitchSpec extends ChiselFlatSpec"],"class SyncReadMemTester extends BasicTester":[109,0,0,"attr-class SyncReadMemTester extends BasicTester"],"class SyncReadMemWithZeroWidthTester extends BasicTester":[109,0,0,"attr-class SyncReadMemWithZeroWidthTester extends BasicTester"],"class TabulateTester(n: Int) extends BasicTester":[109,0,0,"attr-class TabulateTester(n: Int) extends BasicTester"],"class Tbl(w: Int, n: Int) extends Module":[109,0,0,"attr-class Tbl(w: Int, n: Int) extends Module"],"class TblSpec extends ChiselPropSpec":[109,0,0,"attr-class TblSpec extends ChiselPropSpec"],"class TblTester(w: Int, n: Int, idxs: List[Int], values: List[Int]) extends BasicTester":[109,0,0,"attr-class TblTester(w: Int, n: Int, idxs: List[Int], values: List[Int]) extends BasicTester"],"class TesterDriverSpec extends ChiselFlatSpec":[109,0,0,"attr-class TesterDriverSpec extends ChiselFlatSpec"],"class ThingsPassThroughTester(elements: Seq[Int], queueDepth: Int, bitWidth: Int, tap: Int) extends BasicTester":[109,0,0,"attr-class ThingsPassThroughTester(elements: Seq[Int], queueDepth: Int, bitWidth: Int, tap: Int) extends BasicTester"],"class Top extends RawModule":[109,0,0,"attr-class Top extends RawModule"],"class TopDirectionOutput extends Module":[109,0,0,"attr-class TopDirectionOutput extends Module"],"class TopOfDiamond extends Module":[109,0,0,"attr-class TopOfDiamond extends Module"],"class TopTester extends ShouldntAssertTester":[109,0,0,"attr-class TopTester extends ShouldntAssertTester"],"class TransitNameSpec extends FlatSpec with Matchers":[109,0,0,"attr-class TransitNameSpec extends FlatSpec with Matchers"],"class UInt2Bundle extends CookbookTester(1)":[115,0,0,"attr-class UInt2Bundle extends CookbookTester(1)"],"class UInt2BundleSpec extends CookbookSpec":[115,0,0,"attr-class UInt2BundleSpec extends CookbookSpec"],"class UInt2VecOfBool extends CookbookTester(1)":[115,0,0,"attr-class UInt2VecOfBool extends CookbookTester(1)"],"class UInt2VecOfBoolSpec extends CookbookSpec":[115,0,0,"attr-class UInt2VecOfBoolSpec extends CookbookSpec"],"class UIntLitExtractTester extends BasicTester":[109,0,0,"attr-class UIntLitExtractTester extends BasicTester"],"class UIntOps extends Module":[109,0,0,"attr-class UIntOps extends Module"],"class UIntOpsSpec extends ChiselPropSpec with Matchers":[109,0,0,"attr-class UIntOpsSpec extends ChiselPropSpec with Matchers"],"class UIntOpsTester(a: Long, b: Long) extends BasicTester":[109,0,0,"attr-class UIntOpsTester(a: Long, b: Long) extends BasicTester"],"class UIntToOHTester extends BasicTester":[109,0,0,"attr-class UIntToOHTester extends BasicTester"],"class UnclockedPlusOne extends RawModule":[109,0,0,"attr-class UnclockedPlusOne extends RawModule"],"class UsesBlackBoxAddViaInline extends Module":[109,0,0,"attr-class UsesBlackBoxAddViaInline extends Module"],"class UsesBlackBoxMinusViaPath extends Module":[109,0,0,"attr-class UsesBlackBoxMinusViaPath extends Module"],"class UsesBlackBoxMinusViaResource extends Module":[109,0,0,"attr-class UsesBlackBoxMinusViaResource extends Module"],"class UsesMem(memoryDepth: Int, memoryType: Data) extends Module":[109,0,0,"attr-class UsesMem(memoryDepth: Int, memoryType: Data) extends Module"],"class UsesMemLow(memoryDepth: Int, memoryType: Data) extends Module":[109,0,0,"attr-class UsesMemLow(memoryDepth: Int, memoryType: Data) extends Module"],"class UsesMuchUsedModule(addAnnos: Boolean) extends Module":[109,0,0,"attr-class UsesMuchUsedModule(addAnnos: Boolean) extends Module"],"class UsesThreeMems(memoryDepth: Int, memoryType: Data) extends Module":[109,0,0,"attr-class UsesThreeMems(memoryDepth: Int, memoryType: Data) extends Module"],"class Valid[+T &lt;: Data](gen: T) extends Bundle":[99,0,0,"attr-class Valid[+T <: Data](gen: T) extends Bundle"],"class ValueTester(w: Int, values: List[Int]) extends BasicTester":[109,0,0,"attr-class ValueTester(w: Int, values: List[Int]) extends BasicTester"],"class VecAnalogReaderWrapper extends RawModule with AnalogReader":[109,0,0,"attr-class VecAnalogReaderWrapper extends RawModule with AnalogReader"],"class VecBundleAnalogReaderWrapper extends RawModule with AnalogReader":[109,0,0,"attr-class VecBundleAnalogReaderWrapper extends RawModule with AnalogReader"],"class VecOfBool2UInt extends CookbookTester(1)":[115,0,0,"attr-class VecOfBool2UInt extends CookbookTester(1)"],"class VecOfBool2UIntSpec  extends CookbookSpec":[115,0,0,"attr-class VecOfBool2UIntSpec  extends CookbookSpec"],"class VecSpec extends ChiselPropSpec":[109,0,0,"attr-class VecSpec extends ChiselPropSpec"],"class VectorPacketIO(val n: Int) extends Bundle":[109,0,0,"attr-class VectorPacketIO(val n: Int) extends Bundle"],"class VectorPacketIOUnitTester extends BasicTester":[109,0,0,"attr-class VectorPacketIOUnitTester extends BasicTester"],"class VectorPacketIOUnitTesterSpec extends ChiselFlatSpec":[109,0,0,"attr-class VectorPacketIOUnitTesterSpec extends ChiselFlatSpec"],"class VendingMachineGenerator(legalCoins: Seq[Coin], sodaCost: Int) extends ParameterizedVendingMachine(legalCoins, sodaCost)":[116,0,0,"attr-class VendingMachineGenerator(legalCoins: Seq[Coin], sodaCost: Int) extends ParameterizedVendingMachine(legalCoins, sodaCost)"],"class VendingMachineGeneratorSpec extends ChiselFlatSpec":[116,0,0,"attr-class VendingMachineGeneratorSpec extends ChiselFlatSpec"],"class VendingMachineIO(val legalCoins: Seq[Coin]) extends Bundle":[116,0,0,"attr-class VendingMachineIO(val legalCoins: Seq[Coin]) extends Bundle"],"class VerilogVendingMachine extends BlackBox":[116,0,0,"attr-class VerilogVendingMachine extends BlackBox"],"class VerilogVendingMachineWrapper extends SimpleVendingMachine":[116,0,0,"attr-class VerilogVendingMachineWrapper extends SimpleVendingMachine"],"class WhenSpec extends ChiselFlatSpec":[109,0,0,"attr-class WhenSpec extends ChiselFlatSpec"],"class WhenTester() extends BasicTester":[109,0,0,"attr-class WhenTester() extends BasicTester"],"class WidthSpec extends ChiselFlatSpec":[109,0,0,"attr-class WidthSpec extends ChiselFlatSpec"],"class WidthTester extends BasicTester":[109,0,0,"attr-class WidthTester extends BasicTester"],"class WireDefaultWidthSpec extends WireDefaultRegInitSpecImpl":[109,0,0,"attr-class WireDefaultWidthSpec extends WireDefaultRegInitSpecImpl"],"class WireSpec extends ChiselFlatSpec":[109,0,0,"attr-class WireSpec extends ChiselFlatSpec"],"class WireWidthSpec extends WireRegWidthSpecImpl":[109,0,0,"attr-class WireWidthSpec extends WireRegWidthSpecImpl"],"class WithClockAndNoReset extends RawModule":[109,0,0,"attr-class WithClockAndNoReset extends RawModule"],"class WithResetTest extends BasicTester":[109,0,0,"attr-class WithResetTest extends BasicTester"],"class WrapTester(max: Int) extends BasicTester":[109,0,0,"attr-class WrapTester(max: Int) extends BasicTester"],"class ZeroEntryVecTester extends BasicTester":[109,0,0,"attr-class ZeroEntryVecTester extends BasicTester"],"def &amp;&amp; (that: Bool): Bool":[3,0,0,"attr-def && (that: Bool): Bool"],"def &lt;&gt; (that: Seq[T])(implicit sourceInfo: SourceInfo, moduleCompileOptions: CompileOptions): Unit =":[3,0,0,"attr-def <> (that: Seq[T])(implicit sourceInfo: SourceInfo, moduleCompileOptions: CompileOptions): Unit ="],"def := (that: Seq[T])(implicit sourceInfo: SourceInfo, moduleCompileOptions: CompileOptions): Unit =":[3,0,0,"attr-def := (that: Seq[T])(implicit sourceInfo: SourceInfo, moduleCompileOptions: CompileOptions): Unit ="],"def :=(that: Seq[T]): Unit =":[99,0,0,"attr-def :=(that: Seq[T]): Unit ="],"def B: Bool":[3,0,0,"attr-def B: Bool"],"def S(width: Width): SInt":[3,0,0,"attr-def S(width: Width): SInt"],"def S: SInt":[3,0,0,"attr-def S: SInt"],"def U(width: Width): UInt":[3,0,0,"attr-def U(width: Width): UInt"],"def U: UInt":[3,0,0,"attr-def U: UInt"],"def _compatAutoWrapPorts()":[3,0,0,"attr-def _compatAutoWrapPorts()"],"def addDescendant(ref: Any, descendant: NamingContext)":[6,0,0,"attr-def addDescendant(ref: Any, descendant: NamingContext)"],"def addPath(blackBoxPath: String): Unit =":[99,0,0,"attr-def addPath(blackBoxPath: String): Unit ="],"def addResource(blackBoxResource: String): Unit =":[99,0,0,"attr-def addResource(blackBoxResource: String): Unit ="],"def addSink(component: InstanceId, name: String, disableDedup: Boolean = false, forceExists: Boolean = false): Unit =":[97,0,0,"attr-def addSink(component: InstanceId, name: String, disableDedup: Boolean = false, forceExists: Boolean = false): Unit ="],"def addSource(component: NamedComponent, name: String, disableDedup: Boolean = false, uniqueName: Boolean = false): String =":[97,0,0,"attr-def addSource(component: NamedComponent, name: String, disableDedup: Boolean = false, uniqueName: Boolean = false): String ="],"def apply()(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): Unit =":[3,0,0,"attr-def apply()(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): Unit ="],"def apply(): Bool":[3,0,0,"attr-def apply(): Bool"],"def apply(): FixedPoint":[3,0,0,"attr-def apply(): FixedPoint"],"def apply(): SInt":[3,0,0,"attr-def apply(): SInt"],"def apply(): UInt":[3,0,0,"attr-def apply(): UInt"],"def apply(c: Bool)(block: =&gt; Unit)":[99,0,0,"attr-def apply(c: Bool)(block: => Unit)"],"def apply(code: Int)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): Unit =":[3,0,0,"attr-def apply(code: Int)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): Unit ="],"def apply(cond: =&gt; Bool)(block: =&gt; Unit)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): WhenContext =":[3,0,0,"attr-def apply(cond: => Bool)(block: => Unit)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): WhenContext ="],"def apply(cond: Bool, message: String, data: Bits*)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): Unit":[3,0,0,"attr-def apply(cond: Bool, message: String, data: Bits*)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): Unit"],"def apply(cond: Bool, n: Int): (UInt, Bool) =":[99,0,0,"attr-def apply(cond: Bool, n: Int): (UInt, Bool) ="],"def apply(cond: Boolean)":[3,0,0,"attr-def apply(cond: Boolean)"],"def apply(cond: Boolean, message: =&gt; String)":[3,0,0,"attr-def apply(cond: Boolean, message: => String)"],"def apply(dir: Direction): Bool =":[91,0,0,"attr-def apply(dir: Direction): Bool ="],"def apply(dir: Direction): SInt":[91,0,0,"attr-def apply(dir: Direction): SInt"],"def apply(dir: Direction): UInt":[91,0,0,"attr-def apply(dir: Direction): UInt"],"def apply(dir: Direction, width: Int): SInt":[91,0,0,"attr-def apply(dir: Direction, width: Int): SInt"],"def apply(dir: Direction, width: Int): UInt":[91,0,0,"attr-def apply(dir: Direction, width: Int): UInt"],"def apply(elts: Analog*)(implicit sourceInfo: SourceInfo): Unit =":[3,0,0,"attr-def apply(elts: Analog*)(implicit sourceInfo: SourceInfo): Unit ="],"def apply(fmt: String, data: Bits*)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): Unit":[3,0,0,"attr-def apply(fmt: String, data: Bits*)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): Unit"],"def apply(idx: Int): T":[3,0,0,"attr-def apply(idx: Int): T"],"def apply(in: BigInt): Int =":[99,0,0,"attr-def apply(in: BigInt): Int ="],"def apply(index: Int): T":[99,0,0,"attr-def apply(index: Int): T"],"def apply(n: Int): Counter":[99,0,0,"attr-def apply(n: Int): Counter"],"def apply(n: Int): List[UInt]":[99,0,0,"attr-def apply(n: Int): List[UInt]"],"def apply(n: Int, in: Seq[Bool]): UInt":[99,0,0,"attr-def apply(n: Int, in: Seq[Bool]): UInt"],"def apply(n: Int, in: UInt): UInt":[99,0,0,"attr-def apply(n: Int, in: UInt): UInt"],"def apply(n: Int, x: UInt): UInt =":[99,0,0,"attr-def apply(n: Int, x: UInt): UInt ="],"def apply(n: String): BitPat =":[99,0,0,"attr-def apply(n: String): BitPat ="],"def apply(n: String): UInt":[91,0,0,"attr-def apply(n: String): UInt"],"def apply(n: String, width: Int): UInt":[91,0,0,"attr-def apply(n: String, width: Int): UInt"],"def apply(name: String): ChiselGeneratorAnnotation =":[95,0,0,"attr-def apply(name: String): ChiselGeneratorAnnotation ="],"def apply(pable: Printable)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): Unit =":[3,0,0,"attr-def apply(pable: Printable)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): Unit ="],"def apply(range: (NumericBound[Int], NumericBound[Int])): SInt =":[3,0,0,"attr-def apply(range: (NumericBound[Int], NumericBound[Int])): SInt ="],"def apply(range: (NumericBound[Int], NumericBound[Int])): UInt =":[3,0,0,"attr-def apply(range: (NumericBound[Int], NumericBound[Int])): UInt ="],"def apply(range: Range): SInt =":[3,0,0,"attr-def apply(range: Range): SInt ="],"def apply(range: Range): UInt =":[3,0,0,"attr-def apply(range: Range): UInt ="],"def apply(specifier: String, data: Data): FirrtlFormat =":[3,0,0,"attr-def apply(specifier: String, data: Data): FirrtlFormat ="],"def apply(v: Element)(block: =&gt; Unit)":[99,0,0,"attr-def apply(v: Element)(block: => Unit)"],"def apply(v: Element, vr: Element*)(block: =&gt; Unit)":[99,0,0,"attr-def apply(v: Element, vr: Element*)(block: => Unit)"],"def apply(v: Iterable[Element])(block: =&gt; Unit)":[99,0,0,"attr-def apply(v: Iterable[Element])(block: => Unit)"],"def apply(value: BigInt): SInt":[91,0,0,"attr-def apply(value: BigInt): SInt"],"def apply(value: BigInt): UInt":[91,0,0,"attr-def apply(value: BigInt): UInt"],"def apply(value: BigInt, width: Int): SInt":[91,0,0,"attr-def apply(value: BigInt, width: Int): SInt"],"def apply(value: BigInt, width: Int): UInt":[91,0,0,"attr-def apply(value: BigInt, width: Int): UInt"],"def apply(value: BigInt, width: Width): SInt":[91,0,0,"attr-def apply(value: BigInt, width: Width): SInt"],"def apply(value: BigInt, width: Width): UInt":[91,0,0,"attr-def apply(value: BigInt, width: Width): UInt"],"def apply(value: BigInt, width: Width, binaryPoint: BinaryPoint): FixedPoint =":[3,0,0,"attr-def apply(value: BigInt, width: Width, binaryPoint: BinaryPoint): FixedPoint ="],"def apply(width: Int, binaryPoint: Int): FixedPoint":[3,0,0,"attr-def apply(width: Int, binaryPoint: Int): FixedPoint"],"def apply(width: Width): SInt":[3,0,0,"attr-def apply(width: Width): SInt"],"def apply(width: Width): UInt":[3,0,0,"attr-def apply(width: Width): UInt"],"def apply(width: Width, binaryPoint: BinaryPoint): FixedPoint":[3,0,0,"attr-def apply(width: Width, binaryPoint: BinaryPoint): FixedPoint"],"def apply(x: BigInt): T":[3,0,0,"attr-def apply(x: BigInt): T"],"def apply(x: Bits, width: Int): UInt =":[99,0,0,"attr-def apply(x: Bits, width: Int): UInt ="],"def apply(x: Boolean): Bool":[91,0,0,"attr-def apply(x: Boolean): Bool"],"def apply(x: Int): T":[3,0,0,"attr-def apply(x: Int): T"],"def apply(x: UInt): BitPat =":[99,0,0,"attr-def apply(x: UInt): BitPat ="],"def apply(x: UInt): T":[3,0,0,"attr-def apply(x: UInt): T"],"def apply[S &lt;: UInt, T &lt;: Data] (key: S, default: T, mapping: Seq[(S, T)]): T =":[99,0,0,"attr-def apply[S <: UInt, T <: Data] (key: S, default: T, mapping: Seq[(S, T)]): T ="],"def apply[T &lt;: BaseModule](bc: =&gt; T): T":[3,0,0,"attr-def apply[T <: BaseModule](bc: => T): T"],"def apply[T &lt;: Bits](a: T, r: T*): UInt":[99,0,0,"attr-def apply[T <: Bits](a: T, r: T*): UInt"],"def apply[T &lt;: Bits](nodeType: T, l: List[Symbol]): Map[Symbol, T] =":[91,0,0,"attr-def apply[T <: Bits](nodeType: T, l: List[Symbol]): Map[Symbol, T] ="],"def apply[T &lt;: Bits](nodeType: T, l: Symbol *): Map[Symbol, T] =":[91,0,0,"attr-def apply[T <: Bits](nodeType: T, l: Symbol *): Map[Symbol, T] ="],"def apply[T &lt;: Bits](nodeType: T, n: Int): List[T] =":[91,0,0,"attr-def apply[T <: Bits](nodeType: T, n: Int): List[T] ="],"def apply[T &lt;: Bits](r: Seq[T]): UInt":[99,0,0,"attr-def apply[T <: Bits](r: Seq[T]): UInt"],"def apply[T &lt;: Data] (default: T, mapping: Seq[(Bool, T)]): T =":[99,0,0,"attr-def apply[T <: Data] (default: T, mapping: Seq[(Bool, T)]): T ="],"def apply[T &lt;: Data](cond: Bool, con: T, alt: T): T":[3,0,0,"attr-def apply[T <: Data](cond: Bool, con: T, alt: T): T"],"def apply[T &lt;: Data](data: T)(implicit compileOptions: CompileOptions): T =":[3,0,0,"attr-def apply[T <: Data](data: T)(implicit compileOptions: CompileOptions): T ="],"def apply[T &lt;: Data](dec: DecoupledIO[T]): IrrevocableIO[T] =":[99,0,0,"attr-def apply[T <: Data](dec: DecoupledIO[T]): IrrevocableIO[T] ="],"def apply[T &lt;: Data](elt0: T, elts: T*): Vec[T]":[3,0,0,"attr-def apply[T <: Data](elt0: T, elts: T*): Vec[T]"],"def apply[T &lt;: Data](elts: Seq[T]): Vec[T]":[3,0,0,"attr-def apply[T <: Data](elts: Seq[T]): Vec[T]"],"def apply[T &lt;: Data](eltsIn: Seq[T]): MixedVec[T]":[99,0,0,"attr-def apply[T <: Data](eltsIn: Seq[T]): MixedVec[T]"],"def apply[T &lt;: Data](enq: ReadyValidIO[T], entries: Int = 2, pipe: Boolean = false, flow: Boolean = false): DecoupledIO[T] =":[99,0,0,"attr-def apply[T <: Data](enq: ReadyValidIO[T], entries: Int = 2, pipe: Boolean = false, flow: Boolean = false): DecoupledIO[T] ="],"def apply[T &lt;: Data](enq: Valid[T], latency: Int = 1)(implicit compileOptions: CompileOptions): Valid[T] =":[99,0,0,"attr-def apply[T <: Data](enq: Valid[T], latency: Int = 1)(implicit compileOptions: CompileOptions): Valid[T] ="],"def apply[T &lt;: Data](enqValid: Bool, enqBits: T)(implicit compileOptions: CompileOptions): Valid[T] =":[99,0,0,"attr-def apply[T <: Data](enqValid: Bool, enqBits: T)(implicit compileOptions: CompileOptions): Valid[T] ="],"def apply[T &lt;: Data](enqValid: Bool, enqBits: T, latency: Int)(implicit compileOptions: CompileOptions): Valid[T] =":[99,0,0,"attr-def apply[T <: Data](enqValid: Bool, enqBits: T, latency: Int)(implicit compileOptions: CompileOptions): Valid[T] ="],"def apply[T &lt;: Data](gen: T): DecoupledIO[T]":[99,0,0,"attr-def apply[T <: Data](gen: T): DecoupledIO[T]"],"def apply[T &lt;: Data](gen: T): Valid[T]":[99,0,0,"attr-def apply[T <: Data](gen: T): Valid[T]"],"def apply[T &lt;: Data](in: T, n: Int, resetData: T, en: Bool): T =":[99,0,0,"attr-def apply[T <: Data](in: T, n: Int, resetData: T, en: Bool): T ="],"def apply[T &lt;: Data](init: T)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): T =":[3,0,0,"attr-def apply[T <: Data](init: T)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): T ="],"def apply[T &lt;: Data](irr: IrrevocableIO[T]): DecoupledIO[T] =":[99,0,0,"attr-def apply[T <: Data](irr: IrrevocableIO[T]): DecoupledIO[T] ="],"def apply[T &lt;: Data](mixedVec: MixedVec[T]): MixedVec[T]":[99,0,0,"attr-def apply[T <: Data](mixedVec: MixedVec[T]): MixedVec[T]"],"def apply[T &lt;: Data](n: Int, gen: T)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): Vec[T] =":[3,0,0,"attr-def apply[T <: Data](n: Int, gen: T)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): Vec[T] ="],"def apply[T &lt;: Data](next: T)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): T =":[3,0,0,"attr-def apply[T <: Data](next: T)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): T ="],"def apply[T &lt;: Data](next: T, enable: Bool): T =":[99,0,0,"attr-def apply[T <: Data](next: T, enable: Bool): T ="],"def apply[T &lt;: Data](next: T, init: T)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): T =":[3,0,0,"attr-def apply[T <: Data](next: T, init: T)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): T ="],"def apply[T &lt;: Data](next: T, init: T, enable: Bool): T =":[99,0,0,"attr-def apply[T <: Data](next: T, init: T, enable: Bool): T ="],"def apply[T &lt;: Data](size: BigInt, t: T): Mem[T]":[3,0,0,"attr-def apply[T <: Data](size: BigInt, t: T): Mem[T]"],"def apply[T &lt;: Data](size: BigInt, t: T): SyncReadMem[T]":[3,0,0,"attr-def apply[T <: Data](size: BigInt, t: T): SyncReadMem[T]"],"def apply[T &lt;: Data](size: Int, t: T): Mem[T]":[3,0,0,"attr-def apply[T <: Data](size: Int, t: T): Mem[T]"],"def apply[T &lt;: Data](size: Int, t: T): SyncReadMem[T]":[3,0,0,"attr-def apply[T <: Data](size: Int, t: T): SyncReadMem[T]"],"def apply[T &lt;: Data](t: T = null, next: T = null, init: T = null) (implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): T =":[91,0,0,"attr-def apply[T <: Data](t: T = null, next: T = null, init: T = null) (implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): T ="],"def apply[T &lt;: Data](t: T)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): T =":[3,0,0,"attr-def apply[T <: Data](t: T)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): T ="],"def apply[T &lt;: Data](t: T, init: T)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): T =":[3,0,0,"attr-def apply[T <: Data](t: T, init: T)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): T ="],"def apply[T &lt;: Data](val0: T, vals: T*): MixedVec[T]":[99,0,0,"attr-def apply[T <: Data](val0: T, vals: T*): MixedVec[T]"],"def apply[T &lt;: Data](vals: Seq[T]): MixedVec[T] =":[99,0,0,"attr-def apply[T <: Data](vals: Seq[T]): MixedVec[T] ="],"def apply[T &lt;: Data](vec: Vec[T]): MixedVec[T] =":[99,0,0,"attr-def apply[T <: Data](vec: Vec[T]): MixedVec[T] ="],"def apply[T &lt;: LegacyModule](module: T)(implicit compileOptions: CompileOptions): Unit =":[3,0,0,"attr-def apply[T <: LegacyModule](module: T)(implicit compileOptions: CompileOptions): Unit ="],"def apply[T&lt;:Data](iodef: T): T =":[3,0,0,"attr-def apply[T<:Data](iodef: T): T ="],"def apply[T&lt;:HasId](from: T, to: HasId): T =":[99,0,0,"attr-def apply[T<:HasId](from: T, to: HasId): T ="],"def apply[T](clock: Clock)(block: =&gt; T): T =":[2,0,0,"attr-def apply[T](clock: Clock)(block: => T): T ="],"def apply[T](clock: Clock)(block: =&gt; T): T":[3,0,0,"attr-def apply[T](clock: Clock)(block: => T): T"],"def apply[T](clock: Clock, reset: Reset)(block: =&gt; T): T =":[3,0,0,"attr-def apply[T](clock: Clock, reset: Reset)(block: => T): T ="],"def apply[T](reset: Reset)(block: =&gt; T): T =":[2,0,0,"attr-def apply[T](reset: Reset)(block: => T): T ="],"def apply[T](reset: Reset)(block: =&gt; T): T":[3,0,0,"attr-def apply[T](reset: Reset)(block: => T): T"],"def asBool(): Bool":[3,0,0,"attr-def asBool(): Bool"],"def asClock(): Clock":[3,0,0,"attr-def asClock(): Clock"],"def asSInt(): SInt":[3,0,0,"attr-def asSInt(): SInt"],"def asSInt(width: Width): SInt":[3,0,0,"attr-def asSInt(width: Width): SInt"],"def asTypeOf[T &lt;: Data](that: T): T":[3,0,0,"attr-def asTypeOf[T <: Data](that: T): T"],"def asUInt(): UInt =":[3,0,0,"attr-def asUInt(): UInt ="],"def asUInt(): UInt":[3,0,0,"attr-def asUInt(): UInt"],"def asUInt(width: Width): UInt":[3,0,0,"attr-def asUInt(width: Width): UInt"],"def asUInt[T &lt;: Bits](in: Seq[T]): UInt":[3,0,0,"attr-def asUInt[T <: Bits](in: Seq[T]): UInt"],"def bitPatToUInt(x: BitPat): UInt =":[99,0,0,"attr-def bitPatToUInt(x: BitPat): UInt ="],"def bore(source: Data, sinks: Seq[Data]): String =":[97,0,0,"attr-def bore(source: Data, sinks: Seq[Data]): String ="],"def checkpoint(): Unit =":[6,0,0,"attr-def checkpoint(): Unit ="],"def className: String":[3,0,0,"attr-def className: String"],"def cleanName(name: String): String":[3,0,0,"attr-def cleanName(name: String): String"],"def clock: Clock":[3,0,0,"attr-def clock: Clock"],"def compile(t: =&gt; RawModule): String =":[109,0,0,"attr-def compile(t: => RawModule): String ="],"def compileFirrtlToVerilog(prefix: String, dir: File): Boolean =":[91,0,0,"attr-def compileFirrtlToVerilog(prefix: String, dir: File): Boolean ="],"def computeGcd(a: Int, b: Int): (Int, Int) =":[120,0,0,"attr-def computeGcd(a: Int, b: Int): (Int, Int) ="],"def connect(sourceInfo: SourceInfo, connectCompileOptions: CompileOptions, left: Data, right: Data, context_mod: RawModule): Unit =":[6,0,0,"attr-def connect(sourceInfo: SourceInfo, connectCompileOptions: CompileOptions, left: Data, right: Data, context_mod: RawModule): Unit ="],"def connect(sourceInfo: SourceInfo, connectCompileOptions: CompileOptions, sink: Data, source: Data, context_mod: RawModule): Unit":[6,0,0,"attr-def connect(sourceInfo: SourceInfo, connectCompileOptions: CompileOptions, sink: Data, source: Data, context_mod: RawModule): Unit"],"def contains(x: T)(implicit ev: T &lt;:&lt; UInt): Bool":[3,0,0,"attr-def contains(x: T)(implicit ev: T <:< UInt): Bool"],"def count(in: Seq[Bool]): UInt":[3,0,0,"attr-def count(in: Seq[Bool]): UInt"],"def count(p: T =&gt; Bool): UInt":[3,0,0,"attr-def count(p: T => Bool): UInt"],"def currentModule: Option[BaseModule]":[3,0,0,"attr-def currentModule: Option[BaseModule]"],"def delta(s: Seq[Bool]): Seq[Bool]":[98,0,0,"attr-def delta(s: Seq[Bool]): Seq[Bool]"],"def deprecated(m: =&gt; String, location: Option[String]): Unit =":[6,0,0,"attr-def deprecated(m: => String, location: Option[String]): Unit ="],"def deq(): T =":[99,0,0,"attr-def deq(): T ="],"def desiredName: String":[3,0,0,"attr-def desiredName: String"],"def do_!= (that: FixedPoint)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): Bool":[3,0,0,"attr-def do_!= (that: FixedPoint)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): Bool"],"def do_## (that: Bits)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): UInt =":[3,0,0,"attr-def do_## (that: Bits)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): UInt ="],"def do_% (that: T)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): T":[3,0,0,"attr-def do_% (that: T)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): T"],"def do_&amp; (that: Bool)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): Bool":[3,0,0,"attr-def do_& (that: Bool)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): Bool"],"def do_&amp; (that: FixedPoint)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): FixedPoint":[3,0,0,"attr-def do_& (that: FixedPoint)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): FixedPoint"],"def do_&amp; (that: SInt)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): SInt":[3,0,0,"attr-def do_& (that: SInt)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): SInt"],"def do_&amp; (that: UInt)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): UInt":[3,0,0,"attr-def do_& (that: UInt)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): UInt"],"def do_&amp;&amp; (that: Bool)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): Bool":[3,0,0,"attr-def do_&& (that: Bool)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): Bool"],"def do_&gt; (that: T)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): Bool":[3,0,0,"attr-def do_> (that: T)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): Bool"],"def do_&gt;&gt; (that: BigInt)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): Bits":[3,0,0,"attr-def do_>> (that: BigInt)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): Bits"],"def do_&gt;&gt; (that: Int)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): Bits":[3,0,0,"attr-def do_>> (that: Int)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): Bits"],"def do_&gt;&gt; (that: UInt)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): Bits":[3,0,0,"attr-def do_>> (that: UInt)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): Bits"],"def do_&gt;= (that: T)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): Bool":[3,0,0,"attr-def do_>= (that: T)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): Bool"],"def do_&lt; (that: T)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): Bool":[3,0,0,"attr-def do_< (that: T)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): Bool"],"def do_&lt;&lt; (that: BigInt)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): Bits":[3,0,0,"attr-def do_<< (that: BigInt)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): Bits"],"def do_&lt;&lt; (that: Int)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): Bits":[3,0,0,"attr-def do_<< (that: Int)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): Bits"],"def do_&lt;&lt; (that: UInt)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): Bits":[3,0,0,"attr-def do_<< (that: UInt)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): Bits"],"def do_&lt;= (that: T)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): Bool":[3,0,0,"attr-def do_<= (that: T)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): Bool"],"def do_* (that: SInt)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): FixedPoint":[3,0,0,"attr-def do_* (that: SInt)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): FixedPoint"],"def do_* (that: SInt)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): SInt":[3,0,0,"attr-def do_* (that: SInt)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): SInt"],"def do_* (that: T)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): T":[3,0,0,"attr-def do_* (that: T)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): T"],"def do_* (that: UInt)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): FixedPoint":[3,0,0,"attr-def do_* (that: UInt)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): FixedPoint"],"def do_* (that: UInt)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): SInt =":[3,0,0,"attr-def do_* (that: UInt)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): SInt ="],"def do_+ (that: T)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): T":[3,0,0,"attr-def do_+ (that: T)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): T"],"def do_+% (that: FixedPoint)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): FixedPoint":[3,0,0,"attr-def do_+% (that: FixedPoint)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): FixedPoint"],"def do_+% (that: SInt)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): SInt":[3,0,0,"attr-def do_+% (that: SInt)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): SInt"],"def do_+% (that: UInt)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): UInt":[3,0,0,"attr-def do_+% (that: UInt)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): UInt"],"def do_+&amp; (that: FixedPoint)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): FixedPoint =":[3,0,0,"attr-def do_+& (that: FixedPoint)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): FixedPoint ="],"def do_+&amp; (that: SInt)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): SInt":[3,0,0,"attr-def do_+& (that: SInt)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): SInt"],"def do_+&amp; (that: UInt)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): UInt":[3,0,0,"attr-def do_+& (that: UInt)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): UInt"],"def do_- (that: T)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): T":[3,0,0,"attr-def do_- (that: T)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): T"],"def do_-% (that: FixedPoint)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): FixedPoint":[3,0,0,"attr-def do_-% (that: FixedPoint)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): FixedPoint"],"def do_-% (that: SInt)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): SInt":[3,0,0,"attr-def do_-% (that: SInt)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): SInt"],"def do_-% (that: UInt)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): UInt":[3,0,0,"attr-def do_-% (that: UInt)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): UInt"],"def do_-&amp; (that: FixedPoint)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): FixedPoint =":[3,0,0,"attr-def do_-& (that: FixedPoint)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): FixedPoint ="],"def do_-&amp; (that: SInt)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): SInt":[3,0,0,"attr-def do_-& (that: SInt)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): SInt"],"def do_-&amp; (that: UInt)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): UInt":[3,0,0,"attr-def do_-& (that: UInt)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): UInt"],"def do_/ (that: T)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): T":[3,0,0,"attr-def do_/ (that: T)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): T"],"def do_=/= (that: BitPat) (implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): Bool":[99,0,0,"attr-def do_=/= (that: BitPat) (implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): Bool"],"def do_=/= (that: FixedPoint)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): Bool":[3,0,0,"attr-def do_=/= (that: FixedPoint)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): Bool"],"def do_=/= (that: SInt)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): Bool":[3,0,0,"attr-def do_=/= (that: SInt)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): Bool"],"def do_=/= (that: UInt) (implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): Bool =":[99,0,0,"attr-def do_=/= (that: UInt) (implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): Bool ="],"def do_=/= (that: UInt)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): Bool":[3,0,0,"attr-def do_=/= (that: UInt)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): Bool"],"def do_=== (that: BitPat) (implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): Bool":[99,0,0,"attr-def do_=== (that: BitPat) (implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): Bool"],"def do_=== (that: FixedPoint)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): Bool":[3,0,0,"attr-def do_=== (that: FixedPoint)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): Bool"],"def do_=== (that: SInt)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): Bool":[3,0,0,"attr-def do_=== (that: SInt)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): Bool"],"def do_=== (that: UInt) (implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): Bool =":[99,0,0,"attr-def do_=== (that: UInt) (implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): Bool ="],"def do_=== (that: UInt)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): Bool":[3,0,0,"attr-def do_=== (that: UInt)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): Bool"],"def do_^ (that: Bool)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): Bool":[3,0,0,"attr-def do_^ (that: Bool)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): Bool"],"def do_^ (that: FixedPoint)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): FixedPoint":[3,0,0,"attr-def do_^ (that: FixedPoint)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): FixedPoint"],"def do_^ (that: SInt)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): SInt":[3,0,0,"attr-def do_^ (that: SInt)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): SInt"],"def do_^ (that: UInt)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): UInt":[3,0,0,"attr-def do_^ (that: UInt)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): UInt"],"def do_abs(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): T":[3,0,0,"attr-def do_abs(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): T"],"def do_andR(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): Bool":[3,0,0,"attr-def do_andR(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): Bool"],"def do_apply(idx: BigInt)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): T =":[3,0,0,"attr-def do_apply(idx: BigInt)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): T ="],"def do_apply(idx: Int)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): T":[3,0,0,"attr-def do_apply(idx: Int)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): T"],"def do_apply(idx: UInt)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): T":[3,0,0,"attr-def do_apply(idx: UInt)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): T"],"def do_apply(p: UInt)(implicit compileOptions: CompileOptions): T =":[3,0,0,"attr-def do_apply(p: UInt)(implicit compileOptions: CompileOptions): T ="],"def do_apply(p: UInt)(implicit compileOptions: CompileOptions): T":[3,0,0,"attr-def do_apply(p: UInt)(implicit compileOptions: CompileOptions): T"],"def do_apply[T &lt;: BaseModule](bc: =&gt; T) (implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): T =":[3,0,0,"attr-def do_apply[T <: BaseModule](bc: => T) (implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): T ="],"def do_apply[T &lt;: Data](cond: Bool, con: T, alt: T)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): T =":[3,0,0,"attr-def do_apply[T <: Data](cond: Bool, con: T, alt: T)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): T ="],"def do_apply[T &lt;: Data](elt0: T, elts: T*) (implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): Vec[T]":[91,0,0,"attr-def do_apply[T <: Data](elt0: T, elts: T*) (implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): Vec[T]"],"def do_apply[T &lt;: Data](elt0: T, elts: T*)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): Vec[T]":[3,0,0,"attr-def do_apply[T <: Data](elt0: T, elts: T*)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): Vec[T]"],"def do_apply[T &lt;: Data](elts: Seq[T])(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): Vec[T] =":[3,0,0,"attr-def do_apply[T <: Data](elts: Seq[T])(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): Vec[T] ="],"def do_apply[T &lt;: Data](elts: Seq[T])(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): Vec[T]":[91,0,0,"attr-def do_apply[T <: Data](elts: Seq[T])(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): Vec[T]"],"def do_apply[T &lt;: Data](size: BigInt, t: T)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): Mem[T] =":[3,0,0,"attr-def do_apply[T <: Data](size: BigInt, t: T)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): Mem[T] ="],"def do_apply[T &lt;: Data](size: BigInt, t: T)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): SyncReadMem[T] =":[3,0,0,"attr-def do_apply[T <: Data](size: BigInt, t: T)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): SyncReadMem[T] ="],"def do_apply[T &lt;: Data](size: Int, t: T)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): Mem[T]":[3,0,0,"attr-def do_apply[T <: Data](size: Int, t: T)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): Mem[T]"],"def do_apply[T &lt;: Data](size: Int, t: T)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): SyncReadMem[T]":[3,0,0,"attr-def do_apply[T <: Data](size: Int, t: T)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): SyncReadMem[T]"],"def do_asBool(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): Bool":[3,0,0,"attr-def do_asBool(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): Bool"],"def do_asBools(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): Seq[Bool]":[3,0,0,"attr-def do_asBools(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): Seq[Bool]"],"def do_asClock(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): Clock":[3,0,0,"attr-def do_asClock(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): Clock"],"def do_asFixedPoint(that: BinaryPoint)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): FixedPoint =":[3,0,0,"attr-def do_asFixedPoint(that: BinaryPoint)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): FixedPoint ="],"def do_asSInt(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): SInt":[3,0,0,"attr-def do_asSInt(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): SInt"],"def do_asTypeOf[T &lt;: Data](that: T)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): T =":[3,0,0,"attr-def do_asTypeOf[T <: Data](that: T)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): T ="],"def do_asUInt(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): UInt":[3,0,0,"attr-def do_asUInt(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): UInt"],"def do_asUInt[T &lt;: Bits](in: Seq[T])(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): UInt =":[3,0,0,"attr-def do_asUInt[T <: Bits](in: Seq[T])(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): UInt ="],"def do_bitSet(off: UInt, dat: Bool)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): UInt =":[3,0,0,"attr-def do_bitSet(off: UInt, dat: Bool)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): UInt ="],"def do_contains(x: T)(implicit sourceInfo: SourceInfo, ev: T &lt;:&lt; UInt, compileOptions: CompileOptions): Bool":[3,0,0,"attr-def do_contains(x: T)(implicit sourceInfo: SourceInfo, ev: T <:< UInt, compileOptions: CompileOptions): Bool"],"def do_count(in: Seq[Bool])(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): UInt":[3,0,0,"attr-def do_count(in: Seq[Bool])(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): UInt"],"def do_count(p: T =&gt; Bool)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): UInt":[3,0,0,"attr-def do_count(p: T => Bool)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): UInt"],"def do_exists(p: T =&gt; Bool)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): Bool":[3,0,0,"attr-def do_exists(p: T => Bool)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): Bool"],"def do_forall(p: T =&gt; Bool)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): Bool":[3,0,0,"attr-def do_forall(p: T => Bool)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): Bool"],"def do_head(n: Int)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): UInt =":[3,0,0,"attr-def do_head(n: Int)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): UInt ="],"def do_indexWhere(p: T =&gt; Bool)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): UInt":[3,0,0,"attr-def do_indexWhere(p: T => Bool)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): UInt"],"def do_lastIndexWhere(p: T =&gt; Bool)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): UInt":[3,0,0,"attr-def do_lastIndexWhere(p: T => Bool)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): UInt"],"def do_max(that: T)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): T":[3,0,0,"attr-def do_max(that: T)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): T"],"def do_min(that: T)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): T":[3,0,0,"attr-def do_min(that: T)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): T"],"def do_oneHotMux[T &lt;: Data](in: Iterable[(Bool, T)]) (implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): T =":[3,0,0,"attr-def do_oneHotMux[T <: Data](in: Iterable[(Bool, T)]) (implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): T ="],"def do_onlyIndexWhere(p: T =&gt; Bool)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): UInt":[3,0,0,"attr-def do_onlyIndexWhere(p: T => Bool)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): UInt"],"def do_orR(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): Bool":[3,0,0,"attr-def do_orR(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): Bool"],"def do_priorityMux[T &lt;: Data](in: Seq[(Bool, T)]) (implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): T =":[3,0,0,"attr-def do_priorityMux[T <: Data](in: Seq[(Bool, T)]) (implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): T ="],"def do_read(addr: UInt, enable: Bool)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): T =":[3,0,0,"attr-def do_read(addr: UInt, enable: Bool)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): T ="],"def do_read(idx: UInt)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): T":[3,0,0,"attr-def do_read(idx: UInt)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): T"],"def do_setBinaryPoint(that: Int)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): FixedPoint":[3,0,0,"attr-def do_setBinaryPoint(that: Int)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): FixedPoint"],"def do_tabulate[T &lt;: Data](n: Int)(gen: (Int) =&gt; T) (implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): Vec[T]":[91,0,0,"attr-def do_tabulate[T <: Data](n: Int)(gen: (Int) => T) (implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): Vec[T]"],"def do_tabulate[T &lt;: Data](n: Int)(gen: (Int) =&gt; T)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): Vec[T]":[3,0,0,"attr-def do_tabulate[T <: Data](n: Int)(gen: (Int) => T)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): Vec[T]"],"def do_tail(n: Int)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): UInt =":[3,0,0,"attr-def do_tail(n: Int)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): UInt ="],"def do_toBool(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): Bool":[3,0,0,"attr-def do_toBool(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): Bool"],"def do_toBools(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): Seq[Bool]":[3,0,0,"attr-def do_toBools(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): Seq[Bool]"],"def do_unary_! (implicit sourceInfo: SourceInfo, compileOptions: CompileOptions) : Bool":[3,0,0,"attr-def do_unary_! (implicit sourceInfo: SourceInfo, compileOptions: CompileOptions) : Bool"],"def do_unary_- (implicit sourceInfo: SourceInfo, compileOptions: CompileOptions) : UInt":[3,0,0,"attr-def do_unary_- (implicit sourceInfo: SourceInfo, compileOptions: CompileOptions) : UInt"],"def do_unary_-% (implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): UInt":[3,0,0,"attr-def do_unary_-% (implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): UInt"],"def do_unary_~ (implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): Bits":[3,0,0,"attr-def do_unary_~ (implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): Bits"],"def do_unary_~ (implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): FixedPoint":[3,0,0,"attr-def do_unary_~ (implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): FixedPoint"],"def do_unary_~ (implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): SInt":[3,0,0,"attr-def do_unary_~ (implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): SInt"],"def do_unary_~ (implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): UInt":[3,0,0,"attr-def do_unary_~ (implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): UInt"],"def do_xorR(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): Bool":[3,0,0,"attr-def do_xorR(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): Bool"],"def do_zext(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): SInt":[3,0,0,"attr-def do_zext(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): SInt"],"def do_| (that: Bool)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): Bool":[3,0,0,"attr-def do_| (that: Bool)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): Bool"],"def do_| (that: FixedPoint)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): FixedPoint":[3,0,0,"attr-def do_| (that: FixedPoint)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): FixedPoint"],"def do_| (that: SInt)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): SInt":[3,0,0,"attr-def do_| (that: SInt)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): SInt"],"def do_| (that: UInt)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): UInt":[3,0,0,"attr-def do_| (that: UInt)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): UInt"],"def do_|| (that: Bool)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): Bool":[3,0,0,"attr-def do_|| (that: Bool)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): Bool"],"def dontCare(width: Int): BitPat":[99,0,0,"attr-def dontCare(width: Int): BitPat"],"def dumpAnnotations(ir: Circuit, optName: Option[File]): File =":[91,0,0,"attr-def dumpAnnotations(ir: Circuit, optName: Option[File]): File ="],"def dumpFirrtl(ir: Circuit, optName: Option[File]): File =":[91,0,0,"attr-def dumpFirrtl(ir: Circuit, optName: Option[File]): File ="],"def dumpProto(c: Circuit, optFile: Option[File]): File =":[91,0,0,"attr-def dumpProto(c: Circuit, optFile: Option[File]): File ="],"def elaborate: ChiselCircuitAnnotation":[95,0,0,"attr-def elaborate: ChiselCircuitAnnotation"],"def elaborate[T &lt;: RawModule](gen: () =&gt; T): Circuit":[91,0,0,"attr-def elaborate[T <: RawModule](gen: () => T): Circuit"],"def elsewhen (elseCond: =&gt; Bool)(block: =&gt; Unit)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): WhenContext =":[3,0,0,"attr-def elsewhen (elseCond: => Bool)(block: => Unit)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): WhenContext ="],"def emitVerilog[T &lt;: RawModule](gen: =&gt; T): String =":[91,0,0,"attr-def emitVerilog[T <: RawModule](gen: => T): String ="],"def emit[T &lt;: RawModule](gen: () =&gt; T): String":[91,0,0,"attr-def emit[T <: RawModule](gen: () => T): String"],"def emit[T &lt;: RawModule](ir: Circuit): String":[91,0,0,"attr-def emit[T <: RawModule](ir: Circuit): String"],"def empty: Namespace":[6,0,0,"attr-def empty: Namespace"],"def enq(dat: T): T =":[99,0,0,"attr-def enq(dat: T): T ="],"def error(m: =&gt; String): Unit":[6,0,0,"attr-def error(m: => String): Unit"],"def exception(m: =&gt; String): Unit =":[6,0,0,"attr-def exception(m: => String): Unit ="],"def execute(args: Array[String], dut: () =&gt; RawModule): ChiselExecutionResult =":[91,0,0,"attr-def execute(args: Array[String], dut: () => RawModule): ChiselExecutionResult ="],"def execute(optionsManager: ExecutionOptionsManager with HasChiselExecutionOptions with HasFirrtlOptions, dut: () =&gt; RawModule): ChiselExecutionResult =":[91,0,0,"attr-def execute(optionsManager: ExecutionOptionsManager with HasChiselExecutionOptions with HasFirrtlOptions, dut: () => RawModule): ChiselExecutionResult ="],"def execute(t: () =&gt; BasicTester, additionalVResources: Seq[String] = Seq()): Boolean =":[96,0,0,"attr-def execute(t: () => BasicTester, additionalVResources: Seq[String] = Seq()): Boolean ="],"def exists(p: T =&gt; Bool): Bool":[3,0,0,"attr-def exists(p: T => Bool): Bool"],"def expectModuleName[T &lt;: Module](node: T, fullName: String): T =":[109,0,0,"attr-def expectModuleName[T <: Module](node: T, fullName: String): T ="],"def expectName[T &lt;: InstanceId](node: T, fullName: String): T =":[109,0,0,"attr-def expectName[T <: InstanceId](node: T, fullName: String): T ="],"def fill[T &lt;: Data](n: Int)(gen: =&gt; T)(implicit compileOptions: CompileOptions): Vec[T]":[91,0,0,"attr-def fill[T <: Data](n: Int)(gen: => T)(implicit compileOptions: CompileOptions): Vec[T]"],"def finish(): Unit =":[96,0,0,"attr-def finish(): Unit ="],"def finishWrapper(test: () =&gt; BasicTester): () =&gt; BasicTester =":[96,0,0,"attr-def finishWrapper(test: () => BasicTester): () => BasicTester ="],"def fire(): Bool":[99,0,0,"attr-def fire(): Bool"],"def fire(dummy: Int = 0): Bool = valid":[99,0,0,"attr-def fire(dummy: Int = 0): Bool = valid"],"def forall(p: T =&gt; Bool): Bool":[3,0,0,"attr-def forall(p: T => Bool): Bool"],"def from(binding: TopBinding, direction: ActualDirection): BindingDirection =":[6,0,0,"attr-def from(binding: TopBinding, direction: ActualDirection): BindingDirection ="],"def fromBigInt(value: BigInt, width: Int, binaryPoint: Int): FixedPoint":[3,0,0,"attr-def fromBigInt(value: BigInt, width: Int, binaryPoint: Int): FixedPoint"],"def fromBigInt(value: BigInt, width: Width, binaryPoint: BinaryPoint): FixedPoint =":[3,0,0,"attr-def fromBigInt(value: BigInt, width: Width, binaryPoint: BinaryPoint): FixedPoint ="],"def fromBits(that: Bits)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): T =":[91,0,0,"attr-def fromBits(that: Bits)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): T ="],"def fromChildren(childDirections: Set[ActualDirection], containerDirection: SpecifiedDirection): Option[ActualDirection] =":[3,0,0,"attr-def fromChildren(childDirections: Set[ActualDirection], containerDirection: SpecifiedDirection): Option[ActualDirection] ="],"def fromDouble(value: Double, dummy: PrivateType = PrivateObject, width: Int = -1, binaryPoint: Int = 0): FixedPoint =":[3,0,0,"attr-def fromDouble(value: Double, dummy: PrivateType = PrivateObject, width: Int = -1, binaryPoint: Int = 0): FixedPoint ="],"def fromDouble(value: Double, width: Width, binaryPoint: BinaryPoint): FixedPoint =":[3,0,0,"attr-def fromDouble(value: Double, width: Width, binaryPoint: BinaryPoint): FixedPoint ="],"def fromParent(parentDirection: SpecifiedDirection, thisDirection: SpecifiedDirection): SpecifiedDirection":[3,0,0,"attr-def fromParent(parentDirection: SpecifiedDirection, thisDirection: SpecifiedDirection): SpecifiedDirection"],"def generateFirrtl(t: =&gt; RawModule): String":[109,0,0,"attr-def generateFirrtl(t: => RawModule): String"],"def getElements: Seq[Data]":[3,0,0,"attr-def getElements: Seq[Data]"],"def getNameFailures(): List[(InstanceId, String, String)] =":[109,0,0,"attr-def getNameFailures(): List[(InstanceId, String, String)] ="],"def ignoreSeq: Boolean":[3,0,0,"attr-def ignoreSeq: Boolean"],"def inc(): Bool =":[99,0,0,"attr-def inc(): Bool ="],"def indexWhere(p: T =&gt; Bool): UInt":[3,0,0,"attr-def indexWhere(p: T => Bool): UInt"],"def info(m: String): Unit":[6,0,0,"attr-def info(m: String): Unit"],"def irrevocable[T &lt;: Data](enq: ReadyValidIO[T], entries: Int = 2, pipe: Boolean = false, flow: Boolean = false): IrrevocableIO[T] =":[99,0,0,"attr-def irrevocable[T <: Data](enq: ReadyValidIO[T], entries: Int = 2, pipe: Boolean = false, flow: Boolean = false): IrrevocableIO[T] ="],"def lastIndexWhere(p: T =&gt; Bool): UInt":[3,0,0,"attr-def lastIndexWhere(p: T => Bool): UInt"],"def length: Int":[99,0,0,"attr-def length: Int"],"def litOption(): Option[BigInt]":[3,0,0,"attr-def litOption(): Option[BigInt]"],"def litToBoolean: Boolean":[3,0,0,"attr-def litToBoolean: Boolean"],"def litToBooleanOption: Option[Boolean]":[3,0,0,"attr-def litToBooleanOption: Option[Boolean]"],"def litToDouble: Double":[3,0,0,"attr-def litToDouble: Double"],"def litToDoubleOption: Option[Double]":[3,0,0,"attr-def litToDoubleOption: Option[Double]"],"def litValue(): BigInt":[3,0,0,"attr-def litValue(): BigInt"],"def main(args: Array[String])":[91,0,0,"attr-def main(args: Array[String])"],"def makeMessage(f: String =&gt; String): String":[6,0,0,"attr-def makeMessage(f: String => String): String"],"def namePrefix(prefix: String)":[6,0,0,"attr-def namePrefix(prefix: String)"],"def nameRecursively(prefix: String, nameMe: Any, namer: (HasId, String) =&gt; Unit): Unit":[6,0,0,"attr-def nameRecursively(prefix: String, nameMe: Any, namer: (HasId, String) => Unit): Unit"],"def name[T](obj: T, name: String): T":[6,0,0,"attr-def name[T](obj: T, name: String): T"],"def nodeq(): Unit =":[99,0,0,"attr-def nodeq(): Unit ="],"def noenq(): Unit =":[99,0,0,"attr-def noenq(): Unit ="],"def oneHotMux[T &lt;: Data](in: Iterable[(Bool, T)]): T":[3,0,0,"attr-def oneHotMux[T <: Data](in: Iterable[(Bool, T)]): T"],"def onlyIndexWhere(p: T =&gt; Bool): UInt":[3,0,0,"attr-def onlyIndexWhere(p: T => Bool): UInt"],"def otherwise(block: =&gt; Unit)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): Unit":[3,0,0,"attr-def otherwise(block: => Unit)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): Unit"],"def p(args: Any*): Printable =":[91,0,0,"attr-def p(args: Any*): Printable ="],"def pack(fmt: String, data: Data*): Printable =":[3,0,0,"attr-def pack(fmt: String, data: Data*): Printable ="],"def popContext[T &lt;: Any](prefixRef: T, until: NamingContext): Unit =":[6,0,0,"attr-def popContext[T <: Any](prefixRef: T, until: NamingContext): Unit ="],"def priorityMux[T &lt;: Data](in: Seq[(Bool, T)]): T":[3,0,0,"attr-def priorityMux[T <: Data](in: Seq[(Bool, T)]): T"],"def processModule(myModule: DefModule): DefModule =":[97,0,0,"attr-def processModule(myModule: DefModule): DefModule ="],"def pushContext(): NamingContext =":[6,0,0,"attr-def pushContext(): NamingContext ="],"def range(args: Any*): (NumericBound[Int], NumericBound[Int])":[91,0,0,"attr-def range(args: Any*): (NumericBound[Int], NumericBound[Int])"],"def read(x: UInt): T":[3,0,0,"attr-def read(x: UInt): T"],"def reduction: LFSRReduce":[98,0,0,"attr-def reduction: LFSRReduce"],"def reset: Reset":[3,0,0,"attr-def reset: Reset"],"def run(circuit: Circuit, annotations: AnnotationSeq): Circuit =":[97,0,0,"attr-def run(circuit: Circuit, annotations: AnnotationSeq): Circuit ="],"def simpleHarnessBackend(make: File =&gt; File): (File, String) =":[109,0,0,"attr-def simpleHarnessBackend(make: File => File): (File, String) ="],"def stop()(implicit sourceInfo: SourceInfo)":[96,0,0,"attr-def stop()(implicit sourceInfo: SourceInfo)"],"def tabulate[T &lt;: Data](n: Int)(gen: (Int) =&gt; T): Vec[T]":[3,0,0,"attr-def tabulate[T <: Data](n: Int)(gen: (Int) => T): Vec[T]"],"def toBigInt(x: Double, binaryPoint    : Int): BigInt =":[3,0,0,"attr-def toBigInt(x: Double, binaryPoint    : Int): BigInt ="],"def toBigInt(x: Double, binaryPoint: Int): BigInt =":[2,0,0,"attr-def toBigInt(x: Double, binaryPoint: Int): BigInt ="],"def toBits(implicit compileOptions: CompileOptions): UInt":[3,0,0,"attr-def toBits(implicit compileOptions: CompileOptions): UInt"],"def toDouble(i: BigInt, binaryPoint    : Int): Double =":[3,0,0,"attr-def toDouble(i: BigInt, binaryPoint    : Int): Double ="],"def toDouble(i: BigInt, binaryPoint: Int): Double =":[2,0,0,"attr-def toDouble(i: BigInt, binaryPoint: Int): Double ="],"def toFirrtl: Annotation":[3,0,0,"attr-def toFirrtl: Annotation"],"def toNamed: Named":[6,0,0,"attr-def toNamed: Named"],"def toPrintable: Printable =":[3,0,0,"attr-def toPrintable: Printable ="],"def toPrintable: Printable":[3,0,0,"attr-def toPrintable: Printable"],"def transform(annotations: AnnotationSeq): AnnotationSeq":[94,0,0,"attr-def transform(annotations: AnnotationSeq): AnnotationSeq"],"def trimmedStackTrace: Array[StackTraceElement] =":[6,0,0,"attr-def trimmedStackTrace: Array[StackTraceElement] ="],"def unary_- (implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): FixedPoint":[3,0,0,"attr-def unary_- (implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): FixedPoint"],"def unary_- (implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): SInt":[3,0,0,"attr-def unary_- (implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): SInt"],"def unary_-% (implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): FixedPoint":[3,0,0,"attr-def unary_-% (implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): FixedPoint"],"def unary_-% (implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): SInt":[3,0,0,"attr-def unary_-% (implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): SInt"],"def unpack(ctx: Component): (String, Iterable[String])":[3,0,0,"attr-def unpack(ctx: Component): (String, Iterable[String])"],"def warning(m: =&gt; String): Unit":[6,0,0,"attr-def warning(m: => String): Unit"],"def width(width: Int): SInt":[91,0,0,"attr-def width(width: Int): SInt"],"def width(width: Int): UInt":[91,0,0,"attr-def width(width: Int): UInt"],"def width(width: Width): SInt":[91,0,0,"attr-def width(width: Width): SInt"],"def width(width: Width): UInt":[91,0,0,"attr-def width(width: Width): UInt"],"def withSuffix[T&lt;:HasId](suffix: String)(from: T, to: HasId): T =":[99,0,0,"attr-def withSuffix[T<:HasId](suffix: String)(from: T, to: HasId): T ="],"def write(idx: UInt, data: T)(implicit compileOptions: CompileOptions): Unit =":[3,0,0,"attr-def write(idx: UInt, data: T)(implicit compileOptions: CompileOptions): Unit ="],"def write(idx: UInt, data: T, mask: Seq[Bool]) (implicit evidence: T &lt;:&lt; Vec[_], compileOptions: CompileOptions): Unit =":[3,0,0,"attr-def write(idx: UInt, data: T, mask: Seq[Bool]) (implicit evidence: T <:< Vec[_], compileOptions: CompileOptions): Unit ="],"def || (that: Bool): Bool":[3,0,0,"attr-def || (that: Bool): Bool"],"final case class ChiselLegacyAnnotation private[chisel3] (component: InstanceId, transformClass: Class[_ &lt;: Transform], value: String) extends ChiselAnnotation with RunFirrtlTransform":[3,0,0,"attr-final case class ChiselLegacyAnnotation private[chisel3] (component: InstanceId, transformClass: Class[_ <: Transform], value: String) extends ChiselAnnotation with RunFirrtlTransform"],"final class Analog private (private[chisel3] val width: Width) extends Element":[3,0,0,"attr-final class Analog private (private[chisel3] val width: Width) extends Element"],"final class CustomBundle(elts: (String, Data)*) extends Record":[109,0,0,"attr-final class CustomBundle(elts: (String, Data)*) extends Record"],"final class WhenContext(sourceInfo: SourceInfo, cond: Option[() =&gt; Bool], block: =&gt; Unit, firrtlDepth: Int = 0)":[3,0,0,"attr-final class WhenContext(sourceInfo: SourceInfo, cond: Option[() => Bool], block: => Unit, firrtlDepth: Int = 0)"],"final class WhenContext(sourceInfo: SourceInfo, cond: Option[() =&gt; Bool], block: =&gt; Unit, firrtlDepth: Int":[3,0,0,"attr-final class WhenContext(sourceInfo: SourceInfo, cond: Option[() => Bool], block: => Unit, firrtlDepth: Int"],"final def ## (that: Bits): UInt":[3,0,0,"attr-final def ## (that: Bits): UInt"],"final def % (that: T): T":[3,0,0,"attr-final def % (that: T): T"],"final def &amp; (that: Bool): Bool":[3,0,0,"attr-final def & (that: Bool): Bool"],"final def &amp; (that: FixedPoint): FixedPoint":[3,0,0,"attr-final def & (that: FixedPoint): FixedPoint"],"final def &amp; (that: SInt): SInt":[3,0,0,"attr-final def & (that: SInt): SInt"],"final def &amp; (that: UInt): UInt":[3,0,0,"attr-final def & (that: UInt): UInt"],"final def &gt; (that: T): Bool":[3,0,0,"attr-final def > (that: T): Bool"],"final def &gt;&gt; (that: BigInt): Bits":[3,0,0,"attr-final def >> (that: BigInt): Bits"],"final def &gt;&gt; (that: Int): Bits":[3,0,0,"attr-final def >> (that: Int): Bits"],"final def &gt;&gt; (that: UInt): Bits":[3,0,0,"attr-final def >> (that: UInt): Bits"],"final def &gt;= (that: T): Bool":[3,0,0,"attr-final def >= (that: T): Bool"],"final def &lt; (that: T): Bool":[3,0,0,"attr-final def < (that: T): Bool"],"final def &lt;&gt; (that: Data)(implicit sourceInfo: SourceInfo, connectionCompileOptions: CompileOptions): Unit":[3,0,0,"attr-final def <> (that: Data)(implicit sourceInfo: SourceInfo, connectionCompileOptions: CompileOptions): Unit"],"final def &lt;&lt; (that: BigInt): Bits":[3,0,0,"attr-final def << (that: BigInt): Bits"],"final def &lt;&lt; (that: Int): Bits":[3,0,0,"attr-final def << (that: Int): Bits"],"final def &lt;&lt; (that: UInt): Bits":[3,0,0,"attr-final def << (that: UInt): Bits"],"final def &lt;= (that: T): Bool":[3,0,0,"attr-final def <= (that: T): Bool"],"final def * (that: SInt): FixedPoint":[3,0,0,"attr-final def * (that: SInt): FixedPoint"],"final def * (that: SInt): SInt":[3,0,0,"attr-final def * (that: SInt): SInt"],"final def * (that: T): T":[3,0,0,"attr-final def * (that: T): T"],"final def * (that: UInt): FixedPoint":[3,0,0,"attr-final def * (that: UInt): FixedPoint"],"final def * (that: UInt): SInt":[3,0,0,"attr-final def * (that: UInt): SInt"],"final def + (that: T): T":[3,0,0,"attr-final def + (that: T): T"],"final def +% (that: FixedPoint): FixedPoint":[3,0,0,"attr-final def +% (that: FixedPoint): FixedPoint"],"final def +% (that: SInt): SInt":[3,0,0,"attr-final def +% (that: SInt): SInt"],"final def +% (that: UInt): UInt":[3,0,0,"attr-final def +% (that: UInt): UInt"],"final def +&amp; (that: FixedPoint): FixedPoint":[3,0,0,"attr-final def +& (that: FixedPoint): FixedPoint"],"final def +&amp; (that: SInt): SInt":[3,0,0,"attr-final def +& (that: SInt): SInt"],"final def +&amp; (that: UInt): UInt":[3,0,0,"attr-final def +& (that: UInt): UInt"],"final def +(that: Printable): Printables":[3,0,0,"attr-final def +(that: Printable): Printables"],"final def +(that: String): Printables":[3,0,0,"attr-final def +(that: String): Printables"],"final def - (that: T): T":[3,0,0,"attr-final def - (that: T): T"],"final def -% (that: FixedPoint): FixedPoint":[3,0,0,"attr-final def -% (that: FixedPoint): FixedPoint"],"final def -% (that: SInt): SInt":[3,0,0,"attr-final def -% (that: SInt): SInt"],"final def -% (that: UInt): UInt":[3,0,0,"attr-final def -% (that: UInt): UInt"],"final def -&amp; (that: FixedPoint): FixedPoint":[3,0,0,"attr-final def -& (that: FixedPoint): FixedPoint"],"final def -&amp; (that: SInt): SInt":[3,0,0,"attr-final def -& (that: SInt): SInt"],"final def -&amp; (that: UInt): UInt":[3,0,0,"attr-final def -& (that: UInt): UInt"],"final def / (that: T): T":[3,0,0,"attr-final def / (that: T): T"],"final def := (that: Data)(implicit sourceInfo: SourceInfo, connectionCompileOptions: CompileOptions): Unit":[3,0,0,"attr-final def := (that: Data)(implicit sourceInfo: SourceInfo, connectionCompileOptions: CompileOptions): Unit"],"final def =/= (that: FixedPoint): Bool":[3,0,0,"attr-final def =/= (that: FixedPoint): Bool"],"final def =/= (that: SInt): Bool":[3,0,0,"attr-final def =/= (that: SInt): Bool"],"final def =/= (that: UInt): Bool":[3,0,0,"attr-final def =/= (that: UInt): Bool"],"final def === (that: FixedPoint): Bool":[3,0,0,"attr-final def === (that: FixedPoint): Bool"],"final def === (that: SInt): Bool":[3,0,0,"attr-final def === (that: SInt): Bool"],"final def === (that: UInt): Bool":[3,0,0,"attr-final def === (that: UInt): Bool"],"final def ^ (that: Bool): Bool":[3,0,0,"attr-final def ^ (that: Bool): Bool"],"final def ^ (that: FixedPoint): FixedPoint":[3,0,0,"attr-final def ^ (that: FixedPoint): FixedPoint"],"final def ^ (that: SInt): SInt":[3,0,0,"attr-final def ^ (that: SInt): SInt"],"final def ^ (that: UInt): UInt":[3,0,0,"attr-final def ^ (that: UInt): UInt"],"final def abs(): T":[3,0,0,"attr-final def abs(): T"],"final def andR(): Bool":[3,0,0,"attr-final def andR(): Bool"],"final def apply(x: BigInt): Bool":[3,0,0,"attr-final def apply(x: BigInt): Bool"],"final def apply(x: BigInt, y: BigInt): UInt":[3,0,0,"attr-final def apply(x: BigInt, y: BigInt): UInt"],"final def apply(x: Int): Bool":[3,0,0,"attr-final def apply(x: Int): Bool"],"final def apply(x: Int, y: Int): UInt":[3,0,0,"attr-final def apply(x: Int, y: Int): UInt"],"final def apply(x: UInt): Bool":[3,0,0,"attr-final def apply(x: UInt): Bool"],"final def asBits(implicit compileOptions: CompileOptions): Bits =":[3,0,0,"attr-final def asBits(implicit compileOptions: CompileOptions): Bits ="],"final def asBool(): Bool":[3,0,0,"attr-final def asBool(): Bool"],"final def asBools(): Seq[Bool]":[3,0,0,"attr-final def asBools(): Seq[Bool]"],"final def asFixedPoint(that: BinaryPoint): FixedPoint":[3,0,0,"attr-final def asFixedPoint(that: BinaryPoint): FixedPoint"],"final def asSInt(): SInt":[3,0,0,"attr-final def asSInt(): SInt"],"final def asUInt(): UInt":[3,0,0,"attr-final def asUInt(): UInt"],"final def bitSet(off: UInt, dat: Bool): UInt":[3,0,0,"attr-final def bitSet(off: UInt, dat: Bool): UInt"],"final def do_apply(x: BigInt)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): Bool =":[3,0,0,"attr-final def do_apply(x: BigInt)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): Bool ="],"final def do_apply(x: BigInt, y: BigInt)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): UInt":[3,0,0,"attr-final def do_apply(x: BigInt, y: BigInt)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): UInt"],"final def do_apply(x: Int)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): Bool":[3,0,0,"attr-final def do_apply(x: Int)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): Bool"],"final def do_apply(x: Int, y: Int)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): UInt =":[3,0,0,"attr-final def do_apply(x: Int, y: Int)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): UInt ="],"final def do_apply(x: UInt)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): Bool =":[3,0,0,"attr-final def do_apply(x: UInt)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): Bool ="],"final def getWidth: Int":[3,0,0,"attr-final def getWidth: Int"],"final def head(n: Int): UInt":[3,0,0,"attr-final def head(n: Int): UInt"],"final def isWidthKnown: Boolean":[3,0,0,"attr-final def isWidthKnown: Boolean"],"final def max(that: T): T":[3,0,0,"attr-final def max(that: T): T"],"final def min(that: T): T":[3,0,0,"attr-final def min(that: T): T"],"final def nextState(s: Seq[Bool]): Seq[Bool]":[98,0,0,"attr-final def nextState(s: Seq[Bool]): Seq[Bool]"],"final def orR(): Bool":[3,0,0,"attr-final def orR(): Bool"],"final def tail(n: Int): UInt":[3,0,0,"attr-final def tail(n: Int): UInt"],"final def toBool(): Bool":[3,0,0,"attr-final def toBool(): Bool"],"final def toBools(): Seq[Bool]":[3,0,0,"attr-final def toBools(): Seq[Bool]"],"final def toNamed: ComponentName":[6,0,0,"attr-final def toNamed: ComponentName"],"final def toNamed: ModuleName":[3,0,0,"attr-final def toNamed: ModuleName"],"final def toPrintable: Printable":[3,0,0,"attr-final def toPrintable: Printable"],"final def unary_! () : Bool":[3,0,0,"attr-final def unary_! () : Bool"],"final def unary_- (): FixedPoint":[3,0,0,"attr-final def unary_- (): FixedPoint"],"final def unary_- (): SInt":[3,0,0,"attr-final def unary_- (): SInt"],"final def unary_- (): UInt":[3,0,0,"attr-final def unary_- (): UInt"],"final def unary_-% (): FixedPoint":[3,0,0,"attr-final def unary_-% (): FixedPoint"],"final def unary_-% (): SInt":[3,0,0,"attr-final def unary_-% (): SInt"],"final def unary_-% (): UInt":[3,0,0,"attr-final def unary_-% (): UInt"],"final def unary_~ (): Bits":[3,0,0,"attr-final def unary_~ (): Bits"],"final def widthOption: Option[Int]":[3,0,0,"attr-final def widthOption: Option[Int]"],"final def xorR(): Bool":[3,0,0,"attr-final def xorR(): Bool"],"final def zext(): SInt":[3,0,0,"attr-final def zext(): SInt"],"final def | (that: Bool): Bool":[3,0,0,"attr-final def | (that: Bool): Bool"],"final def | (that: FixedPoint): FixedPoint":[3,0,0,"attr-final def | (that: FixedPoint): FixedPoint"],"final def | (that: SInt): SInt":[3,0,0,"attr-final def | (that: SInt): SInt"],"final def | (that: UInt): UInt":[3,0,0,"attr-final def | (that: UInt): UInt"],"implicit class PrintableHelper(val sc: StringContext) extends AnyVal":[91,0,0,"attr-implicit class PrintableHelper(val sc: StringContext) extends AnyVal"],"implicit class fromBigIntToLiteral(bigint: BigInt)":[3,0,0,"attr-implicit class fromBigIntToLiteral(bigint: BigInt)"],"object ActualDirection":[3,0,0,"attr-object ActualDirection"],"object Agg1 extends HasMakeLit[Agg1]":[109,0,0,"attr-object Agg1 extends HasMakeLit[Agg1]"],"object Agg2 extends HasMakeLit[Agg2]":[109,0,0,"attr-object Agg2 extends HasMakeLit[Agg2]"],"object Analog":[3,0,0,"attr-object Analog"],"object BaseModule":[3,0,0,"attr-object BaseModule"],"object BiConnect":[3,0,0,"attr-object BiConnect"],"object BinaryPoint":[5,0,0,"attr-object BinaryPoint"],"object Binding":[3,0,0,"attr-object Binding"],"object BindingDirection":[3,0,0,"attr-object BindingDirection"],"object BitPat":[99,0,0,"attr-object BitPat"],"object Bits extends UIntFactory":[3,0,0,"attr-object Bits extends UIntFactory"],"object Bool extends BoolFactory  package experimental":[2,0,0,"attr-object Bool extends BoolFactory  package experimental"],"object Bool extends BoolFactory":[3,0,0,"attr-object Bool extends BoolFactory"],"object BoringUtils":[97,0,0,"attr-object BoringUtils"],"object Cat":[99,0,0,"attr-object Cat"],"object Chisel3Components":[109,0,0,"attr-object Chisel3Components"],"object ChiselAnnotation":[3,0,0,"attr-object ChiselAnnotation"],"object ChiselGeneratorAnnotation extends HasShellOptions":[95,0,0,"attr-object ChiselGeneratorAnnotation extends HasShellOptions"],"object ChiselOutputFileAnnotation extends HasShellOptions":[95,0,0,"attr-object ChiselOutputFileAnnotation extends HasShellOptions"],"object Clock":[3,0,0,"attr-object Clock"],"object CompanionObjectWithBundle":[109,0,0,"attr-object CompanionObjectWithBundle"],"object CompatibilityComponents":[109,0,0,"attr-object CompatibilityComponents"],"object CompileOptions":[3,0,0,"attr-object CompileOptions"],"object Counter":[99,0,0,"attr-object Counter"],"object DataMirror":[3,0,0,"attr-object DataMirror"],"object Decoupled":[99,0,0,"attr-object Decoupled"],"object DedupConsts":[109,0,0,"attr-object DedupConsts"],"object DeqIO":[99,0,0,"attr-object DeqIO"],"object Driver extends BackendCompilationUtilities":[91,0,0,"attr-object Driver extends BackendCompilationUtilities"],"object DriverCompatibility":[94,0,0,"attr-object DriverCompatibility"],"object DummyNamer extends NamingContextInterface":[6,0,0,"attr-object DummyNamer extends NamingContextInterface"],"object DynamicNamingStack":[6,0,0,"attr-object DynamicNamingStack"],"object EnqIO":[99,0,0,"attr-object EnqIO"],"object Enum extends Enum":[99,0,0,"attr-object Enum extends Enum"],"object EnumAnnotations":[3,0,0,"attr-object EnumAnnotations"],"object EnumExample extends ChiselEnum":[109,0,0,"attr-object EnumExample extends ChiselEnum"],"object ExplicitCompileOptions":[3,0,0,"attr-object ExplicitCompileOptions"],"object FibonacciLFSR":[98,0,0,"attr-object FibonacciLFSR"],"object Fill":[99,0,0,"attr-object Fill"],"object FillInterleaved":[99,0,0,"attr-object FillInterleaved"],"object FirrtlFormat":[3,0,0,"attr-object FirrtlFormat"],"object FixedPoint":[3,0,0,"attr-object FixedPoint"],"object Flipped":[3,0,0,"attr-object Flipped"],"object GCDMain extends App":[120,0,0,"attr-object GCDMain extends App"],"object GCDRepl extends App":[120,0,0,"attr-object GCDRepl extends App"],"object GaloisLFSR":[98,0,0,"attr-object GaloisLFSR"],"object IO":[3,0,0,"attr-object IO"],"object ImplicitConversions":[99,0,0,"attr-object ImplicitConversions"],"object Input":[3,0,0,"attr-object Input"],"object Irrevocable":[99,0,0,"attr-object Irrevocable"],"object LFSR":[98,0,0,"attr-object LFSR"],"object LFSR16":[99,0,0,"attr-object LFSR16"],"object ListLookup":[99,0,0,"attr-object ListLookup"],"object Log2":[99,0,0,"attr-object Log2"],"object Lookup":[99,0,0,"attr-object Lookup"],"object Mem":[3,0,0,"attr-object Mem"],"object MemPortDirection":[5,0,0,"attr-object MemPortDirection"],"object MixedVec":[99,0,0,"attr-object MixedVec"],"object MixedVecInit":[99,0,0,"attr-object MixedVecInit"],"object Module extends SourceInfoDoc":[3,0,0,"attr-object Module extends SourceInfoDoc"],"object MonoConnect":[3,0,0,"attr-object MonoConnect"],"object Mux extends SourceInfoDoc":[3,0,0,"attr-object Mux extends SourceInfoDoc"],"object Mux1H":[99,0,0,"attr-object Mux1H"],"object MuxCase":[99,0,0,"attr-object MuxCase"],"object MuxLookup":[99,0,0,"attr-object MuxLookup"],"object NonIncreasingEnum extends ChiselEnum":[109,0,0,"attr-object NonIncreasingEnum extends ChiselEnum"],"object NonLiteralEnumType extends ChiselEnum":[109,0,0,"attr-object NonLiteralEnumType extends ChiselEnum"],"object NonNamedHelper":[109,0,0,"attr-object NonNamedHelper"],"object OHToUInt":[99,0,0,"attr-object OHToUInt"],"object OtherEnum extends ChiselEnum":[109,0,0,"attr-object OtherEnum extends ChiselEnum"],"object Output":[3,0,0,"attr-object Output"],"object PRNG":[98,0,0,"attr-object PRNG"],"object Pipe":[99,0,0,"attr-object Pipe"],"object PopCount":[99,0,0,"attr-object PopCount"],"object PrimOp":[5,0,0,"attr-object PrimOp"],"object Printable":[3,0,0,"attr-object Printable"],"object PriorityEncoder":[99,0,0,"attr-object PriorityEncoder"],"object PriorityEncoderOH":[99,0,0,"attr-object PriorityEncoderOH"],"object PriorityMux":[99,0,0,"attr-object PriorityMux"],"object Queue":[99,0,0,"attr-object Queue"],"object ReadyValidIO":[99,0,0,"attr-object ReadyValidIO"],"object Reg":[3,0,0,"attr-object Reg"],"object RegEnable":[99,0,0,"attr-object RegEnable"],"object RegInit":[3,0,0,"attr-object RegInit"],"object RegNext":[3,0,0,"attr-object RegNext"],"object Reverse":[99,0,0,"attr-object Reverse"],"object SInt extends SIntFactory  sealed trait Reset extends Element with ToBoolable":[3,0,0,"attr-object SInt extends SIntFactory  sealed trait Reset extends Element with ToBoolable"],"object ShiftRegister":[99,0,0,"attr-object ShiftRegister"],"object SimpleBundle":[109,0,0,"attr-object SimpleBundle"],"object SourceInfo":[6,0,0,"attr-object SourceInfo"],"object SourceInfoMacro":[6,0,0,"attr-object SourceInfoMacro"],"object SpecifiedDirection":[3,0,0,"attr-object SpecifiedDirection"],"object StrongEnumFSM":[109,0,0,"attr-object StrongEnumFSM"],"object SyncReadMem":[3,0,0,"attr-object SyncReadMem"],"object TesterDriver extends BackendCompilationUtilities":[96,0,0,"attr-object TesterDriver extends BackendCompilationUtilities"],"object TransitName":[99,0,0,"attr-object TransitName"],"object UInt extends UIntFactory object Bits extends UIntFactory":[3,0,0,"attr-object UInt extends UIntFactory object Bits extends UIntFactory"],"object UIntToOH":[99,0,0,"attr-object UIntToOH"],"object Valid":[99,0,0,"attr-object Valid"],"object Vec extends VecFactory":[3,0,0,"attr-object Vec extends VecFactory"],"object VecInit extends SourceInfoDoc":[3,0,0,"attr-object VecInit extends SourceInfoDoc"],"object VendingMachineUtils":[116,0,0,"attr-object VendingMachineUtils"],"object Width":[5,0,0,"attr-object Width"],"object Wire extends WireFactory":[3,0,0,"attr-object Wire extends WireFactory"],"object WireDefault":[3,0,0,"attr-object WireDefault"],"object XNOR extends LFSRReduce":[98,0,0,"attr-object XNOR extends LFSRReduce"],"object XOR extends LFSRReduce":[98,0,0,"attr-object XOR extends LFSRReduce"],"object annotate":[3,0,0,"attr-object annotate"],"object assert":[3,0,0,"attr-object assert"],"object attach":[3,0,0,"attr-object attach"],"object chiselTypeOf":[3,0,0,"attr-object chiselTypeOf"],"object debug":[3,0,0,"attr-object debug"],"object doNotDedup":[3,0,0,"attr-object doNotDedup"],"object dontTouch":[3,0,0,"attr-object dontTouch"],"object experimental":[91,0,0,"attr-object experimental"],"object identify":[109,0,0,"attr-object identify"],"object is":[99,0,0,"attr-object is"],"object isPow2":[99,0,0,"attr-object isPow2"],"object loadMemoryFromFile":[97,0,0,"attr-object loadMemoryFromFile"],"object log2Ceil":[99,0,0,"attr-object log2Ceil"],"object log2Down":[99,0,0,"attr-object log2Down"],"object log2Floor":[99,0,0,"attr-object log2Floor"],"object log2Up":[99,0,0,"attr-object log2Up"],"object printf":[3,0,0,"attr-object printf"],"object requireIsChiselType":[6,0,0,"attr-object requireIsChiselType"],"object requireIsHardware":[6,0,0,"attr-object requireIsHardware"],"object signedBitLength":[99,0,0,"attr-object signedBitLength"],"object stop":[3,0,0,"attr-object stop"],"object switch":[99,0,0,"attr-object switch"],"object unless":[99,0,0,"attr-object unless"],"object unsignedBitLength":[99,0,0,"attr-object unsignedBitLength"],"object when":[3,0,0,"attr-object when"],"object withClock":[3,0,0,"attr-object withClock"],"object withClockAndReset":[3,0,0,"attr-object withClockAndReset"],"object withReset":[3,0,0,"attr-object withReset"],"override def apply(p: UInt): T":[3,0,0,"attr-override def apply(p: UInt): T"],"override def do_+ (that: FixedPoint)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): FixedPoint":[3,0,0,"attr-override def do_+ (that: FixedPoint)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): FixedPoint"],"override def do_+ (that: SInt)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): SInt":[3,0,0,"attr-override def do_+ (that: SInt)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): SInt"],"override def do_- (that: FixedPoint)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): FixedPoint":[3,0,0,"attr-override def do_- (that: FixedPoint)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): FixedPoint"],"override def do_- (that: SInt)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): SInt":[3,0,0,"attr-override def do_- (that: SInt)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): SInt"],"override def do_unary_~ (implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): Bool":[3,0,0,"attr-override def do_unary_~ (implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): Bool"],"override def finish(): Unit =":[109,0,0,"attr-override def finish(): Unit ="],"override def instanceName: String":[3,0,0,"attr-override def instanceName: String"],"override def toPrintable: Printable":[3,0,0,"attr-override def toPrintable: Printable"],"override def toString: String =":[3,0,0,"attr-override def toString: String ="],"package object Chisel":[91,0,0,"attr-package object Chisel"],"package object chisel3":[91,0,0,"attr-package object chisel3"],"package object core":[3,0,0,"attr-package object core"],"package object experimental":[4,0,0,"attr-package object experimental"],"package object stage":[95,0,0,"attr-package object stage"],"package object testers":[96,0,0,"attr-package object testers"],"package object util":[99,0,0,"attr-package object util"],"private [random] def badWidth(width: Int): Nothing":[98,0,0,"attr-private [random] def badWidth(width: Int): Nothing"],"private abstract class LogEntry(msg: =&gt; String, line: Option[StackTraceElement])":[6,0,0,"attr-private abstract class LogEntry(msg: => String, line: Option[StackTraceElement])"],"private case object PrivateObject extends PrivateType":[3,0,0,"attr-private case object PrivateObject extends PrivateType"],"private class Emitter(circuit: Circuit)":[92,0,0,"attr-private class Emitter(circuit: Circuit)"],"private class Error(msg: =&gt; String, line: Option[StackTraceElement]) extends LogEntry(msg, line)":[6,0,0,"attr-private class Error(msg: => String, line: Option[StackTraceElement]) extends LogEntry(msg, line)"],"private class Info(msg: =&gt; String, line: Option[StackTraceElement]) extends LogEntry(msg, line)":[6,0,0,"attr-private class Info(msg: => String, line: Option[StackTraceElement]) extends LogEntry(msg, line)"],"private class Warning(msg: =&gt; String, line: Option[StackTraceElement]) extends LogEntry(msg, line)":[6,0,0,"attr-private class Warning(msg: => String, line: Option[StackTraceElement]) extends LogEntry(msg, line)"],"private def emit(m: Component): String =":[92,0,0,"attr-private def emit(m: Component): String ="],"private def getUserLineNumber =":[6,0,0,"attr-private def getUserLineNumber ="],"private def indexWhereHelper(p: T =&gt; Bool)":[3,0,0,"attr-private def indexWhereHelper(p: T => Bool)"],"private def moduleDecl(m: Component): String":[92,0,0,"attr-private def moduleDecl(m: Component): String"],"private def moduleDefn(m: Component): String =":[92,0,0,"attr-private def moduleDefn(m: Component): String ="],"private def parse(x: String): (BigInt, BigInt, Int) =":[99,0,0,"attr-private def parse(x: String): (BigInt, BigInt, Int) ="],"private def processWhens(cmds: Seq[Command]): Seq[Command] =":[92,0,0,"attr-private def processWhens(cmds: Seq[Command]): Seq[Command] ="],"private def tapsFirst":[98,0,0,"attr-private def tapsFirst"],"private def tapsSecond":[98,0,0,"attr-private def tapsSecond"],"private object ArbiterCtrl":[99,0,0,"attr-private object ArbiterCtrl"],"private object UnsafeEnum extends EnumFactory":[3,0,0,"attr-private object UnsafeEnum extends EnumFactory"],"private[chisel3] class AddImplicitOutputAnnotationFile extends Phase":[94,0,0,"attr-private[chisel3] class AddImplicitOutputAnnotationFile extends Phase"],"private[chisel3] class AddImplicitOutputFile extends Phase":[94,0,0,"attr-private[chisel3] class AddImplicitOutputFile extends Phase"],"private[chisel3] class ChiselContext()":[6,0,0,"attr-private[chisel3] class ChiselContext()"],"private[chisel3] class DisableFirrtlStage extends Phase":[94,0,0,"attr-private[chisel3] class DisableFirrtlStage extends Phase"],"private[chisel3] class DynamicContext()":[6,0,0,"attr-private[chisel3] class DynamicContext()"],"private[chisel3] class ErrorLog":[6,0,0,"attr-private[chisel3] class ErrorLog"],"private[chisel3] class IdGen":[6,0,0,"attr-private[chisel3] class IdGen"],"private[chisel3] class MutateOptionsManager(optionsManager: ExecutionOptionsManager with HasChiselExecutionOptions with HasFirrtlOptions) extends Phase":[94,0,0,"attr-private[chisel3] class MutateOptionsManager(optionsManager: ExecutionOptionsManager with HasChiselExecutionOptions with HasFirrtlOptions) extends Phase"],"private[chisel3] class Namespace(keywords: Set[String])":[6,0,0,"attr-private[chisel3] class Namespace(keywords: Set[String])"],"private[chisel3] class UnsafeEnum(override val width: Width) extends EnumType(UnsafeEnum, selfAnnotating":[3,0,0,"attr-private[chisel3] class UnsafeEnum(override val width: Width) extends EnumType(UnsafeEnum, selfAnnotating"],"private[chisel3] def _assignCompatibilityExplicitDirection: Unit =":[2,0,0,"attr-private[chisel3] def _assignCompatibilityExplicitDirection: Unit ="],"private[chisel3] def bindIoInPlace(iodef: Data): Unit":[2,0,0,"attr-private[chisel3] def bindIoInPlace(iodef: Data): Unit"],"private[chisel3] def connectFromBits(that: Bits)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): Unit":[2,0,0,"attr-private[chisel3] def connectFromBits(that: Bits)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): Unit"],"private[chisel3] def format(formatIn: String): String =":[3,0,0,"attr-private[chisel3] def format(formatIn: String): String ="],"private[chisel3] def generateComponent(): Component":[2,0,0,"attr-private[chisel3] def generateComponent(): Component"],"private[chisel3] def getChiselPorts: Seq[(String, Data)] =":[2,0,0,"attr-private[chisel3] def getChiselPorts: Seq[(String, Data)] ="],"private[chisel3] def initializeInParent(parentCompileOptions: CompileOptions): Unit":[2,0,0,"attr-private[chisel3] def initializeInParent(parentCompileOptions: CompileOptions): Unit"],"private[chisel3] def isClosed":[2,0,0,"attr-private[chisel3] def isClosed"],"private[chisel3] def truncateIndex(idx: UInt, n: BigInt)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): UInt =":[2,0,0,"attr-private[chisel3] def truncateIndex(idx: UInt, n: BigInt)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): UInt ="],"private[chisel3] def typeEquivalent(that: Data): Boolean":[2,0,0,"attr-private[chisel3] def typeEquivalent(that: Data): Boolean"],"private[chisel3] final case class ClockAndReset(clock: Clock, reset: Reset)  object withClockAndReset":[3,0,0,"attr-private[chisel3] final case class ClockAndReset(clock: Clock, reset: Reset)  object withClockAndReset"],"private[chisel3] object BiConnect":[6,0,0,"attr-private[chisel3] object BiConnect"],"private[chisel3] object BindingDirection":[6,0,0,"attr-private[chisel3] object BindingDirection"],"private[chisel3] object Builder":[6,0,0,"attr-private[chisel3] object Builder"],"private[chisel3] object ChiselLegacyAnnotation  object annotate":[3,0,0,"attr-private[chisel3] object ChiselLegacyAnnotation  object annotate"],"private[chisel3] object Converter":[92,0,0,"attr-private[chisel3] object Converter"],"private[chisel3] object DontCare extends Element":[3,0,0,"attr-private[chisel3] object DontCare extends Element"],"private[chisel3] object Emitter":[92,0,0,"attr-private[chisel3] object Emitter"],"private[chisel3] object EnumMacros":[2,0,0,"attr-private[chisel3] object EnumMacros"],"private[chisel3] object ErrorLog":[6,0,0,"attr-private[chisel3] object ErrorLog"],"private[chisel3] object InternalDontCare extends Element":[2,0,0,"attr-private[chisel3] object InternalDontCare extends Element"],"private[chisel3] object MonoConnect":[6,0,0,"attr-private[chisel3] object MonoConnect"],"private[chisel3] object Namespace":[6,0,0,"attr-private[chisel3] object Namespace"],"private[chisel3] object SeqUtils":[3,0,0,"attr-private[chisel3] object SeqUtils"],"private[chisel3] object castToInt":[6,0,0,"attr-private[chisel3] object castToInt"],"private[chisel3] object cloneSupertype":[2,0,0,"attr-private[chisel3] object cloneSupertype"],"private[chisel3] object throwException":[6,0,0,"attr-private[chisel3] object throwException"],"private[chisel3] sealed abstract class BindingDirection private[chisel3] object BindingDirection":[6,0,0,"attr-private[chisel3] sealed abstract class BindingDirection private[chisel3] object BindingDirection"],"private[chisel3] sealed trait ToBoolable extends Element":[3,0,0,"attr-private[chisel3] sealed trait ToBoolable extends Element"],"private[chisel3] trait HasId extends InstanceId":[6,0,0,"attr-private[chisel3] trait HasId extends InstanceId"],"private[chisel3] trait NamedComponent extends HasId":[6,0,0,"attr-private[chisel3] trait NamedComponent extends HasId"],"private[core] def _assignCompatibilityExplicitDirection: Unit =":[3,0,0,"attr-private[core] def _assignCompatibilityExplicitDirection: Unit ="],"private[core] def bindIoInPlace(iodef: Data): Unit":[3,0,0,"attr-private[core] def bindIoInPlace(iodef: Data): Unit"],"private[core] def connectFromBits(that: Bits)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): Unit":[3,0,0,"attr-private[core] def connectFromBits(that: Bits)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): Unit"],"private[core] def generateComponent(): Component":[3,0,0,"attr-private[core] def generateComponent(): Component"],"private[core] def getChiselPorts: Seq[(String, Data)] =":[3,0,0,"attr-private[core] def getChiselPorts: Seq[(String, Data)] ="],"private[core] def initializeInParent(parentCompileOptions: CompileOptions): Unit":[3,0,0,"attr-private[core] def initializeInParent(parentCompileOptions: CompileOptions): Unit"],"private[core] def isClosed":[3,0,0,"attr-private[core] def isClosed"],"private[core] def truncateIndex(idx: UInt, n: BigInt)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): UInt =":[3,0,0,"attr-private[core] def truncateIndex(idx: UInt, n: BigInt)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): UInt ="],"private[core] def typeEquivalent(that: Data): Boolean":[3,0,0,"attr-private[core] def typeEquivalent(that: Data): Boolean"],"private[core] object EnumMacros":[3,0,0,"attr-private[core] object EnumMacros"],"private[core] object cloneSupertype":[3,0,0,"attr-private[core] object cloneSupertype"],"protected def IO[T&lt;:Data](iodef: T): T":[3,0,0,"attr-protected def IO[T<:Data](iodef: T): T"],"protected def _bindIoInPlace(iodef: Data): Unit =":[3,0,0,"attr-protected def _bindIoInPlace(iodef: Data): Unit ="],"protected def createValues(n: Int): Seq[UInt]":[99,0,0,"attr-protected def createValues(n: Int): Seq[UInt]"],"protected def nameIds(rootClass: Class[_]): HashMap[HasId, String] =":[3,0,0,"attr-protected def nameIds(rootClass: Class[_]): HashMap[HasId, String] ="],"protected[chisel3] def Lit(value: BigInt, width: Width): SInt =":[3,0,0,"attr-protected[chisel3] def Lit(value: BigInt, width: Width): SInt ="],"protected[chisel3] def Lit(value: BigInt, width: Width): UInt =":[3,0,0,"attr-protected[chisel3] def Lit(value: BigInt, width: Width): UInt ="],"protected[chisel3] def Lit(x: Boolean): Bool =":[3,0,0,"attr-protected[chisel3] def Lit(x: Boolean): Bool ="],"sealed abstract class ActualDirection  object ActualDirection":[3,0,0,"attr-sealed abstract class ActualDirection  object ActualDirection"],"sealed abstract class ActualDirection":[3,0,0,"attr-sealed abstract class ActualDirection"],"sealed abstract class Aggregate extends Data":[3,0,0,"attr-sealed abstract class Aggregate extends Data"],"sealed abstract class BinaryPoint":[5,0,0,"attr-sealed abstract class BinaryPoint"],"sealed abstract class BindingDirection object BindingDirection":[3,0,0,"attr-sealed abstract class BindingDirection object BindingDirection"],"sealed abstract class Bits(private[chisel3] val width: Width) extends Element with ToBoolable":[3,0,0,"attr-sealed abstract class Bits(private[chisel3] val width: Width) extends Element with ToBoolable"],"sealed abstract class FirrtlFormat(private[chisel3] val specifier: Char) extends Printable":[3,0,0,"attr-sealed abstract class FirrtlFormat(private[chisel3] val specifier: Char) extends Printable"],"sealed abstract class MemBase[T &lt;: Data](t: T, val length: BigInt) extends HasId with NamedComponent with SourceInfoDoc":[3,0,0,"attr-sealed abstract class MemBase[T <: Data](t: T, val length: BigInt) extends HasId with NamedComponent with SourceInfoDoc"],"sealed abstract class MemPortDirection(name: String)":[5,0,0,"attr-sealed abstract class MemPortDirection(name: String)"],"sealed abstract class Param case class IntParam(value: BigInt) extends Param case class DoubleParam(value: Double) extends Param":[3,0,0,"attr-sealed abstract class Param case class IntParam(value: BigInt) extends Param case class DoubleParam(value: Double) extends Param"],"sealed abstract class Param case class IntParam(value: BigInt) extends Param":[3,0,0,"attr-sealed abstract class Param case class IntParam(value: BigInt) extends Param"],"sealed abstract class Printable":[3,0,0,"attr-sealed abstract class Printable"],"sealed abstract class SpecifiedDirection object SpecifiedDirection":[3,0,0,"attr-sealed abstract class SpecifiedDirection object SpecifiedDirection"],"sealed abstract class Width":[5,0,0,"attr-sealed abstract class Width"],"sealed case class Closed[T](value: T) extends NumericBound[T]  sealed trait Range":[5,0,0,"attr-sealed case class Closed[T](value: T) extends NumericBound[T]  sealed trait Range"],"sealed case class KnownBinaryPoint(value: Int) extends BinaryPoint":[5,0,0,"attr-sealed case class KnownBinaryPoint(value: Int) extends BinaryPoint"],"sealed case class KnownSIntRange(min: NumericBound[Int], max: NumericBound[Int]) extends KnownIntRange":[5,0,0,"attr-sealed case class KnownSIntRange(min: NumericBound[Int], max: NumericBound[Int]) extends KnownIntRange"],"sealed case class KnownUIntRange(min: NumericBound[Int], max: NumericBound[Int]) extends KnownIntRange":[5,0,0,"attr-sealed case class KnownUIntRange(min: NumericBound[Int], max: NumericBound[Int]) extends KnownIntRange"],"sealed case class KnownWidth(value: Int) extends Width":[5,0,0,"attr-sealed case class KnownWidth(value: Int) extends Width"],"sealed case class Open[T](value: T) extends NumericBound[T] sealed case class Closed[T](value: T) extends NumericBound[T]  sealed trait Range":[5,0,0,"attr-sealed case class Open[T](value: T) extends NumericBound[T] sealed case class Closed[T](value: T) extends NumericBound[T]  sealed trait Range"],"sealed case class UnknownWidth() extends Width":[5,0,0,"attr-sealed case class UnknownWidth() extends Width"],"sealed class BitPat(val value: BigInt, val mask: BigInt, width: Int) extends SourceInfoDoc":[99,0,0,"attr-sealed class BitPat(val value: BigInt, val mask: BigInt, width: Int) extends SourceInfoDoc"],"sealed class Clock(private[chisel3] val width: Width":[3,0,0,"attr-sealed class Clock(private[chisel3] val width: Width"],"sealed class FixedPoint private (width: Width, val binaryPoint: BinaryPoint) extends Bits(width) with Num[FixedPoint]":[3,0,0,"attr-sealed class FixedPoint private (width: Width, val binaryPoint: BinaryPoint) extends Bits(width) with Num[FixedPoint]"],"sealed class FixedPoint private(width: Width, val binaryPoint: BinaryPoint) extends Bits(width) with Num[FixedPoint]":[2,0,0,"attr-sealed class FixedPoint private(width: Width, val binaryPoint: BinaryPoint) extends Bits(width) with Num[FixedPoint]"],"sealed class Mem[T &lt;: Data] private (t: T, length: BigInt) extends MemBase(t, length)  object SyncReadMem":[3,0,0,"attr-sealed class Mem[T <: Data] private (t: T, length: BigInt) extends MemBase(t, length)  object SyncReadMem"],"sealed class Mem[T &lt;: Data] private (t: T, length: BigInt) extends MemBase(t, length)":[3,0,0,"attr-sealed class Mem[T <: Data] private (t: T, length: BigInt) extends MemBase(t, length)"],"sealed class SInt private[chisel3] (width: Width) extends Bits(width) with Num[SInt]":[2,0,0,"attr-sealed class SInt private[chisel3] (width: Width) extends Bits(width) with Num[SInt]"],"sealed class SInt private[core] (width: Width) extends Bits(width) with Num[SInt]":[3,0,0,"attr-sealed class SInt private[core] (width: Width) extends Bits(width) with Num[SInt]"],"sealed class SyncReadMem[T &lt;: Data] private (t: T, n: BigInt) extends MemBase[T](t, n)":[3,0,0,"attr-sealed class SyncReadMem[T <: Data] private (t: T, n: BigInt) extends MemBase[T](t, n)"],"sealed class UInt private[chisel3] (width: Width) extends Bits(width) with Num[UInt]":[2,0,0,"attr-sealed class UInt private[chisel3] (width: Width) extends Bits(width) with Num[UInt]"],"sealed class UInt private[core] (width: Width) extends Bits(width) with Num[UInt]":[3,0,0,"attr-sealed class UInt private[core] (width: Width) extends Bits(width) with Num[UInt]"],"sealed class Vec[T &lt;: Data] private[chisel3] (gen: =&gt; T, val length: Int) extends Aggregate with VecLike[T]":[2,0,0,"attr-sealed class Vec[T <: Data] private[chisel3] (gen: => T, val length: Int) extends Aggregate with VecLike[T]"],"sealed class Vec[T &lt;: Data] private[core] (gen: =&gt; T, val length: Int) extends Aggregate with VecLike[T]":[3,0,0,"attr-sealed class Vec[T <: Data] private[core] (gen: => T, val length: Int) extends Aggregate with VecLike[T]"],"sealed trait Binding":[6,0,0,"attr-sealed trait Binding"],"sealed trait Bound sealed trait NumericBound[T] extends Bound":[5,0,0,"attr-sealed trait Bound sealed trait NumericBound[T] extends Bound"],"sealed trait ChiselOption extends Unserializable":[95,0,0,"attr-sealed trait ChiselOption extends Unserializable"],"sealed trait ConstrainedBinding extends TopBinding":[6,0,0,"attr-sealed trait ConstrainedBinding extends TopBinding"],"sealed trait KnownIntRange extends Range":[5,0,0,"attr-sealed trait KnownIntRange extends Range"],"sealed trait LFSRReduce extends ((Bool, Bool) =&gt; Bool)":[98,0,0,"attr-sealed trait LFSRReduce extends ((Bool, Bool) => Bool)"],"sealed trait LitBinding extends UnconstrainedBinding with ReadOnlyBinding":[6,0,0,"attr-sealed trait LitBinding extends UnconstrainedBinding with ReadOnlyBinding"],"sealed trait NamingContextInterface":[6,0,0,"attr-sealed trait NamingContextInterface"],"sealed trait NoSourceInfo extends SourceInfo":[6,0,0,"attr-sealed trait NoSourceInfo extends SourceInfo"],"sealed trait NumericBound[T] extends Bound":[5,0,0,"attr-sealed trait NumericBound[T] extends Bound"],"sealed trait PrivateType private case object PrivateObject extends PrivateType":[3,0,0,"attr-sealed trait PrivateType private case object PrivateObject extends PrivateType"],"sealed trait Range":[5,0,0,"attr-sealed trait Range"],"sealed trait ReadOnlyBinding extends TopBinding":[6,0,0,"attr-sealed trait ReadOnlyBinding extends TopBinding"],"sealed trait Reset extends Element with ToBoolable":[3,0,0,"attr-sealed trait Reset extends Element with ToBoolable"],"sealed trait SourceInfo":[6,0,0,"attr-sealed trait SourceInfo"],"sealed trait TopBinding extends Binding":[6,0,0,"attr-sealed trait TopBinding extends Binding"],"sealed trait UnconstrainedBinding extends TopBinding":[6,0,0,"attr-sealed trait UnconstrainedBinding extends TopBinding"],"trait AbstractPassthroughModule extends RawModule":[109,0,0,"attr-trait AbstractPassthroughModule extends RawModule"],"trait AnalogReader":[109,0,0,"attr-trait AnalogReader"],"trait BackendCompilationUtilities extends FirrtlBackendCompilationUtilities":[91,0,0,"attr-trait BackendCompilationUtilities extends FirrtlBackendCompilationUtilities"],"trait BoolFactory":[3,0,0,"attr-trait BoolFactory"],"trait BundleSpecUtils":[109,0,0,"attr-trait BundleSpecUtils"],"trait ChiselAnnotation":[3,0,0,"attr-trait ChiselAnnotation"],"trait ChiselCli":[95,0,0,"attr-trait ChiselCli"],"trait ChiselExecutionResult":[91,0,0,"attr-trait ChiselExecutionResult"],"trait ChiselRunners extends Assertions with BackendCompilationUtilities":[109,0,0,"attr-trait ChiselRunners extends Assertions with BackendCompilationUtilities"],"trait CompileOptions":[3,0,0,"attr-trait CompileOptions"],"trait Enum":[99,0,0,"attr-trait Enum"],"trait FlattenInstance":[97,0,0,"attr-trait FlattenInstance"],"trait HasBlackBoxInline extends BlackBox":[99,0,0,"attr-trait HasBlackBoxInline extends BlackBox"],"trait HasBlackBoxPath extends BlackBox":[99,0,0,"attr-trait HasBlackBoxPath extends BlackBox"],"trait HasBlackBoxResource extends BlackBox":[99,0,0,"attr-trait HasBlackBoxResource extends BlackBox"],"trait HasChiselExecutionOptions":[91,0,0,"attr-trait HasChiselExecutionOptions"],"trait HasMakeLit[T]":[109,0,0,"attr-trait HasMakeLit[T]"],"trait IgnoreSeqInBundle":[3,0,0,"attr-trait IgnoreSeqInBundle"],"trait InlineInstance":[97,0,0,"attr-trait InlineInstance"],"trait InstanceId":[6,0,0,"attr-trait InstanceId"],"trait LFSR extends PRNG":[98,0,0,"attr-trait LFSR extends PRNG"],"trait LiteralOutputTrait extends MultiIOModule":[109,0,0,"attr-trait LiteralOutputTrait extends MultiIOModule"],"trait MultiIOTrait extends MultiIOModule":[109,0,0,"attr-trait MultiIOTrait extends MultiIOModule"],"trait NamedModuleTester extends MultiIOModule":[109,0,0,"attr-trait NamedModuleTester extends MultiIOModule"],"trait RecordSpecUtils":[109,0,0,"attr-trait RecordSpecUtils"],"trait RunFirrtlTransform extends ChiselAnnotation":[3,0,0,"attr-trait RunFirrtlTransform extends ChiselAnnotation"],"trait SIntFactory":[3,0,0,"attr-trait SIntFactory"],"trait UIntFactory":[3,0,0,"attr-trait UIntFactory"],"trait VecFactory extends SourceInfoDoc":[3,0,0,"attr-trait VecFactory extends SourceInfoDoc"],"trait WireFactory":[3,0,0,"attr-trait WireFactory"]},"abstract class BlackBox(val params: Map[String, Param] = Map":{"empty[String, Param])(implicit compileOptions: CompileOptions) extends BaseBlackBox":[3,0,0,"attr-abstract class BlackBox(val params: Map[String, Param] = Map.empty[String, Param])(implicit compileOptions: CompileOptions) extends BaseBlackBox"]},"abstract class ExtModule(val params: Map[String, Param] = Map":{"empty[String, Param]) extends BaseBlackBox":[3,0,0,"attr-abstract class ExtModule(val params: Map[String, Param] = Map.empty[String, Param]) extends BaseBlackBox"]},"case class ChiselLoadMemoryAnnotation[T &lt;: Data](target:      MemBase[T], fileName:    String, hexOrBinary: MemoryLoadFileType":{FileType:[97,0,0,"attr-case class ChiselLoadMemoryAnnotation[T <: Data](target:      MemBase[T], fileName:    String, hexOrBinary: MemoryLoadFileType.FileType"]},"case class ChiselLoadMemoryAnnotation[T &lt;: Data](target:      MemBase[T], fileName:    String, hexOrBinary: MemoryLoadFileType.FileType = MemoryLoadFileType":{"Hex ) extends ChiselAnnotation with RunFirrtlTransform":[97,0,0,"attr-case class ChiselLoadMemoryAnnotation[T <: Data](target:      MemBase[T], fileName:    String, hexOrBinary: MemoryLoadFileType.FileType = MemoryLoadFileType.Hex ) extends ChiselAnnotation with RunFirrtlTransform"]},"class MaxPeriodFibonacciLFSR(width: Int, seed: Option[BigInt] = Some(1), reduction: LFSRReduce = XOR) extends FibonacciLFSR(width, LFSR.tapsMaxPeriod.getOrElse(width, LFSR.badWidth(width))":{"head, seed, reduction)":[98,0,0,"attr-class MaxPeriodFibonacciLFSR(width: Int, seed: Option[BigInt] = Some(1), reduction: LFSRReduce = XOR) extends FibonacciLFSR(width, LFSR.tapsMaxPeriod.getOrElse(width, LFSR.badWidth(width)).head, seed, reduction)"]},"class MaxPeriodGaloisLFSR(width: Int, seed: Option[BigInt] = Some(1), reduction: LFSRReduce = XOR) extends GaloisLFSR(width, LFSR.tapsMaxPeriod.getOrElse(width, LFSR.badWidth(width))":{"head, seed, reduction)":[98,0,0,"attr-class MaxPeriodGaloisLFSR(width: Int, seed: Option[BigInt] = Some(1), reduction: LFSRReduce = XOR) extends GaloisLFSR(width, LFSR.tapsMaxPeriod.getOrElse(width, LFSR.badWidth(width)).head, seed, reduction)"]},"class Queue[T &lt;: Data](gen: T, val entries: Int, pipe: Boolean = false, flow: Boolean = false) (implicit compileOptions: chisel3":{"CompileOptions) extends Module()":[99,0,0,"attr-class Queue[T <: Data](gen: T, val entries: Int, pipe: Boolean = false, flow: Boolean = false) (implicit compileOptions: chisel3.CompileOptions) extends Module()"]},"class Queue[T &lt;: Data](gen: T, val entries: Int, pipe: Boolean = false, flow: Boolean = false) (implicit compileOptions: chisel3.core":{"CompileOptions) extends Module()":[99,0,0,"attr-class Queue[T <: Data](gen: T, val entries: Int, pipe: Boolean = false, flow: Boolean = false) (implicit compileOptions: chisel3.core.CompileOptions) extends Module()"]},"def apply(dir: Option[Direction] = None, width: Int): SInt = apply(width":{"W)":[91,0,0,"attr-def apply(dir: Option[Direction] = None, width: Int): SInt = apply(width.W)"]},"def apply(dir: Option[Direction] = None, width: Int): UInt = apply(width":{"W)":[91,0,0,"attr-def apply(dir: Option[Direction] = None, width: Int): UInt = apply(width.W)"]},"def apply(gen: =&gt; PRNG, increment: Bool = true":{"B): UInt =":[98,0,0,"attr-def apply(gen: => PRNG, increment: Bool = true.B): UInt ="]},"def apply(increment: Bool = true":{"B): UInt =":[99,0,0,"attr-def apply(increment: Bool = true.B): UInt ="]},"def apply(increment: Bool = true.B): UInt = VecInit( FibonacciLFSR .maxPeriod(16, increment, seed = Some(BigInt(1) &lt;&lt; 15)) .asBools .reverse ) ":{asUInt:[99,0,0,"attr-def apply(increment: Bool = true.B): UInt = VecInit( FibonacciLFSR .maxPeriod(16, increment, seed = Some(BigInt(1) << 15)) .asBools .reverse ) .asUInt"]},"def apply(proto: BaseModule)(implicit sourceInfo: chisel3.internal.sourceinfo":{"SourceInfo, compileOptions: CompileOptions): ClonePorts =":[4,0,0,"attr-def apply(proto: BaseModule)(implicit sourceInfo: chisel3.internal.sourceinfo.SourceInfo, compileOptions: CompileOptions): ClonePorts ="]},"def apply(proto: BaseModule)(implicit sourceInfo: chisel3.internal.sourceinfo.SourceInfo, compileOptions: chisel3.core":{"CompileOptions): ClonePorts =":[91,0,0,"attr-def apply(proto: BaseModule)(implicit sourceInfo: chisel3.internal.sourceinfo.SourceInfo, compileOptions: chisel3.core.CompileOptions): ClonePorts ="]},"def apply(width: Int, increment: Bool = true.B, seed: Option[BigInt] = Some(1)): UInt = FibonacciLFSR":{"maxPeriod(width, increment, seed, XOR)":[98,0,0,"attr-def apply(width: Int, increment: Bool = true.B, seed: Option[BigInt] = Some(1)): UInt = FibonacciLFSR.maxPeriod(width, increment, seed, XOR)"]},"def apply(width: Int, taps: Set[Int], increment: Bool = true":{"B, seed: Option[BigInt] = Some(1), reduction: LFSRReduce = XOR): UInt = PRNG(new FibonacciLFSR(width, taps, seed, reduction), increment)":[98,0,0,"attr-def apply(width: Int, taps: Set[Int], increment: Bool = true.B, seed: Option[BigInt] = Some(1), reduction: LFSRReduce = XOR): UInt = PRNG(new FibonacciLFSR(width, taps, seed, reduction), increment)"],"B, seed: Option[BigInt] = Some(1), reduction: LFSRReduce = XOR): UInt = PRNG(new GaloisLFSR(width, taps, seed, reduction), increment)":[98,0,0,"attr-def apply(width: Int, taps: Set[Int], increment: Bool = true.B, seed: Option[BigInt] = Some(1), reduction: LFSRReduce = XOR): UInt = PRNG(new GaloisLFSR(width, taps, seed, reduction), increment)"]},"def apply[T &lt;: Data](in: T, n: Int, en: Bool = true":{"B): T =":[99,0,0,"attr-def apply[T <: Data](in: T, n: Int, en: Bool = true.B): T ="]},"def apply[T &lt;: Data](memory: MemBase[T], fileName: String, hexOrBinary: MemoryLoadFileType.FileType = MemoryLoadFileType":{"Hex ): Unit =":[97,0,0,"attr-def apply[T <: Data](memory: MemBase[T], fileName: String, hexOrBinary: MemoryLoadFileType.FileType = MemoryLoadFileType.Hex ): Unit ="]},"def apply[T &lt;: Data](t: T, init: DontCare":{"type)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): T =":[3,0,0,"attr-def apply[T <: Data](t: T, init: DontCare.type)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): T ="]},"def cloneType: this":{type:[3,0,0,"attr-def cloneType: this.type"]},"def convert(cmds: Seq[Command], ctx: Component): fir":{"Statement =":[92,0,0,"attr-def convert(cmds: Seq[Command], ctx: Component): fir.Statement ="]},"def convertSimpleCommand(cmd: Command, ctx: Component): Option[fir":{"Statement]":[92,0,0,"attr-def convertSimpleCommand(cmd: Command, ctx: Component): Option[fir.Statement]"]},"def do_pad(that: Int)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): this":{type:[3,0,0,"attr-def do_pad(that: Int)(implicit sourceInfo: SourceInfo, compileOptions: CompileOptions): this.type"]},"def fromBigInt(value: BigInt, binaryPoint: BinaryPoint = 0":{"BP): FixedPoint =":[3,0,0,"attr-def fromBigInt(value: BigInt, binaryPoint: BinaryPoint = 0.BP): FixedPoint ="]},"def maxPeriod(width: Int, increment: Bool = true":{"B, seed: Option[BigInt] = Some(1), reduction: LFSRReduce = XOR): UInt = PRNG(new MaxPeriodFibonacciLFSR(width, seed, reduction), increment)":[98,0,0,"attr-def maxPeriod(width: Int, increment: Bool = true.B, seed: Option[BigInt] = Some(1), reduction: LFSRReduce = XOR): UInt = PRNG(new MaxPeriodFibonacciLFSR(width, seed, reduction), increment)"],"B, seed: Option[BigInt] = Some(1), reduction: LFSRReduce = XOR): UInt = PRNG(new MaxPeriodGaloisLFSR(width, seed, reduction), increment)":[98,0,0,"attr-def maxPeriod(width: Int, increment: Bool = true.B, seed: Option[BigInt] = Some(1), reduction: LFSRReduce = XOR): UInt = PRNG(new MaxPeriodGaloisLFSR(width, seed, reduction), increment)"]},"def toFirrtl(ir: Circuit): firrtl.ir":{Circuit:[91,0,0,"attr-def toFirrtl(ir: Circuit): firrtl.ir.Circuit"]},"final class MixedVec[T &lt;: Data](private val eltsIn: Seq[T]) extends Record with collection":{"IndexedSeq[T]":[99,0,0,"attr-final class MixedVec[T <: Data](private val eltsIn: Seq[T]) extends Record with collection.IndexedSeq[T]"]},"final def pad(that: Int): this":{type:[3,0,0,"attr-final def pad(that: Int): this.type"]},"private case class WhenFrame(when: fir.Conditionally, outer: Queue[fir":{"Statement], alt: Boolean)":[92,0,0,"attr-private case class WhenFrame(when: fir.Conditionally, outer: Queue[fir.Statement], alt: Boolean)"]},"private def getBundleField(m: java.lang.reflect":{"Method): Option[Data]":[3,0,0,"attr-private def getBundleField(m: java.lang.reflect.Method): Option[Data]"]},"private[chisel3] def _makeLit(elems: (this.type =&gt; (Data, Data))*): this":{"type =":[3,0,0,"attr-private[chisel3] def _makeLit(elems: (this.type => (Data, Data))*): this.type ="]},"private[chisel3] def bind(target: Binding, parentDirection: SpecifiedDirection = SpecifiedDirection":{"Unspecified)":[3,0,0,"attr-private[chisel3] def bind(target: Binding, parentDirection: SpecifiedDirection = SpecifiedDirection.Unspecified)"]},"private[chisel3] def cloneTypeFull: this":{"type =":[3,0,0,"attr-private[chisel3] def cloneTypeFull: this.type ="]},"sealed class Bool() extends UInt(1":{"W) with Reset":[3,0,0,"attr-sealed class Bool() extends UInt(1.W) with Reset"]},"trait BoolFactory extends chisel3":{BoolFactory:[91,0,0,"attr-trait BoolFactory extends chisel3.BoolFactory"]},"trait BoolFactory extends chisel3.core":{BoolFactory:[91,0,0,"attr-trait BoolFactory extends chisel3.core.BoolFactory"]},"trait SIntFactory extends chisel3":{SIntFactory:[91,0,0,"attr-trait SIntFactory extends chisel3.SIntFactory"]},"trait SIntFactory extends chisel3.core":{SIntFactory:[91,0,0,"attr-trait SIntFactory extends chisel3.core.SIntFactory"]},"trait UIntFactory extends chisel3":{UIntFactory:[91,0,0,"attr-trait UIntFactory extends chisel3.UIntFactory"]},"trait UIntFactory extends chisel3.core":{UIntFactory:[91,0,0,"attr-trait UIntFactory extends chisel3.core.UIntFactory"]},"trait VecLike[T &lt;: Data] extends collection":{"IndexedSeq[T] with HasId with SourceInfoDoc":[3,0,0,"attr-trait VecLike[T <: Data] extends collection.IndexedSeq[T] with HasId with SourceInfoDoc"]}},objnames:{"0":["chisel","Chisel","Chisel"]},objtypes:{"0":"chisel:Chisel"},terms:{"0b01":2,"0b101":2,"0b111":2,"0x5":2,"64kb":98,"abstract":[2,5,6,98,99,109,115,116],"boolean":[2,5,91,92,95,96,97,98,99,109,113],"case":[2,5,6,91,92,95,97,99,109,111],"catch":6,"char":2,"class":[0,2,5,6,23,86,91,92,94,95,96,97,98,99,100,101,107,109,110,111,112,113,115,116,119,120],"default":[2,6,91,97,98,99,109,119],"enum":[2,88,91,102,103],"final":[2,6,98,99,109],"function":[2,6,91,95,98,99,109],"import":[2,4,91,97,109],"int":[2,4,5,6,91,97,98,99,109,113,115,116,119,120],"long":[6,109],"new":[2,4,6,91,97,98,99,109],"null":91,"public":[2,6],"return":[2,4,6,91,92,95,97,98,99,109,119,120],"static":[2,99],"super":2,"switch":[91,94,99],"throw":[6,95,97],"true":[2,91,97,98,99],"try":[6,95,97,118,120],"while":[2,99],And:2,For:[2,6,96,98,99,109],IOs:2,NOT:[2,91,99,113],Not:[2,98],RHS:2,That:97,The:[2,6,91,94,95,96,97,98,99,100,101,109,113],Then:2,There:[2,6,97],These:[2,3,6,92,97,109],USE:[2,99],Use:[2,97,99],Used:[2,99,109],Useful:[2,99],Uses:94,Using:97,Will:[2,6],With:2,_assigncompatibilityexplicitdirect:2,_bindioinplac:2,_compatautowrapport:2,_makelit:2,abil:6,about:2,abov:[2,97,99,109],abs:2,absolut:[2,99],abstractpassthroughmodul:109,accept:[2,99],access:[2,6,91,99],accessor:2,across:[91,97,99],activ:97,actual:[2,6,99,109],actualdirect:[2,6],add:[2,6,94,96,97,99,109],addanno:109,adddescend:6,added:[2,6,94,98,99,100,101],adder_:2,addertest:2,addimplicitoutputannotationfil:[88,91,95,102,103],addimplicitoutputannotationfilespec:[103,109,112,121,122],addimplicitoutputfil:[88,91,95,102,103],addimplicitoutputfilespec:[103,109,112,121,122],adding:[6,99],addit:[2,97,99],addition:99,additionalvresourc:96,addpath:99,addr:[2,99],addresourc:99,address:[2,97,99],addsink:97,addsourc:97,advanc:99,advis:2,affect:[2,109],after:[2,91,96,98,99,109,113,115],against:[2,99],agg1:109,agg2:109,aggreg:[0,1,7,8],algorithm:[2,100,101],alias:109,aliasedaggregatefieldexcept:2,all:[2,4,6,94,97,99,118,120],allow:[2,6,99,109],allsamefixedpointonehottest:109,alreadi:[2,6,92,94,97,99],also:[2,97,99,109],alt:[2,92],altbegin:5,alter:[96,109],altern:[2,92,99,118,120],alwai:[2,94],amount:2,analog:[2,99],analogbackboxwrapp:109,analogblackbox:109,analogblackboxio:109,analogblackboxmodul:109,analogblackboxport:109,analogblackboxwrapp:109,analogconnector:109,analogdut:109,analogdutmodul:109,analogintegrationspec:[103,121,122],analogintegrationtest:109,analogread:109,analogreaderblackbox:109,analogreaderio:109,analogreaderwrapp:109,analogsmalldut:109,analogspec:[103,121,122],analogtest:109,analogwriterblackbox:109,analogwriterio:109,andr:2,ani:[2,4,6,94,99],annoparam:109,annot:[0,1,5,6,7,8,91,94,95,97,109],annotatingdiamondspec:[103,121,122],annotationnodedup:[103,121,122],annotationseq:[94,97],anonym:2,anoth:[97,99,100,101],anytim:2,anyv:2,anywher:6,api:[2,4,6,91,94,99],app:[118,120],appear:[2,99],append:[2,99],appli:[2,4,6,91,95,97,98,99],applic:98,approach:97,arb:99,arbit:[88,91,102,103],arbiterctrl:99,arbiterio:99,arbitrari:[2,6],area:2,aren:[2,6,109],arg:[2,4,5,91],argument:[2,6,91,99],arithmet:2,around:94,arrai:[2,6,91,99],asap:[],asbit:[],asbool:[2,99],aschiselenumtest:109,ascii:97,asciiprintabletest:109,asciiprintftest:109,asclock:2,asfixedpoint:2,asinstanceof:[4,91],assert:[0,1,6,7,8,96,97,98,99,103,113,121,122],assertspec:109,assig:91,assign:[2,91,99,109],assint:2,associ:[2,6,94,99],assum:[2,99],assumpt:[2,99],ast:92,astypeof:2,astypeofbundletest:109,astypeofbundlezerowidthtest:109,astypeofspec:109,astypeoftest:[103,121,122],astypeoftruncationtest:109,astypeofvectest:109,asuint:[2,99],asynchron:2,attach:[0,1,5,7,8],attempt:2,attent:2,attr:[100,101],augment:[96,98],autoclonetypeexcept:2,autoclonetypespec:[103,121,122],automat:[2,91,97,99],autonestedclonespec:[103,121,122],avail:[2,6,92],avoid:2,b0010:99,b0100:99,b0110:99,b10001:99,b1000:99,b1001:99,b10101:99,b10110000:99,b10111:99,b1011:99,b101:99,b1101:99,b11:99,back:[94,99],backend:[97,118,119,120],backendcompilationutil:[91,96,109],backward:[94,99],badboolconvers:109,baddirect:109,badsubdirect:109,badunescapedpercentasserttest:109,badwidth:98,bar:[2,97,99],base:[2,6,91,94,97,98,99,109],baseblackbox:[2,5],basebundlenonv:109,basebundlev:109,basemodul:[2,4,5,6],basenam:91,basi:92,basic:[2,6,96,99],basictest:[88,91,102,103,109,113,115,116],baz:97,bdd:109,becaus:[2,4,6,91,92,99,109,118,120],becom:[2,91,100,101],been:[2,6,94,96,99,100,101,109],befor:[2,6,94,99],begin:92,behav:2,behavior:[2,94],being:[2,6,91,97,99,109],belong:6,below:[97,98,99],benefit:2,berkelei:[0,22,23,86],best:6,better:94,betternamingtest:[103,121,122],between:[2,94,99],biconnect:[0,1,2,7,8],bidirect:[2,6],big:99,bigint:[2,5,6,91,98,99,109,113],bin:[99,109],binari:[2,97,98,99],binarypoint:[2,5],bind:[0,1,2,7,8],bindabl:[],bindingdirect:6,bindingexcept:2,bindioinplac:2,bit:[0,1,7,8,91,98,99,109],bitlength:99,bitpat:[88,91,102,103,109],bitpath:99,bitpattouint:99,bitset:2,bitvector:[2,99],bitwidth:[99,109],bitwis:[2,88,91,102,103],bitwiseop:[103,121,122],bitwiseopsspec:109,bitwiseopstest:109,black:2,blackbox:[0,1,7,8,99,103,116,121,122],blackboxadd:109,blackboxconst:109,blackboxfliptest:109,blackboximpl:[103,121,122],blackboximplspec:109,blackboxinvert:109,blackboxminu:109,blackboxminuspath:109,blackboxpassthrough2:109,blackboxpassthrough:109,blackboxpath:99,blackboxrealparam:109,blackboxregist:109,blackboxresourc:99,blackboxspec:109,blackboxstringparam:109,blackboxtest:109,blackboxtypeparam:109,blackboxutil:[88,91,102,103],blackboxwithclocktest:109,blackboxwithparamstest:109,blacklistpackag:6,block:[2,92,99],bodi:[2,92],bool:[2,91,97,98,99,100,101],boolfactori:[2,91],bore:97,boringutil:[88,91,99,102,103],boringutilsexcept:97,boringutilsspec:[103,121,122],both:[2,95,97,99,109],bottom:6,bound:[2,5,6,97],boundval:109,box:2,breadcrumb:94,broken:109,brokenvectorpacketmodul:109,buffer:2,build:99,builder:[0,1,2,7,8],buildernam:6,built:96,bulk:[2,99],bulkconnect:[2,5],bundl:[2,97,98,99,100,101,109,116],bundle1:109,bundle2:109,bundle2uint:[103,121,122],bundle2uintspec:115,bundle3:109,bundlelitbind:6,bundleliteralexcept:[],bundleliteralspec:[103,121,122],bundlenam:2,bundlespec:[103,121,122],bundlespecutil:109,bundletouintspec:109,bundletounittest:109,bundlewir:[103,121,122],bundlewirespec:109,bundlewiretest:109,bundlewithanonymousinn:109,bundlewithargandimplicit:109,bundlewithargumentfield:109,bundlewithimplicit:109,bundlewithintarg:109,buzz:2,cach:[0,23,86],call:[2,6,91,94,96,99,109],can:[2,4,6,91,94,96,97,98,99,109,118,120],cangeneratea:2,canhavehighcost:2,cannot:[2,6,97,98],canon:109,capabl:99,capit:[],care:[2,99],cascad:99,cast:[2,6,99],castfromlit:109,castfromlittest:109,castfromnonlit:109,castfromnonlittest:109,castfromnonlitwidth:109,casttoint:6,casttoinvalidenumtest:109,casttouint:109,casttouinttest:109,cat:[88,91,102,103],caught:91,caus:[2,6,95,98,113],caution:2,certain:94,chain:[2,91,99,109],chang:[2,4,91,94,98,99,109],charact:[2,99],check:[2,88,91,95,98,102,103,109,113],checkpoint:6,checksspec:[103,109,112,121,122],child:109,childbind:6,childdirect:2,children:[2,109],chirrrl:91,chirrtl:[91,94],chisel2:[2,91,99],chisel3:[0,1,7,8,16,23,86,88,90,100,101,102,103,105,121,122],chisel3compon:109,chisel:[2,6,91,92,94,95,96,97,99,109],chiselannot:[2,5,88,91,97,102,103,109,111,112],chiselannotationsspec:[103,109,121,122],chiselannotationsspecbaz:112,chiselannotationsspecfoo:112,chiselannotationsspecqux:112,chiselcircuitannot:[94,95],chiselcli:[88,91,102,103],chiselcontext:6,chiselenum:109,chiselexcept:[2,6],chiselexecutionfailur:91,chiselexecutionopt:[88,102,103],chiselexecutionresult:91,chiselexecutionsuccess:91,chiselflatspec:[109,110,113,115,116,119,120],chiselfrontend:87,chiselfrontend_2:[0,20,22,23,86],chiselgeneratorannot:[94,95],chisellegacyannot:2,chiselloadmemoryannot:97,chiselopt:[88,91,102,103],chiseloptionsviewspec:[103,109,121,122],chiseloutputfileannot:[94,95],chiselpropspec:109,chiselrunn:109,chiselspec:[103,121,122],chiselstack:109,chiselstag:[88,91,94,102,103],chiseltest:[97,103,121,122],chiseltestutilitiesspec:109,chiseltypeof:2,choic:98,choos:2,chosen:[2,99],circuit:[2,5,6,91,92,94,95,96,97,109,118,120],circuitmath:[88,91,102,103],circuitopt:91,classnam:2,clean:[0,24,85,86],cleannam:2,clear:2,clever:6,client:3,clock:[0,1,5,7,8,99,103,121,122],clockandreset:[],clockasuinttest:109,clockdividertest:109,clockspec:109,clone:[2,4,91],clonemoduleasrecord:4,clonemodulespec:[103,121,122],cloneport:4,clonesupertyp:2,clonetyp:2,clonetypeful:2,close:[2,5],clue:91,cmd:92,code:[2,6,96,109],coin:116,col:6,coll:2,collect:[2,99],com:[97,109],combin:[2,98],combination:99,command:[2,5,91,92,118,120],comment:97,common:[2,99,109],commonopt:91,commun:99,commut:6,compact:2,companion:[98,99],companionobjectwithbundl:109,compar:99,comparison:[2,99],compat:[2,88,94,99,102,103],compatibilitycompon:109,compatibilityinteroperabilityspec:[103,121,122],compatibilityspec:[103,121,122],compatibiltyinteroperabilityspec:109,compatibiltyspec:109,compil:[0,2,85,86,91,94,95,97,98,109],compilefirrtltoverilog:91,compileincrement:[0,51,85,86],compileincsetup:[0,51,85,86],compileopt:[0,1,4,6,7,8,91,99],compileoptionsspec:109,compileoptionstest:[103,121,122],complet:[2,6,91,109],complex:109,complexassign:[103,121,122],complexassignspec:109,complexassigntest:109,complic:109,compon:[2,5,6,92,94,97,99],componentnam:6,compos:[2,91,99],composedmultiiomodul:109,composedmultiiotest:109,compositionalport:110,compositionalporttest:110,comput:[91,99,100,101,119,120],computegcd:[119,120],con:2,concaten:[2,99],concis:115,concret:[2,99],cond:[2,99],condit:[2,88,91,92,98,102,103],condition:[2,92],configur:98,conflict:[2,97],confus:2,connect:[2,5,6,97,99,109],connectcompileopt:6,connectfrombit:2,connectinit:5,connectioncompileopt:2,connectspec:[103,121,122],consequ:[2,92,94],consid:[97,99],consider:2,consist:[2,6,97,99],consol:94,constant:[2,97,99],constantpropagationtest:2,constantwidth:2,constrainedbind:6,construct:[2,6,95,97,98,99,109],constructor:[2,91,95,96,109],consum:99,contain:[2,6,91,97,99,100,101,109],containerdirect:2,content:[2,4,87,91,99,109],context:[2,6,92],context_mod:6,continu:6,contrast:2,control:[96,99],conveni:2,convent:98,convers:[2,99],convert:[2,88,91,93,95,99,102,103],convertsimplecommand:92,convertspec:[103,109,112,121,122],convertspecchiselannot:111,convertspecfirrtlannot:111,convertspecfirrtltransform:111,convertspecfoo:111,cookbook:[103,121,122],cookbookspec:[103,121,122],cookbooktest:115,coord:109,coordin:91,copi:[2,99,109],copyresourc:[0,51,85,86],core:[0,1,2,7,8,9,16,23,86,99,100,101],correct:[2,94,109],correspond:[2,4,98,109],cosntant:97,cost:2,could:96,count:[2,99,109],counter:[88,91,102,103,121,122],counterspec:109,countervalu:99,counterwrap:99,countiscorrecttest:109,counton:99,counttest:109,coupl:99,crash:[2,109],creat:[2,6,91,97,99,100,101,109,119],createvalu:99,creation:[99,109],critic:99,cross:97,crosscheck:109,crossconnect:109,crossconnecttest:109,ctx:[2,92],current:[2,6,92,97,98,99,109],current_st:[91,99],currentmodul:2,custom:[2,100,101],custombundl:109,cycl:[2,91,98,99,109,113],cycleprng:113,cyclestowait:109,danger:2,dat:[2,99],data:[0,1,5,6,7,8,91,94,97,99,109],data_in:2,datamirror:2,dataprint:[103,121,122],dataprintspec:109,datastructur:[2,92],datatyp:2,dbl:109,dce:2,dead:2,deal:3,debat:109,debug:[2,118,120],dec:99,decent:6,decim:2,declar:[2,92,109],decod:[103,121,122],decoderspec:109,decodertest:109,decoupl:[88,91,96,102,103,109],decoupledio:99,dedup:2,dedupbl:97,dedupconst:109,dedupio:109,dedupl:[97,109],dedupqueu:109,dedupspec:[103,121,122],dedupsubmodul:109,def:[2,4,6,91,92,94,95,96,97,98,99,109,119,120],defblackbox:5,defin:[2,91,92,96,98,99],definit:[2,3,5,92,96,97,99],definst:5,definvalid:[2,5],defmemori:5,defmemport:5,defmodul:5,defprim:5,defreg:5,defreginit:5,defseqmemori:5,defwir:5,delai:[2,99],delet:[94,109],delta:98,depend:2,dependencyclasspath:[0,51,85,86],dependencyposit:[0,24,85,86],deprec:[3,6,91,94,99],deprecatedsourceinfo:6,depth:[2,99,109],deq:[4,99],deqio:[99,109],dequeu:99,deriv:94,descend:6,describ:[2,97,99],deseri:2,deserv:2,design:[2,6,91],desir:2,desirednam:2,despit:91,detail:[2,6,91,99],detect:109,detecttwoon:115,detecttwoonestest:115,determin:[2,6,97,99],develop:94,devic:[91,96],diagram:98,diamondtest:109,dice:[99,109],did:109,didn:[2,99],die0:99,die1:99,diff_term:2,differ:[2,92,97,99,109],differentbundleonehottest:109,differenti:2,difficult:2,digitfieldnamesinrecord:109,dir:[5,91],direct:[2,6,91,97,103,121,122],direction:[2,99],directionedbundl:109,directionhav:109,directionspec:109,directli:[2,91,97,99],directori:[91,99,109],disabl:[94,95,97,109],disablededup:97,disablefirrtlstag:94,discov:94,discoveredmainclass:[0,48,49,51,85,86],distribut:109,divid:2,divis:2,do_:[2,99],do_ab:2,do_andr:2,do_appli:[2,91],do_asbool:2,do_asclock:2,do_asfixedpoint:2,do_assint:2,do_astypeof:2,do_asuint:2,do_bitset:2,do_contain:2,do_count:2,do_exist:2,do_foral:2,do_head:2,do_indexwher:2,do_lastindexwher:2,do_max:2,do_min:2,do_onehotmux:2,do_onlyindexwher:2,do_orr:2,do_pad:2,do_prioritymux:2,do_read:2,do_setbinarypoint:2,do_tabul:[2,91],do_tail:2,do_tobool:2,do_unary_:2,do_xorr:2,do_zext:2,doc:2,document:2,doe:[2,91,94,96,97,98,99,109],doesn:[2,109],don:[6,99],done:109,donotdedup:2,dontcar:[2,99],dontcarebind:6,donttouch:2,donttouchspec:[103,121,122],doubl:[2,109],doubleparam:[],down:[6,91,99],downconvert:99,drive:99,driver:[2,88,94,102,103],drivercompat:[88,91,95,102,103],drivercompatibilityspec:[103,106,108,121,122],driverspec:[103,121,122],drop:[2,91,99,109],due:2,dummi:[6,99],dummymodul:109,dummynam:6,dump:91,dumpannot:91,dumpfirrtl:91,dumpproto:91,duplic:92,dure:[2,6,91],dut:[2,91],dynam:[2,91,99],dynamiccontext:6,dynamicnamingstack:6,each:[2,4,97,99,109],easi:91,easier:2,edg:2,edu:[0,22,23,86],effect:[2,98],effici:2,either:[2,91,97,98],elabor:[2,6,88,91,95,96,97,99,102,103,109],elaboratespec:[103,109,112,121,122],electr:2,elem:2,elemconnect:6,element:[2,4,6,91,99,109],elementlitbind:6,els:[2,92,99],elsecond:2,elsewhen:[2,92],elsewher:2,elsif:2,elt0:[2,91],elt1:2,elt:[2,91,109],eltsin:99,emiss:[92,94],emit:[2,6,91,92,94,97],emitt:[88,91,93,95,102,103],emittedcompon:94,emittedfirrtlcircuitannot:94,emitterspec:[103,109,112,121,122],emitverilog:91,empti:[2,6,91,109],emul:109,ena:99,enabl:[2,97,99],enableshiftregist:[103,121,122],enableshiftregisterspec:109,enableshiftregistertest:109,enabletest:109,encapsul:[2,96],enclos:[6,92,109],enclosur:6,encod:[94,99],end:[2,6,92,96],endian:99,enforc:99,enlist:109,enough:91,enq:[4,99],enqbit:99,enqio:[99,109],enqueu:99,enqvalid:99,ensur:109,entri:[2,97,99,109],enumannot:2,enumcomponentannot:2,enumdefannot:2,enumer:99,enumexampl:109,enumfactori:2,enummacro:2,enumop:109,enumopstest:109,enumspec:[103,121,122],enumtyp:2,enumtypenam:2,enumvecannot:2,equal:[2,99],equival:[2,92,97,99],err:94,error:[0,1,2,7,8,91,99,109],errorlog:6,escap:2,essenti:2,etc:[4,91],evalu:[2,99],even:2,everi:[2,6,91,97,98,99],everyth:[99,109],evid:2,exactli:[2,6,99],exampl:[2,91,96,97,98,99,103,109,119,120,121,122],except:[2,6,95,97,109],exclud:6,exclus:[2,98,99],execut:[2,6,91,94,95,96,99,109,118,120],executionoptionsmanag:[91,94],exercis:109,exist:[2,3,4,94,95,97,109],exmpl:97,exp:5,expand:[2,6],expandingwidth:2,expect:[2,97,99,109,113],expectedchiseltypeexcept:2,expectedhardwareexcept:2,expectmodulenam:109,expectnam:109,experiment:[0,1,2,7,8,9,16,23,86,88,91,99,102,103,109,121,122],explicit:[2,6,99],explicitcompileopt:2,explicitli:[2,4,91],expon:2,exportedproduct:[0,51,85,86],expos:109,express:2,extend:[2,5,6,91,94,95,96,97,98,99,100,101,107,109,110,111,112,113,115,116,118,119,120],extens:[2,99],extern:[2,96],externaldependencyclasspath:[0,51,85,86],extmodul:[2,103,121,122],extmodulespec:109,extmoduletest:109,extra:[6,99],extract:[2,94],face:99,factori:[2,91,99],fail:[2,97,109],failingasserttest:109,failur:[2,91,109],fairli:2,fals:[2,91,97,98,99],famili:91,fanout:99,featur:[4,91],feedback:[98,99],feedback_shift_regist:98,fibonacci:98,fibonacci_lfsr:98,fibonaccilfsr:[88,91,99,102,103],field:[2,6,100,101],file:[2,91,94,95,97,99,109,119],filehassuffix:109,filenam:[6,91,97,109],filetyp:97,fill:[91,99],fillinterleav:99,fine:109,finish:[2,6,96,109],finishtest:109,finishwrapp:96,finit:99,fir:[2,91,92],fire:[2,96,99],firrtl:[0,1,2,6,7,8,9,13,16,23,86,88,91,93,94,95,97,102,103,109,118,119,120],firrtlbackendcompilationutil:91,firrtlcircuitannot:94,firrtldepth:[2,5],firrtlexecutionopt:91,firrtlexecutionresult:91,firrtlformat:2,firrtlresultopt:91,firrtlstag:94,first:[2,6,98,99,100,101],fix:[2,91],fixedpoint:2,fixedpointfrombitstest:109,fixedpointliteralspec:109,fixedpointlitextracttest:109,fixedpointmuxtest:109,fixedpointonehottest:109,fixedpointspec:[103,121,122],fizz:2,flat:92,flatspec:[107,109,111,112],flatten:97,flatteninst:97,flip:[2,99],flow:[96,99],fmt:2,follow:[2,97,99,109,119],foo:[2,97,99],foolfsr:113,foral:2,forc:2,forceexist:97,form:[2,91,99],format:[2,97],formatin:2,formattedasserttest:109,found:[2,95,99],four:98,fpga:2,fplit:5,frame:6,free:92,freechipsproject:[91,97,109],freespec:109,from:[2,6,91,92,94,95,97,98,99,100,101,109,118,119,120],frombigint:2,frombiginttoliter:2,frombit:91,fromchildren:2,fromdoubl:2,frompar:2,frontend:[2,96],fsm:[103,121,122],fsmspec:115,fsmvendingmachin:116,full:[2,6,95,99],fulladd:2,fulli:2,fullnam:[2,109],futur:[2,3],galoi:98,galois_lfsr:98,galoislfsr:[88,91,99,102,103],gate:[2,96,99],gcd:[103,118,119,121,122],gcdrepl:[118,120],gcdspec:109,gcdtester:[109,119,120],gen:[2,91,95,98,99,109,113],gener:[2,6,91,92,94,95,97,98,99,109,118,119,120],generatecompon:2,generatefirrtl:109,generatordrivenpropertycheck:109,get:[2,91,99],getbundlefield:2,getchiselport:2,getel:2,getnamefailur:109,getorels:98,getuserlinenumb:6,getwidth:[2,97],github:[97,109],give:[2,6],given:[2,6,91,97,99,109],global:[0,6,51,54,57,60,63,66,69,72,75,78,81,84,85,86,94,97],good:99,goodboolconvers:109,gooddirect:109,got:2,grant:2,graph:[2,6],greater:2,greather:2,group:[2,91,99],groupdesc:2,growth:2,guarante:[2,94,99],guess:6,had:2,half:[118,120],handl:[6,97,109],handshak:99,happen:[2,6,99,109],har:[103,121,122],hardwar:[2,6,98,99,109],harnessspec:109,has:[2,6,91,94,96,97,98,99,100,101,109],hasalt:5,hasblackboxinlin:[99,109],hasblackboxpath:[99,109],hasblackboxresourc:[99,109],haschiselexecutionopt:[91,94],hascomplexmemori:109,hasdeadcod:109,hasdeadcodechild:109,hasfirrtlopt:[91,94],hashmap:2,hasid:[2,5,6,99],hasin:109,hasmakelit:109,hasshellopt:95,hassub:97,have:[2,4,6,91,92,94,99,100,101],haven:99,hazard:2,hbeef:2,hbeefdead:2,hdead:2,head:[2,98],header:2,help:[2,92,97,118,120],helper:[2,98,99],henc:2,here:[2,91,97,99],hex:97,hexadecim:2,hexidecim:2,hexorbinari:97,hierarch:97,hierarchc:97,hierarchi:[91,97,118,120],hierarh:97,high:[2,99],higher:2,hit:98,hold:[2,6,92,99],holdov:99,hook:[2,96],hope:2,hot:99,hotvalu:99,how:[2,6,94,109,119,120],hrdware:2,href:109,html:2,http:[2,97,98,109],hugecmemtest:109,hugesmemtest:109,hugevectest:109,hvec:109,ibufd:2,ibufds_i:2,ibufds_ib:2,ibufds_o:2,ident:97,identifi:[2,97,109],identityannot:109,identitychiselannot:109,identitytransform:109,idgen:6,idx:[2,99,109],ignor:[2,99],ignoreseq:2,ignoreseqinbundl:2,ilit:5,illeg:[2,99],illegalassignspec:109,imm:5,immedi:[2,99],immut:2,implement:[2,6,99],impli:[2,99],implicit:[2,4,91,96,99,109],implicitconvers:[88,91,102,103],implicitconversionsspec:[103,121,122],implicitmoduledirectlyinrawmoduletest:109,implicitmoduleinrawmoduletest:109,implicitstatevendingmachin:[103,121,122],implicitstatevendingmachinespec:116,inc:99,includ:[2,6,94,99],inclus:2,incomplet:109,incorrect:2,increas:2,increment:[98,99],indent:92,independ:[2,99],index:[2,5,87,98,99,109],indexedseq:[2,99],indexwher:2,indexwherehelp:2,indic:[2,91,92,95,97,99],infer:[2,91,99],inferredwidthaggregateonehottest:109,info:[6,92],inform:[2,6,91,94],init:[2,5,91,99],initi:[2,91,97,98,99,109],initializ:97,initializeinpar:2,inlin:[88,91,99,102,103,109],inlineinst:97,inlinespec:[103,121,122],inner:2,inner_:2,innermost:[2,6],inout:[2,109],inpacket:2,input:[2,6,91,92,94,97,98,99,100,101],ins:109,insert:[2,6],insid:[2,91,92,99],instanc:[2,6,91,97],instanceid:[2,6,97,109],instancenam:2,instancenamemodul:109,instancenamespec:[103,121,122],instanti:[2,97,99,109],instead:[2,91,99],intact:2,intefac:109,integ:[2,99,119,120],integermathspec:[103,121,122],integermathtest:109,integr:2,intend:94,intent:6,interact:[118,120],interfac:[2,96,98,99,109],interleav:99,intern:[0,1,2,4,7,8,9,16,23,86,88,91,94,97,98,99,102,103],internaldependencyclasspath:[0,51,85,86],internaldontcar:2,interpol:[2,4],interpret:[2,118,120],intparam:2,intyp:109,invalid:[2,98],invalidateapispec:[103,121,122],invalidenumopstest:109,invalidoptionbundletest:109,invers:[2,91,99],invert:[2,99,109],invoc:6,invok:[2,91],involv:[2,97],io_:2,iocmodulevec:109,iocmodulewir:109,iocompat:[103,121,122],iocompatibilityspec:109,iocpluson:109,iocsimpleio:109,iodef:2,iostandard:2,iotest:109,iotestermod:109,iotestermodfil:109,irr:99,irrevoc:99,irrevocableio:99,isclos:2,islittest:109,isn:[2,6,91],ispow2:99,issu:[2,6],iswidthknown:2,itdoesn:97,item:[2,6],iter:[2,6,99],iterablenam:109,its:[2,4,6,91,99],itself:6,ivyconfigur:[0,24,85,86],ivysbt:[0,24,85,86],java:2,json:91,just:[2,91,97,109],jvm:[91,98],keep:2,kei:[2,97,99],keyword:6,kludg:94,know:[2,91,99],known:[2,91,98,99],knownbinarypoint:5,knownintrang:5,knownsintrang:5,knownuintrang:5,knownwidth:5,lang:2,larger:[100,101],largest:2,last:[2,99,109],lastassigntest:109,lastindexwher:2,latenc:99,later:2,layer:[2,91],lazi:[2,6],lead:2,leaf:2,least:[2,98,99],leav:2,left:[2,6,94],legaci:2,legacymodul:2,legal:[2,99],legalcoin:116,length:[2,91,99,115],less:2,let:99,level:[2,4,6,91,92,109],lfsr16:[99,103,121,122],lfsr16maxperiod:[],lfsr4:98,lfsr8:98,lfsr:[88,91,102,103,109,113],lfsrdistribut:109,lfsrmaxperiod:109,lfsrreduc:[98,113],lfsrresettest:113,lfsrspec:[103,109,114,121,122],lfsrtester:[],lgocial:2,librari:[2,109],like:[2,6,91,94,99],limit:[2,6,98],line:[6,91,99,109,118,120],linear:[98,99],link:109,list:[2,91,99,109,118,120],listlookup:99,listmap:2,lit:[2,99],litarg:[5,6],litbind:6,liter:[2,6,91,99],literalextractorspec:[103,121,122],literaloutputtrait:109,litmap:6,litopt:2,littest:109,littestermod:109,littl:99,littoboolean:2,littobooleanopt:2,littodoubl:2,littodoubleopt:2,litvalu:2,live:91,load:[91,97,98,100,101],loadingvalu:[100,101],loadmemori:[],loadmemoryfromfil:97,loadmemoryfromfilespec:[97,103,121,122],loadmemorytransform:[88,91,99,102,103],loc1:5,loc2:5,loc:5,locat:[6,99],lock:[98,113],lockingarbit:99,lockingarbiterlik:99,lockingrrarbit:99,lockupvalu:113,log2:[91,99],log2ceil:[99,109],log2down:[91,99],log2floor:99,log2up:[91,99],log:6,logarithm:99,logentri:6,logic:[2,96,99],lone:2,look:[2,91,99],lookup:[88,91,102,103],lost:2,lot:109,low:[2,99],lower:[99,118,120],lowercas:[],lsb:98,machin:99,macro:[2,6,99],made:99,mai:[2,4,6,91,97,99],main:[0,8,87,103,118,120],mainli:2,make:[2,6,91,109],makemessag:6,manag:91,managedclasspath:[0,51,85,86],mandat:98,mani:2,manual:113,map:[2,5,6,91,92,97,98,99,109],mark:[2,92],mask:[2,99],master:97,match:[2,4,6,92,97,99,109],matcher:[107,109,111,112],math:[88,91,102,103,121,122],mathemat:4,max:[2,5,99,109],maxim:98,maximum:[2,99],maxperiod:[98,99],maxperiodfibonaccilfsr:98,maxperiodgaloislfsr:98,maxwidth:2,maxwidthpluson:2,maybefirrtlstag:[88,91,95,102,103],mean:[2,99],mechan:2,meetthenewlfsr16sameastheoldlfsr16:109,mem1:97,mem:[0,1,7,8,97,103,121,122],membas:[2,6,97],member:2,memori:[2,97],memorydepth:[97,109],memoryloadfiletyp:97,memoryportbind:6,memorysearch:[103,121,122],memorysearchspec:109,memorysearchtest:109,memoryshap:109,memoryspec:109,memorytyp:[97,109],memportdirect:5,memvectest:109,messag:[2,6,91,97],metadata:2,method:[2,91,96,98,99,100,101,109],mew:2,might:91,mimick:2,mimimum:2,min:[2,5,91,99],minimum:[2,99],minu:2,mirror:94,miss:109,missingclonebindingexceptionspec:[103,121,122],mix:[2,97],mixeddirectionaggregateexcept:2,mixedvec:[88,91,102,103,109],mixedvecassigntest:109,mixedvecconnectwithseqtest:109,mixedvecconnectwithvectest:109,mixedvecfromvectest:109,mixedvecinit:99,mixedveciopassthroughmodul:109,mixedveciotest:109,mixedveconebittest:109,mixedvecregtest:109,mixedvecsmalltestbundl:109,mixedvecspec:[103,121,122],mixedvectestbundl:109,mixedvecuintdynamicindextest:109,mixedveczeroentrytest:109,mixin:[2,95],mod1:2,mod2:2,mod:[5,109,116],moda:109,modb:109,modc:109,mode:2,model:2,modif:97,modifi:2,modifii:97,modul:[0,1,4,6,7,8,87,91,92,94,95,96,97,98,99,100,101,103,110,115,116,121,122],modulecompileopt:2,moduledecl:92,moduledefn:92,moduledoublewrap:109,moduleexplicitresetspec:[103,121,122],moduleforgetwrapp:109,moduleio:5,moduleiodynamicindextest:109,modulenam:2,modulerewrap:109,modulespec:109,modulevec:109,modulewhen:109,modulewir:109,modulewithinn:109,modulewrapp:109,modulo:2,moduloasserttest:109,mono:[2,6],monoconnect:[0,1,2,7,8],more:[2,97,99,109],most:[2,99],move:[],movement:6,msg:6,much:[2,99],muchusedmodul:109,mullookup:[103,121,122],mullookupspec:109,mullookuptest:109,multi:109,multiassign:[103,121,122],multiassignspec:109,multiblackboxtest:109,multiclock:[0,1,7,8],multiclockmemtest:109,multiclockspec:[103,121,122],multiclocksubmoduletest:109,multiextmoduletest:109,multiio:109,multiiomodul:[2,103,121,122],multiiopluson:109,multiioqueu:109,multiiospec:109,multiiotest:109,multiiotrait:109,multipl:[2,91,94,97,99,109],multipli:2,multiprintftest:109,must:[2,4,6,91,95,97,99],mutabl:[2,94,97],mutat:94,mutateoptionsmanag:94,mutual:99,mux1h:99,mux:[0,1,7,8,88,91,102,103],muxcas:99,muxlookup:99,muxout:2,muxspec:[103,121,122],muxtest:109,my_target_dir:91,mybit:2,mybundl:[2,99,100,101],mybundletwo:[100,101],mydata:2,mydontcar:99,myenum:2,myint:4,mymodul:[2,109],mynam:2,mynnam:2,mypackag:2,myrecord:2,myseqofbit:99,mystat:99,myuintwir:99,myuintwire0:99,myuintwire1:99,myvalidbundl:99,myvec:2,mywir:2,nag:91,name:[0,2,4,5,6,9,13,16,23,86,91,94,95,97,99,109,110,111,112,118,120],namecollisionmodul:109,namedcompon:[2,6,97],namedmodul:109,namedmoduletest:[109,110],nameid:2,namem:6,nameprefix:6,namer:[0,1,2,7,8],namerecurs:6,namespac:[2,6,97],namingannotationspec:109,namingannotationtest:[103,121,122],namingcontext:6,namingcontextinterfac:6,namingstack:6,natur:2,necess:109,necessari:[2,6,94],necessarili:[4,91],need:[2,91,92,94,96,97,99],needslock:99,neg:2,negat:2,negativeshift:109,neither:2,nest:[2,6,92],nestedanonymousbundl:109,nesteddedup:109,never:99,newlin:2,next:[2,91,98,99,113],nextstat:98,nexttest:109,nextval:99,nil:[91,99],node:[2,5,6,109],nodeq:99,nodetyp:91,noenq:99,non:[2,4,6,91,97,109],none:[2,91,98,99],noneoptionbundletest:109,nonincreasingenum:109,nonliteralenumtyp:109,nonnamedfunct:109,nonnamedhelp:109,nonnamedmodul:109,nootherwiseoverlappedwhentest:109,nor:2,normal:2,norunfirrtlcompilerannot:[94,95],nosourceinfo:6,notaqueu:99,notargetannot:[2,95,111],notat:4,note:[2,6,91,92,94,97,99,109,118,120],noth:[2,6,92,98,99],now:[100,101,109],nullmodulewrapp:109,num:[2,5],number:[2,91,97,98,99,119,120],numblackbox:109,numer:2,numericbound:[2,4,5],numtyp:2,obj:6,object:[2,3,4,5,6,91,92,94,95,96,97,98,99,109,116,118,120],occur:[6,99,109],odd:99,off:[2,99,119],offset:2,ohtouint:99,old:[91,94,109],omit:109,onc:[2,6,99,109],one:[2,6,91,94,97,98,99],onebitunitregvec:109,onebitunitregvectest:109,onehot:[88,91,102,103],onehotmux:2,onehotmuxspec:[103,121,122],onli:[2,6,91,94,97,98,99,109],onlyindexwher:2,onto:99,opbind:6,open:5,oper:[2,6,91,98,99],oppos:95,optfil:91,optim:2,option:[2,6,91,92,94,95,98,99,109,113,118,120],optionbundl:[103,121,122],optionbundlemodul:109,optionbundlespec:109,optionsexcept:95,optionsmanag:[91,94],optnam:91,order:[2,96,99],org:[2,98],organiz:2,origin:2,orr:2,other:[2,97,109],otherbundl:[100,101],otherenum:109,otherwis:[2,6,91,92,99],otherwiseend:5,out:[2,6,99,109],outer:92,outgen:109,outpacket:2,output:[2,6,91,94,97,98,99,100,101,109,119],outputannotationfileannot:94,outputfileannot:94,outputgcd:[100,101],outputtwo:[100,101],outputvalid:[100,101],outsid:[2,6,99],outtyp:[91,109],over:2,overlappedwhentest:109,overload:2,overrid:[2,96,109],overridden:2,overriden:2,overview:2,overwrit:2,own:2,pabl:[2,5],pack:2,packag:[0,1,7,8,88,91,99,102,103,118,120],packet:[2,109],pad:[2,103,121,122],padder:109,padderspec:109,padstest:109,page:87,pair:[2,109],param:[2,5,6,91,92,95,97,98,99,109,113,119,120],paramat:97,paramet:[2,95,99,109],parameter:[91,99],parameteriz:109,parameterizedaggregateonehot:109,parameterizedaggregateonehottest:109,parameterizedmodul:[103,121,122],parameterizedmodulespec:109,parameterizedmoduletest:109,parameterizedonehot:109,parameterizedonehottest:109,parameterizedvendingmachin:116,parameterizedvendingmachinetest:116,parameterless:95,parametr:2,paramincr:98,paramreduct:98,paramse:98,paramstep:98,paramtap:98,paramupdatese:98,paramwidth:98,parent:[2,6,92,97],parentcompileopt:2,parentdirect:2,pars:[2,94,99],parser:91,part:2,partial:99,partialnamedmodul:109,particular:[92,109],pass:[2,6,91,97,115],passthroughmodul:109,passthroughmoduleio:109,passthroughmoduletest:109,passthroughmultiiomodul:109,passthroughrawmodul:109,past:2,path:[6,95,99,109],pattern:[2,99,109],peekpoketest:[119,120],per:[94,98,99],percent:2,perform:[2,91],perhap:2,period:98,pernameindex:109,persist:[91,97],phase:[2,88,91,95,102,103,106,108,109,112,121,122],pin:2,pipe:99,pipeinternalwir:109,pipeio:99,pipelin:99,pipelinedresetmodul:109,pipelinedresettest:109,place:[2,99,118,120],plain:[],plan:2,pluson:109,plusonemodul:109,point:[2,6,98,99],polynomi:98,pop:6,pop_context:6,popcontext:6,popcount:[99,103,121,122],popcountspec:109,popcounttest:109,port:[2,4,5,6,91,92,96,99,109],portbind:6,portion:98,portswintest:110,posit:[2,99,119,120],possibl:[2,91],potenti:2,pow:2,power:[2,99],preced:92,preceed:2,pred:5,predef:2,predic:2,prefer:[2,99],prefix:[2,6,91,99,118,120],prefixref:6,prepar:94,preprocess:[2,92],presenc:97,present:[2,94],preserv:2,pressur:99,pretti:2,prettier:6,prevent:[2,98,99],primarili:94,primit:[2,99],primop:5,print:[2,94,95],printabl:[0,1,5,7,8],printablehelp:2,printablespec:[103,121,122],printf:[0,1,5,7,8,103,121,122],printfspec:109,printfullstacktrac:91,printfullstacktraceannot:95,println:94,prioriti:[2,99],priorityencod:99,priorityencoderoh:99,prioritymux:[2,99],privat:[2,6,92,94,95,98,99],privateobject:2,privateport:110,privatetyp:2,prng:[88,91,99,102,103,113],prngio:98,prngspec:[103,109,114,121,122],prngsteptest:113,prngupdateseedtest:113,problem:[2,109],problemat:2,process:92,processmodul:[],processwhen:92,produc:[2,99,119],producer0:99,producer1:99,product:[2,99],programm:98,programmaticportsspec:[103,109,121,122],project:2,project_root:99,projectdescriptor:[0,24,85,86],promis:99,propag:[2,6,109],proper:[2,97],properli:[2,109],properti:109,propertycheck:109,propspec:109,protect:[2,99],proto:4,protobuf:91,protocol:99,provid:[2,6,91,94,96,97,99,115,118,120],prune:[2,95],pseudo:[98,99],pseudorandom:98,pseudorandomnumb:98,pstring:2,psuedorandom:98,purpos:2,push:[6,99],push_context:6,pushcontext:6,put:[2,99],q2_io:4,queue:[2,4,92,99],queueclon:109,queueclonetest:109,queuedepth:109,queueflowtest:109,queueio:99,queuepipetest:109,queuereasonablereadyvalid:109,queuesinglepipetest:109,queuespec:[103,121,122],quotient:2,rais:[2,99],ram:2,random:[88,91,99,102,103,109,114,121,122],rang:[2,4,5],rangespec:[103,121,122],rather:2,raw:109,rawmodul:[0,1,5,6,7,8,91,95,109,111,112],rawmodulespec:[103,121,122],rawmoduletest:109,rawmodulewithdirectimplicitmodul:109,rawmodulewithimplicitmodul:109,rawparam:[2,109],reach:6,read:2,readabl:6,readi:99,readmemb:97,readmemh:97,readonlybind:6,readyvalidio:99,real:109,realli:2,reason:[2,99],rebindingexcept:2,rebindingspec:[103,121,122],receiv:99,recogn:97,recommend:[2,99],record:[2,4,6,97,99,109],recordspec:[103,121,122],recordspecutil:109,recurs:[2,6,109],reduct:[2,98,113],ref:[5,6],refer:[2,6,92,97],referenc:[2,92],reflect:[2,99],reg:[0,1,6,7,8,88,91,102,103,121,122],regbind:6,regdelaytwo:99,regdelaytworeset:99,regen:99,reginit:2,reginitwidthspec:109,regist:[2,91,98,99,100,101],regnext:2,regofvec:[103,121,122],regofvecspec:115,regspec:109,regtest:109,regtestermod:109,regwidthspec:109,regwithen:99,regwithenableandreset:99,reinterpret:2,rel:[2,99],relat:[97,98],relev:[],reli:[3,97],remain:2,remaind:2,remov:[2,3,4,91,94,99,109],repeatedli:91,repetit:99,repl:[118,120],replac:94,replic:94,report:[0,6,22,23,86,96,98],repres:[2,98,99],represent:[2,6,97,109],request:[2,98],requir:[2,6,97,98,99],requireischiseltyp:6,requireishardwar:6,reset:[2,5,91,92,96,98,99,109,113],resetastypeofbooltest:109,resetdata:99,resolut:[0,23,86],resolv:[2,6,97],resourc:[88,99,103,122],respect:[2,99],respons:2,restrict:2,result:[2,91,97,98,99],ret:5,rethrow:6,retriev:99,returntyp:99,revers:[2,99],right:[2,6],risc:[103,121,122],riscspec:109,risctest:109,rise:2,robin:99,roll:99,rollvalu:99,root:[2,6],rootclass:2,round:[91,99],row:99,rrarbit:99,rtl:2,rule:2,run:[2,91,94,95,97,98,99,113,118,119,120],runfirrtlcompil:[91,95],runfirrtltransform:[2,97,109,111],runfirrtltransformannot:94,runmain:[118,120],runtim:[6,91],safe:[6,97,98,99],safer:91,same:[2,4,6,91,97,99,109],sample_el:6,sampleelementbind:6,saniti:94,sbp:109,sbptester:109,sbt:[2,118,119,120],scala:[0,1,8,86,88,103,122],scenario:[91,99],scheme:2,scope:[2,6,92],seal:[2,5,6,95,98,99],search:[87,99],second:[98,100,101],see:[2,6,91,97,98,99,109,118,120],seed:[98,99,109,113],seedexplan:98,seem:99,seen:99,select:99,selector:99,selfannot:2,semant:[2,99,109],separ:2,seq:[2,5,91,92,96,97,98,99,109,116],seqmap:2,sequenc:[2,99],sequenti:2,sequtil:[0,1,7,8],serial:2,serv:[2,109],set:[2,6,94,98,99,113],share:[4,99],sharedconstantvaldedup:109,sharedconstantvaldeduptop:109,shell:[118,119,120],shift:[2,98,99],shiftregist:99,shiftregisterspec:109,shiftregistertest:109,shiftresettest:109,shifttest:109,should:[2,6,91,94,96,97,99,119,120],shouldntasserttest:109,show:[97,109,119],shown:98,side:[6,99,109],sign:[2,99],signal:[2,6,97,99,100,101],signedbitlength:99,signific:[2,98,99],similar:[2,99,109],similarli:[97,99],simpl:[2,92,97,109],simplebundl:109,simpleconnector:109,simpleharnessbackend:109,simpleio:109,simpleonehottest:109,simpler:99,simplevendingmachin:[103,121,122],simplevendingmachineio:116,simplevendingmachinespec:116,simplevendingmachinetest:116,simpli:[2,109],simplifi:2,simul:[2,97],simultan:99,sinc:[2,91],singl:[2,99,109],singlecyclediv:2,singlecyclemul:2,singleprintftest:109,singletargetannot:[2,109],sink:[6,97,109],sint:[2,91],sintfactori:[2,91],sintlitextracttest:109,sintonehottest:109,sintop:[103,121,122],sintopsspec:109,sintopstest:109,situat:94,size:[2,5,6,99,109],slit:5,slot:5,smaller:[100,101],smallest:99,smart:91,snapshot:[0,19,20,22,23,86],sodacost:116,softwar:2,sole:[2,99],solut:94,some:[2,6,91,94,98,99,109],someoptionbundletest:109,someth:[91,92,94],soon:2,sophist:2,sort:91,sourc:[2,5,6,97,98,109],sourceinfo:[0,1,2,4,5,7,8,9,13,16,23,86,91,96,99],sourceinfodoc:[2,99],sourceinfomacro:6,sourceinfotransformmacro:[2,91,99],sourcelin:6,space:99,spec:109,special:[2,6,96,99],specif:[2,91,97,98,99,119,120],specifi:[2,4,91,97,98,99],specifieddirect:[2,5],split:91,src:[0,87],stabil:[4,91],stack:[6,95,103,121,122],stackspec:109,stacktest:109,stacktraceel:6,stage:[88,91,99,102,103,106,109,121,122],standard:[2,4],start:2,state1:99,state2:99,state:[2,98,99],state_off:[91,99],state_on:[91,99],statement:[2,92,109],stderr:94,step:[91,98,113,119,120],still:[2,6,109],stop:[2,5,96,103,121,122],stopimmediatelytest:109,stopspec:109,stoptest:109,store:[2,95,99],str:[2,109],stream:[0,86],string:[2,4,5,6,91,92,95,96,97,99,109,110,111,112],stringcontext:2,stringparam:[],stripnodedupannot:109,strong:[2,99],strongenum:[0,1,7,8,103,121,122],strongenumannot:109,strongenumannotationspec:109,strongenumannotatorwithchiselnam:109,strongenumfsm:109,strongenumfsmtest:109,strongenumspec:109,struct:2,structur:[2,91,92,94,99],stuff:91,style:[2,91,109],stylist:2,sub:97,subbundl:109,subbundleinvalid:109,subbundlev:109,subclass:[96,99],subel:2,subfield:99,subject:[2,99],submodul:6,submodulewhentest:109,subset:2,subtract:[2,100,101],subtyp:[2,99],succeed:2,succeedingasserttest:109,success:[2,96],successfulli:[91,96],suffix:[94,99],suggest:6,suggestnam:6,suit:97,sum:[2,99],sumwidth:2,sumwidthint:2,superclass:2,suppli:99,support:[2,4,6,91,94,97,98,99,109],suppos:2,surpris:2,switchcontext:99,switchspec:[103,121,122],symbol:91,symptom:109,synchron:2,syncreadmem:2,syncreadmemtest:109,syncreadmemwithzerowidthtest:109,syntax:[2,4],synthesiz:97,system:2,tabul:[2,99],tabulatetest:109,tail:2,take:[2,6,95,99,119,120],taken:[99,109],tap:[98,99,109],tapsfirst:98,tapsmaxperiod:98,tapssecond:98,target:[0,2,87,91,97,99,109],targetdirnam:91,tbl:[103,121,122],tblspec:109,tbltester:109,technic:6,techniqu:[118,120],templat:2,termin:[2,118,119,120],test:[87,91,96,97,99,100,101,103,118,119],test_run_dir:109,test_wir:109,tester:[88,91,102,103,109,115],testerdriv:[88,91,102,103,109],testerdriverspec:[103,121,122],testlength:116,testonli:[119,120],text:[91,97],than:[2,99],thei:[2,3,92,97,98],them:[2,6,97,99,109],therefor:2,thi:[2,4,6,91,94,95,96,97,98,99,109,113,118,119,120],thin:2,thing:[2,6,94,99,109],thingspassthroughtest:109,thisdirect:2,those:[2,3,6,91,99],though:109,thread:2,three:[94,98,109],through:[2,6,97,99],throughput:99,throwabl:6,throwexcept:6,thrown:[2,6],thu:[2,6],tied:97,time:[2,91,97,98,99,113],tobigint:2,tobit:[2,91],tobool:2,todo:[2,91,94,109],todoubl:2,tofirrtl:[2,91],togeth:[2,6,97,99,109],tonam:[2,6],tool:91,toolchain:91,top:[2,4,6,91,94,97,109],topbind:6,topdir:5,topdirectionoutput:109,topmodul:91,topmost:6,topnameannot:94,topofdiamond:109,topolog:99,toprint:2,toptest:109,tostr:[2,6],trace:95,track:2,trait:[2,5,6,91,95,97,98,99,109],transfer:99,transform:[2,94,97,99,109,111],transformclass:2,transit:99,transitnam:[88,91,102,103],transitnamespec:[103,121,122],translat:92,transpar:6,treadl:[97,119],treat:2,tree:[2,97,99],tri:6,trigger:97,trim:6,trimmedstacktrac:6,trivial:[119,120],truncat:[2,99],truncateindex:2,tupl:[99,109],tuple2:6,turn:[96,119],twigg:2,two:[2,97,99,109],txt:97,type:[2,4,6,91,99,118,120],typeequival:2,typenam:2,typic:99,typo:91,uint2bundl:[103,121,122],uint2bundlespec:115,uint2vecofbool:[103,121,122],uint2vecofboolspec:115,uint:[2,4,91,97,98,99,100,101,109],uintfactori:[2,91],uintlitextracttest:109,uintop:[103,121,122],uintopsspec:109,uintopstest:109,uinttooh:99,uinttoohtest:109,ulit:5,unari:2,unary_:2,unbound:[6,99],unchang:2,unchangedwidth:2,unclockedpluson:109,unconstrainedbind:6,undefin:[2,99],under:[2,91,96,99,118,120],underli:[2,94,97],understand:[2,91],undesir:2,undirect:2,unifi:2,uniniti:[91,99],uniqu:[91,97,99],uniqueid:97,uniquenam:97,unit:[2,6,96,97,99,109],unknown:[2,98],unknownbinarypoint:5,unknownwidth:5,unless:[2,91,97,99],unlik:[2,91,99],unlocatablesourceinfo:6,unmanagedclasspath:[0,51,85,86],unmanagedjar:[0,51,85,86],unmodifi:2,unpack:[2,91,99],unquot:2,unrel:2,unsaf:[97,99],unsafeenum:2,unserializ:95,unsign:2,unsignedbitlength:99,unspecifi:[2,91,94],unsupport:99,until:[2,6,91,99,100,101],unus:91,upconvert:99,updat:[0,24,85,86,91,94,98,99],update_cache_2:[0,24,31,32,34,44,45,47,85,86],updatese:[98,113],upon:[2,92],usag:[2,99],use:[2,4,6,91,94,96,97,98,99,109,118,119,120],usecas:[],used:[2,6,91,94,95,97,98,99,100,101,109],useful:[2,6,91,99],user:[2,6,91,97,98,99],uses:[2,97,99,109],usesblackboxaddviainlin:109,usesblackboxminusviapath:109,usesblackboxminusviaresourc:109,usesmem:[97,109],usesmemlow:109,usesmuchusedmodul:109,usesthreemem:109,using:[2,4,91,95,97,98,99,100,101,109],usual:[2,99],util:[2,88,91,102,103,121,122],val0:99,val:[2,4,5,91,95,97,98,99,109,113,116],valgen:109,valid:[2,6,88,91,100,101,102,103],valu:[2,5,6,91,97,98,99,100,101,109,113],value1:[100,101],value2:[100,101],value3:[100,101],value4:[100,101],valuetest:109,vararg:[2,99],variabl:[2,4,99],variant:2,variou:2,vcd:119,vec:[2,6,91,99,103,121,122],vecanalogreaderwrapp:109,vecbundleanalogreaderwrapp:109,vecfactori:2,vecinit:[2,99],veclik:2,vecofbool2uint:[103,121,122],vecofbool2uintspec:115,vecsiz:109,vecspec:109,vector:[2,99,109],vectormap:2,vectorpacketio:[103,121,122],vectorpacketiounittest:109,vectorpacketiounittesterspec:109,vendingmachinegener:[103,121,122],vendingmachinegeneratorspec:116,vendingmachineio:116,vendingmachineutil:[103,121,122],veri:[118,120],veril:[97,109,118,119,120],verilog:[2,91,97,109],verilogvendingmachin:116,verilogvendingmachinewrapp:116,version:[2,99],via:[2,91,98,99,109],view:95,visibl:[2,99],wai:[2,6,91,99,109,118,120],wait:99,walk:2,want:[94,97,99],warn:[6,99],well:99,went:6,were:[2,98,109],what:[2,6,91,98],when:[0,1,6,7,8,91,92,96,97,98,99,103,121,122],whenbegin:5,whencontext:[2,99],whenend:5,whenfram:92,whenspec:109,whentest:109,where:[2,6,91,94,97,99],whether:[2,97,99,100,101],which:[2,4,6,91,92,96,98,99,109,115],white:99,whose:[2,6],width:[2,5,91,98,99,109,113],widtharg:5,widthb:109,widthc:109,widthopt:2,widthspec:[103,121,122],widthtest:109,wiki:[97,98],wikipedia:98,win:2,wire:[2,6,97,99,109],wirebind:6,wiredefault:[2,99],wiredefaultreginitspecimpl:109,wiredefaultwidthspec:109,wirefactori:2,wireregwidthspecimpl:109,wirespec:[103,121,122],wirewidthspec:109,wiringtransform:[],wise:[2,6],wish:2,withclock:[2,109],withclockandnoreset:109,withclockandreset:2,withdonttouch:109,within:[2,92,119,120],without:[2,91,97,99,109],withreset:[2,109],withresettest:109,withsuffix:99,won:[4,91],work:[2,99,109],workaround:2,workdir:97,workspac:97,would:[2,99,113],wrap:[2,98,99],wrapper:[2,94],wraptest:109,writabl:6,write:[2,109],writeoutputannot:94,writer:2,written:[2,94],wrong:6,xilinx:2,xnor:98,xor:[2,98],xorr:2,xtype:109,yet:6,you:[2,4,91,94,96,97,98,99,118,119,120],your:[2,96,118,119,120],ytype:109,zero:[2,98,99,100,101],zeroentryvectest:109,zext:2,zillion:[118,120]},titles:["chiselFrontend","chiselFrontend/src/main","chiselFrontend/src/main/scala/chisel3","chiselFrontend/src/main/scala/chisel3/core","chiselFrontend/src/main/scala/chisel3/experimental","chiselFrontend/src/main/scala/chisel3/internal/firrtl","chiselFrontend/src/main/scala/chisel3/internal","chiselFrontend/src/main/scala","chiselFrontend/src","chiselFrontend/target/scala-2.12/classes/chisel3","chiselFrontend/target/scala-2.12/classes/chisel3/core","chiselFrontend/target/scala-2.12/classes/chisel3/experimental","chiselFrontend/target/scala-2.12/classes/chisel3/internal/firrtl","chiselFrontend/target/scala-2.12/classes/chisel3/internal","chiselFrontend/target/scala-2.12/classes/chisel3/internal/naming","chiselFrontend/target/scala-2.12/classes/chisel3/internal/sourceinfo","chiselFrontend/target/scala-2.12/classes","chiselFrontend/target/scala-2.12/resolution-cache/edu.berkeley.cs/chiselfrontend_2.12/3.2-050719-SNAPSHOT","chiselFrontend/target/scala-2.12/resolution-cache/edu.berkeley.cs/chiselfrontend_2.12/3.2-SNAPSHOT","chiselFrontend/target/scala-2.12/resolution-cache/edu.berkeley.cs/chiselfrontend_2.12","chiselFrontend/target/scala-2.12/resolution-cache/edu.berkeley.cs","chiselFrontend/target/scala-2.12/resolution-cache/reports","chiselFrontend/target/scala-2.12/resolution-cache","chiselFrontend/target/scala-2.12","chiselFrontend/target/streams/$global","chiselFrontend/target/streams/$global/$global","chiselFrontend/target/streams/$global/$global/$global","chiselFrontend/target/streams/$global/$global/$global/streams","chiselFrontend/target/streams/$global/clean/$global","chiselFrontend/target/streams/$global/clean/$global/streams","chiselFrontend/target/streams/$global/clean","chiselFrontend/target/streams/$global/dependencyPositions/$global","chiselFrontend/target/streams/$global/dependencyPositions/$global/streams","chiselFrontend/target/streams/$global/dependencyPositions/$global/streams/update_cache_2.12","chiselFrontend/target/streams/$global/dependencyPositions","chiselFrontend/target/streams/$global/ivyConfiguration/$global","chiselFrontend/target/streams/$global/ivyConfiguration/$global/streams","chiselFrontend/target/streams/$global/ivyConfiguration","chiselFrontend/target/streams/$global/ivySbt/$global","chiselFrontend/target/streams/$global/ivySbt/$global/streams","chiselFrontend/target/streams/$global/ivySbt","chiselFrontend/target/streams/$global/projectDescriptors/$global","chiselFrontend/target/streams/$global/projectDescriptors/$global/streams","chiselFrontend/target/streams/$global/projectDescriptors","chiselFrontend/target/streams/$global/update/$global","chiselFrontend/target/streams/$global/update/$global/streams","chiselFrontend/target/streams/$global/update/$global/streams/update_cache_2.12","chiselFrontend/target/streams/$global/update","chiselFrontend/target/streams/compile/$global","chiselFrontend/target/streams/compile/$global/$global","chiselFrontend/target/streams/compile/$global/$global/discoveredMainClasses","chiselFrontend/target/streams/compile","chiselFrontend/target/streams/compile/compile/$global","chiselFrontend/target/streams/compile/compile/$global/streams","chiselFrontend/target/streams/compile/compile","chiselFrontend/target/streams/compile/compileIncSetup/$global","chiselFrontend/target/streams/compile/compileIncSetup/$global/streams","chiselFrontend/target/streams/compile/compileIncSetup","chiselFrontend/target/streams/compile/compileIncremental/$global","chiselFrontend/target/streams/compile/compileIncremental/$global/streams","chiselFrontend/target/streams/compile/compileIncremental","chiselFrontend/target/streams/compile/copyResources/$global","chiselFrontend/target/streams/compile/copyResources/$global/streams","chiselFrontend/target/streams/compile/copyResources","chiselFrontend/target/streams/compile/dependencyClasspath/$global","chiselFrontend/target/streams/compile/dependencyClasspath/$global/streams","chiselFrontend/target/streams/compile/dependencyClasspath","chiselFrontend/target/streams/compile/exportedProducts/$global","chiselFrontend/target/streams/compile/exportedProducts/$global/streams","chiselFrontend/target/streams/compile/exportedProducts","chiselFrontend/target/streams/compile/externalDependencyClasspath/$global","chiselFrontend/target/streams/compile/externalDependencyClasspath/$global/streams","chiselFrontend/target/streams/compile/externalDependencyClasspath","chiselFrontend/target/streams/compile/internalDependencyClasspath/$global","chiselFrontend/target/streams/compile/internalDependencyClasspath/$global/streams","chiselFrontend/target/streams/compile/internalDependencyClasspath","chiselFrontend/target/streams/compile/managedClasspath/$global","chiselFrontend/target/streams/compile/managedClasspath/$global/streams","chiselFrontend/target/streams/compile/managedClasspath","chiselFrontend/target/streams/compile/unmanagedClasspath/$global","chiselFrontend/target/streams/compile/unmanagedClasspath/$global/streams","chiselFrontend/target/streams/compile/unmanagedClasspath","chiselFrontend/target/streams/compile/unmanagedJars/$global","chiselFrontend/target/streams/compile/unmanagedJars/$global/streams","chiselFrontend/target/streams/compile/unmanagedJars","chiselFrontend/target/streams","chiselFrontend/target","Welcome to Chisel\u2019s documentation!","src/main","src/main/resources/chisel3","src/main/resources","src/main/scala/chisel3","src/main/scala/chisel3/internal/firrtl","src/main/scala/chisel3/internal","src/main/scala/chisel3/stage/phases","src/main/scala/chisel3/stage","src/main/scala/chisel3/testers","src/main/scala/chisel3/util/experimental","src/main/scala/chisel3/util/random","src/main/scala/chisel3/util","GCD.scala","src/main/scala/gcd","src/main/scala","src","src/test/resources/chisel3","src/test/resources","src/test/scala/chisel3","src/test/scala/chisel3/stage/phases","src/test/scala/chisel3/stage","src/test/scala/chiselTests","src/test/scala/chiselTests/experimental","src/test/scala/chiselTests/stage/phases","src/test/scala/chiselTests/stage","src/test/scala/chiselTests/util/random","src/test/scala/chiselTests/util","src/test/scala/cookbook","src/test/scala/examples","&lt;no title&gt;","GCDMain.scala","GCDUnitTest.scala","src/test/scala/gcd","src/test/scala","src/test"],titleterms:{"class":[9,10,11,12,13,14,15,16],"enum":99,addimplicitoutputannotationfil:94,addimplicitoutputannotationfilespec:111,addimplicitoutputfil:94,addimplicitoutputfilespec:111,aggreg:2,analogintegrationspec:109,analogspec:109,annot:2,annotatingdiamondspec:109,annotationnodedup:109,arbit:99,assert:[2,109],astypeoftest:109,attach:2,autoclonetypespec:109,autonestedclonespec:109,basictest:96,berkelei:[17,18,19,20],betternamingtest:109,biconnect:6,bind:6,bit:2,bitpat:99,bitwis:99,bitwiseop:109,blackbox:[2,109],blackboximpl:109,blackboxutil:99,boringutil:97,boringutilsspec:109,builder:6,bundle2uint:115,bundleliteralspec:109,bundlespec:109,bundlewir:109,cach:[17,18,19,20,21,22],cat:99,check:94,checksspec:111,chisel3:[2,3,4,5,6,9,10,11,12,13,14,15,89,91,92,93,94,95,96,97,98,99,104,106,107,108],chisel:87,chiselannot:95,chiselannotationsspec:112,chiselcli:95,chiselexecutionopt:91,chiselfrontend:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86],chiselfrontend_2:[17,18,19],chiselopt:95,chiseloptionsviewspec:112,chiselspec:109,chiselstag:95,chiseltest:[109,110,111,112,113,114],circuitmath:99,clean:[28,29,30],clock:[2,109],clonemodulespec:109,compat:91,compatibilityinteroperabilityspec:109,compatibilityspec:109,compil:[48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84],compileincrement:[58,59,60],compileincsetup:[55,56,57],compileopt:2,compileoptionstest:109,complexassign:109,condit:99,connectspec:109,convert:[92,94],convertspec:111,cookbook:115,cookbookspec:115,copyresourc:[61,62,63],core:[3,10],counter:[99,109],data:2,dataprint:109,decod:109,decoupl:99,dedupspec:109,dependencyclasspath:[64,65,66],dependencyposit:[31,32,33,34],direct:109,discoveredmainclass:50,document:87,donttouchspec:109,driver:91,drivercompat:94,drivercompatibilityspec:107,driverspec:109,edu:[17,18,19,20],elabor:94,elaboratespec:111,emitt:[92,94],emitterspec:111,enableshiftregist:109,enumspec:109,error:6,exampl:116,experiment:[4,11,97,110],exportedproduct:[67,68,69],externaldependencyclasspath:[70,71,72],extmodul:109,fibonaccilfsr:98,firrtl:[5,12,92],fixedpointspec:109,fsm:115,galoislfsr:98,gcd:[100,101,109,120],gcdmain:[118,120],gcdunittest:[119,120],global:[24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,52,53,55,56,58,59,61,62,64,65,67,68,70,71,73,74,76,77,79,80,82,83],har:109,implicitconvers:99,implicitconversionsspec:109,implicitstatevendingmachin:116,indic:87,inlin:97,inlinespec:109,instancenamespec:109,integermathspec:109,intern:[5,6,12,13,14,15,92,93],internaldependencyclasspath:[73,74,75],invalidateapispec:109,iocompat:109,ivyconfigur:[35,36,37],ivysbt:[38,39,40],lfsr16:109,lfsr:[98,99],lfsrspec:113,literalextractorspec:109,loadmemoryfromfilespec:109,loadmemorytransform:97,lookup:99,main:[1,2,3,4,5,6,7,88,89,90,91,92,93,94,95,96,97,98,99,101,102],managedclasspath:[76,77,78],math:[99,109],maybefirrtlstag:94,mem:[2,109],memorysearch:109,missingclonebindingexceptionspec:109,mixedvec:99,mixedvecspec:109,modul:[2,109],moduleexplicitresetspec:109,monoconnect:6,mullookup:109,multiassign:109,multiclock:2,multiclockspec:109,multiiomodul:109,mux:[2,99],muxspec:109,name:14,namer:6,namingannotationtest:109,onehot:99,onehotmuxspec:109,optionbundl:109,packag:[2,3,4,95,96],pad:109,parameterizedmodul:109,phase:[94,107,111],popcount:109,printabl:2,printablespec:109,printf:[2,109],prng:98,prngspec:113,programmaticportsspec:110,projectdescriptor:[41,42,43],queuespec:109,random:[98,113],rangespec:109,rawmodul:2,rawmodulespec:109,rebindingspec:109,recordspec:109,reg:[2,99,109],regofvec:115,report:21,resolut:[17,18,19,20,21,22],resourc:[89,90,104,105],risc:109,scala:[2,3,4,5,6,7,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,91,92,93,94,95,96,97,98,99,100,101,102,106,107,108,109,110,111,112,113,114,115,116,118,119,120,121],sequtil:2,simplevendingmachin:116,sintop:109,snapshot:[17,18],sourceinfo:[6,15],src:[1,2,3,4,5,6,7,8,88,89,90,91,92,93,94,95,96,97,98,99,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,120,121,122],stack:109,stage:[94,95,107,108,111,112],stop:109,stream:[24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85],strongenum:[2,109],switchspec:109,tabl:87,target:[9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86],tbl:109,test:[104,105,106,107,108,109,110,111,112,113,114,115,116,120,121,122],tester:96,testerdriv:96,testerdriverspec:109,transitnam:99,transitnamespec:109,uint2bundl:115,uint2vecofbool:115,uintop:109,unmanagedclasspath:[79,80,81],unmanagedjar:[82,83,84],updat:[44,45,46,47],update_cache_2:[33,46],util:[97,98,99,109,113,114],valid:99,vec:109,vecofbool2uint:115,vectorpacketio:109,vendingmachinegener:116,vendingmachineutil:116,welcom:87,when:[2,109],widthspec:109,wirespec:109}})